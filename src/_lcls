done1
#include "..." search starts here:
#include <...> search starts here:
 /usr/local/lib/clang/3.1/include
 /usr/local/include
 /usr/include
 /usr/include/linux
 /usr/include/c++/4.6
 /usr/include/c++/4.6/i486-linux-gnu
 /usr/include/c++/4.6/backward
End of search list.
#include "..." search starts here:
#include <...> search starts here:
 /usr/local/lib/clang/3.1/include
 /usr/local/include
 /usr/include
 /usr/include/linux
 /usr/include/c++/4.6
 /usr/include/c++/4.6/i486-linux-gnu
 /usr/include/c++/4.6/backward
End of search list.
[DEBUG][alg/InitParseConsumer.h - line 27] +decl, size = 1
[DEBUG][alg/InitParseConsumer.h - line 27] +decl, size = 2
[DEBUG][alg/InitParseConsumer.h - line 27] +decl, size = 3
[DEBUG][alg/InitParseConsumer.h - line 27] +decl, size = 4
[DEBUG][alg/InitParseConsumer.h - line 27] +decl, size = 5
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 30] enter FuncDecl
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 37] unknown FunctionDecl type
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 51] enter ClassDecl
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 30] enter FuncDecl
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 13] decl: CXXMethod
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt CompoundStmt ( 154791128 -> p 0 )
(CompoundStmt 0x939ecd8)
{
}
;
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 30] enter FuncDecl
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 13] decl: CXXMethod
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 13] decl: ParmVar
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 22]  ---- name = x | type = T | desugared type = T | const = 0 | extern = 0 | POD = 0
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt CompoundStmt ( 154791128 -> p 0 )
(CompoundStmt 0x939ecd8)
{
}
;
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 30] enter FuncDecl
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 37] unknown FunctionDecl type
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 51] enter ClassDecl
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 30] enter FuncDecl
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 30] enter FuncDecl
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 30] enter FuncDecl
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 30] enter FuncDecl
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 13] decl: Function
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 13] decl: Var
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 22]  ---- name = b | type = class B | desugared type = class B | const = 0 | extern = 0 | POD = 0
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 13] decl: CXXRecord
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 13] decl: Field
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 13] decl: CXXRecord
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 13] decl: Field
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 13] decl: Var
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 22]  ---- name = anoy | type = class ____nameddecl____1 | desugared type = class ____nameddecl____1 | const = 0 | extern = 0 | POD = 0
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt CompoundStmt ( 155006896 -> p 0 )
(CompoundStmt 0x93d37b0
  (DeclStmt 0x93d2fc0
    0x93d2b90 "B ____nameddecl____0 =
      (CXXConstructExpr 0x93d2fa0 'class B''void (void) throw()')")
  (CXXMemberCallExpr 0x93d3020 'void'
    (MemberExpr 0x93d2fe8 '<bound member function type>' .func 0x939f070
      (ImplicitCastExpr 0x93d3040 'class A<class B>' lvalue <UncheckedDerivedToBase (A)>
        (DeclRefExpr 0x93d2fd0 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')))
    (CXXConstructExpr 0x93d3120 'class B':'class B''void (const class B &) throw()'
      (ImplicitCastExpr 0x93d3050 'const class B' lvalue <NoOp>
        (DeclRefExpr 0x93d3008 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B'))))
  (DeclStmt 0x93d3410
    0x93d3280 "class LOCAL;")
  (DeclStmt 0x93d3778
    0x93d3420 "class ____nameddecl____1;"
    0x93d3590 "class ____nameddecl____1 ____nameddecl____2 =
      (CXXConstructExpr 0x93d3748 'class ____nameddecl____1':'class ____nameddecl____1''void (void) throw()')")
  (ReturnStmt 0x93d37a0
    (IntegerLiteral 0x93d3788 'int' 0)))
{
    B ____nameddecl____0;
    ____nameddecl____0.func(____nameddecl____0);
    class LOCAL {
        int x;
    };
    class ____nameddecl____1 {
        int y;
    } class  ____nameddecl____2;
    return 0;
}
;
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt DeclStmt ( 155004864 -> p 155006896 )
(DeclStmt 0x93d2fc0
  0x93d2b90 "B ____nameddecl____0 =
    (CXXConstructExpr 0x93d2fa0 'class B''void (void) throw()')")
B ____nameddecl____0;
;
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 99] notPODType
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 105] initStyle 1
[DEBUG][alg/FlattenCFG/../Algorithm.h - line 90] --- ASSIGN EXPR BEGIN ---
[DEBUG][alg/FlattenCFG/../Algorithm.h - line 96] --- DECLREF END ---
[DEBUG][alg/FlattenCFG/../Algorithm.h - line 101] --- ASSIGN EXPR END ---
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt CXXMemberCallExpr ( 155004960 -> p 155006896 )
(CXXMemberCallExpr 0x93d3020 'void'
  (MemberExpr 0x93d2fe8 '<bound member function type>' .func 0x939f070
    (ImplicitCastExpr 0x93d3040 'class A<class B>' lvalue <UncheckedDerivedToBase (A)>
      (DeclRefExpr 0x93d2fd0 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')))
  (CXXConstructExpr 0x93d3120 'class B':'class B''void (const class B &) throw()'
    (ImplicitCastExpr 0x93d3050 'const class B' lvalue <NoOp>
      (DeclRefExpr 0x93d3008 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B'))))
____nameddecl____0.func(____nameddecl____0);
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt MemberExpr ( 155004904 -> p 155004960 )
(MemberExpr 0x93d2fe8 '<bound member function type>' .func 0x939f070
  (ImplicitCastExpr 0x93d3040 'class A<class B>' lvalue <UncheckedDerivedToBase (A)>
    (DeclRefExpr 0x93d2fd0 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')))
____nameddecl____0.func;
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt ImplicitCastExpr ( 155004992 -> p 155004904 )
(ImplicitCastExpr 0x93d3040 'class A<class B>' lvalue <UncheckedDerivedToBase (A)>
  (DeclRefExpr 0x93d2fd0 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B'))
____nameddecl____0;
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt DeclRefExpr ( 155004880 -> p 155004992 )
(DeclRefExpr 0x93d2fd0 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')
____nameddecl____0;
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt CXXConstructExpr ( 155005216 -> p 155004960 )
(CXXConstructExpr 0x93d3120 'class B':'class B''void (const class B &) throw()'
  (ImplicitCastExpr 0x93d3050 'const class B' lvalue <NoOp>
    (DeclRefExpr 0x93d3008 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')))
____nameddecl____0;
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt ImplicitCastExpr ( 155005008 -> p 155005216 )
(ImplicitCastExpr 0x93d3050 'const class B' lvalue <NoOp>
  (DeclRefExpr 0x93d3008 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B'))
____nameddecl____0;
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt DeclRefExpr ( 155004936 -> p 155005008 )
(DeclRefExpr 0x93d3008 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')
____nameddecl____0;
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt DeclStmt ( 155005968 -> p 155006896 )
(DeclStmt 0x93d3410
  0x93d3280 "class LOCAL;")
class LOCAL {
    int x;
};
;
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt DeclStmt ( 155006840 -> p 155006896 )
(DeclStmt 0x93d3778
  0x93d3420 "class ____nameddecl____1;"
  0x93d3590 "class ____nameddecl____1 ____nameddecl____2 =
    (CXXConstructExpr 0x93d3748 'class ____nameddecl____1':'class ____nameddecl____1''void (void) throw()')")
class ____nameddecl____1 {
    int y;
} class  ____nameddecl____2;
;
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 99] notPODType
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 105] initStyle 1
[DEBUG][alg/FlattenCFG/../Algorithm.h - line 90] --- ASSIGN EXPR BEGIN ---
[DEBUG][alg/FlattenCFG/../Algorithm.h - line 96] --- DECLREF END ---
[DEBUG][alg/FlattenCFG/../Algorithm.h - line 101] --- ASSIGN EXPR END ---
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt ReturnStmt ( 155006880 -> p 155006896 )
(ReturnStmt 0x93d37a0
  (IntegerLiteral 0x93d3788 'int' 0))
return 0;
;
[DEBUG][alg/FlattenCFG/MoveLocalDeclToTop.cpp - line 26] Stmt IntegerLiteral ( 155006856 -> p 155006880 )
(IntegerLiteral 0x93d3788 'int' 0)
0;
[DEBUG][alg/SimplePrinter.cpp - line 7] alg started.
template <typename T> class A {
public:
    void func(T x);
};
void func(T x) {
}

;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CompoundStmt ( 154791128 -> p 0 )
(CompoundStmt 0x939ecd8)
{
}
;
[0;1;33m
 [B1 (ENTRY)]
[0m[0;35m   Succs [0m(1):[0;35m B0[0m
[0;1;33m
 [B0 (EXIT)]
[0m[0;34m   Preds [0m(1):[0;34m B1[0m

Writing '/tmp/llvm_MJRkeX/CFG.dot'...  done. 
class B : public A<B> {
public:
};
int main() {
    B ____nameddecl____0;
    class ____nameddecl____1 ____nameddecl____2;
    ____nameddecl____0 = B();
    ____nameddecl____0.func(____nameddecl____0);
    ____nameddecl____2 = class ____nameddecl____1();
    return 0;
}

;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CompoundStmt ( 155006896 -> p 0 )
(CompoundStmt 0x93d37b0
  (DeclStmt 0x93d46c0
    0x93d2b90 "B ____nameddecl____0")
  (DeclStmt 0x93d4b00
    0x93d3590 "class ____nameddecl____1 ____nameddecl____2")
  (CXXOperatorCallExpr 0x93d4698 'class B' lvalue
    (ImplicitCastExpr 0x93d4688 'class B &(*)(const class B &) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0x93d4630 'class B &(const class B &) throw()' lvalue CXXMethod 0x93d39c0 'operator=' 'class B &(const class B &) throw()'))
    (DeclRefExpr 0x93d3840 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')
    (MaterializeTemporaryExpr 0x93d4620 'const class B' lvalue
      (ImplicitCastExpr 0x93d4610 'const class B' <NoOp>
        (CXXFunctionalCastExpr 0x93d3828 'class B' functional cast to class B <ConstructorConversion>
          (CXXConstructExpr 0x93d3800 'class B''void (const class B &) throw()' elidable
            (MaterializeTemporaryExpr 0x93d37f0 'const class B' lvalue
              (ImplicitCastExpr 0x93d37e0 'const class B' <NoOp>
                (CXXConstructExpr 0x93d2fa0 'class B''void (void) throw()'))))))))
  (CXXMemberCallExpr 0x93d3020 'void'
    (MemberExpr 0x93d2fe8 '<bound member function type>' .func 0x939f070
      (ImplicitCastExpr 0x93d3040 'class A<class B>' lvalue <UncheckedDerivedToBase (A)>
        (DeclRefExpr 0x93d2fd0 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')))
    (CXXConstructExpr 0x93d3120 'class B':'class B''void (const class B &) throw()'
      (ImplicitCastExpr 0x93d3050 'const class B' lvalue <NoOp>
        (DeclRefExpr 0x93d3008 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B'))))
  (CXXOperatorCallExpr 0x93d4ad8 'class ____nameddecl____1' lvalue
    (ImplicitCastExpr 0x93d4ac8 'class ____nameddecl____1 &(*)(const class ____nameddecl____1 &) throw()' <FunctionToPointerDecay>
      (DeclRefExpr 0x93d4a78 'class ____nameddecl____1 &(const class ____nameddecl____1 &) throw()' lvalue CXXMethod 0x93d48f0 'operator=' 'class ____nameddecl____1 &(const class ____nameddecl____1 &) throw()'))
    (DeclRefExpr 0x93d4878 'class ____nameddecl____1':'class ____nameddecl____1' lvalue Var 0x93d3590 '____nameddecl____2' 'class ____nameddecl____1':'class ____nameddecl____1')
    (MaterializeTemporaryExpr 0x93d4a68 'const class ____nameddecl____1' lvalue
      (ImplicitCastExpr 0x93d4a58 'const class ____nameddecl____1' <NoOp>
        (CXXFunctionalCastExpr 0x93d4860 'class ____nameddecl____1':'class ____nameddecl____1' functional cast to class ____nameddecl____1 <ConstructorConversion>
          (CXXConstructExpr 0x93d4790 'class ____nameddecl____1':'class ____nameddecl____1''void (const class ____nameddecl____1 &) throw()' elidable
            (MaterializeTemporaryExpr 0x93d4700 'const class ____nameddecl____1' lvalue
              (ImplicitCastExpr 0x93d46f0 'const class ____nameddecl____1' <NoOp>
                (CXXConstructExpr 0x93d3748 'class ____nameddecl____1':'class ____nameddecl____1''void (void) throw()'))))))))
  (ReturnStmt 0x93d37a0
    (IntegerLiteral 0x93d3788 'int' 0)))
{
    B ____nameddecl____0;
    class ____nameddecl____1 ____nameddecl____2;
    ____nameddecl____0 = B();
    ____nameddecl____0.func(____nameddecl____0);
    ____nameddecl____2 = class ____nameddecl____1();
    return 0;
}
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt DeclStmt ( 155010752 -> p 155006896 )
(DeclStmt 0x93d46c0
  0x93d2b90 "B ____nameddecl____0")
B ____nameddecl____0;
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt DeclStmt ( 155011840 -> p 155006896 )
(DeclStmt 0x93d4b00
  0x93d3590 "class ____nameddecl____1 ____nameddecl____2")
class ____nameddecl____1 ____nameddecl____2;
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CXXOperatorCallExpr ( 155010712 -> p 155006896 )
(CXXOperatorCallExpr 0x93d4698 'class B' lvalue
  (ImplicitCastExpr 0x93d4688 'class B &(*)(const class B &) throw()' <FunctionToPointerDecay>
    (DeclRefExpr 0x93d4630 'class B &(const class B &) throw()' lvalue CXXMethod 0x93d39c0 'operator=' 'class B &(const class B &) throw()'))
  (DeclRefExpr 0x93d3840 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')
  (MaterializeTemporaryExpr 0x93d4620 'const class B' lvalue
    (ImplicitCastExpr 0x93d4610 'const class B' <NoOp>
      (CXXFunctionalCastExpr 0x93d3828 'class B' functional cast to class B <ConstructorConversion>
        (CXXConstructExpr 0x93d3800 'class B''void (const class B &) throw()' elidable
          (MaterializeTemporaryExpr 0x93d37f0 'const class B' lvalue
            (ImplicitCastExpr 0x93d37e0 'const class B' <NoOp>
              (CXXConstructExpr 0x93d2fa0 'class B''void (void) throw()'))))))))
____nameddecl____0 = B();
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt ImplicitCastExpr ( 155010696 -> p 155010712 )
(ImplicitCastExpr 0x93d4688 'class B &(*)(const class B &) throw()' <FunctionToPointerDecay>
  (DeclRefExpr 0x93d4630 'class B &(const class B &) throw()' lvalue CXXMethod 0x93d39c0 'operator=' 'class B &(const class B &) throw()'))
operator=;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt DeclRefExpr ( 155010608 -> p 155010696 )
(DeclRefExpr 0x93d4630 'class B &(const class B &) throw()' lvalue CXXMethod 0x93d39c0 'operator=' 'class B &(const class B &) throw()')
operator=;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt DeclRefExpr ( 155007040 -> p 155010712 )
(DeclRefExpr 0x93d3840 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')
____nameddecl____0;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt MaterializeTemporaryExpr ( 155010592 -> p 155010712 )
(MaterializeTemporaryExpr 0x93d4620 'const class B' lvalue
  (ImplicitCastExpr 0x93d4610 'const class B' <NoOp>
    (CXXFunctionalCastExpr 0x93d3828 'class B' functional cast to class B <ConstructorConversion>
      (CXXConstructExpr 0x93d3800 'class B''void (const class B &) throw()' elidable
        (MaterializeTemporaryExpr 0x93d37f0 'const class B' lvalue
          (ImplicitCastExpr 0x93d37e0 'const class B' <NoOp>
            (CXXConstructExpr 0x93d2fa0 'class B''void (void) throw()')))))))
B();
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt ImplicitCastExpr ( 155010576 -> p 155010592 )
(ImplicitCastExpr 0x93d4610 'const class B' <NoOp>
  (CXXFunctionalCastExpr 0x93d3828 'class B' functional cast to class B <ConstructorConversion>
    (CXXConstructExpr 0x93d3800 'class B''void (const class B &) throw()' elidable
      (MaterializeTemporaryExpr 0x93d37f0 'const class B' lvalue
        (ImplicitCastExpr 0x93d37e0 'const class B' <NoOp>
          (CXXConstructExpr 0x93d2fa0 'class B''void (void) throw()'))))))
B();
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CXXFunctionalCastExpr ( 155007016 -> p 155010576 )
(CXXFunctionalCastExpr 0x93d3828 'class B' functional cast to class B <ConstructorConversion>
  (CXXConstructExpr 0x93d3800 'class B''void (const class B &) throw()' elidable
    (MaterializeTemporaryExpr 0x93d37f0 'const class B' lvalue
      (ImplicitCastExpr 0x93d37e0 'const class B' <NoOp>
        (CXXConstructExpr 0x93d2fa0 'class B''void (void) throw()')))))
B();
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CXXConstructExpr ( 155006976 -> p 155007016 )
(CXXConstructExpr 0x93d3800 'class B''void (const class B &) throw()' elidable
  (MaterializeTemporaryExpr 0x93d37f0 'const class B' lvalue
    (ImplicitCastExpr 0x93d37e0 'const class B' <NoOp>
      (CXXConstructExpr 0x93d2fa0 'class B''void (void) throw()'))))
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt MaterializeTemporaryExpr ( 155006960 -> p 155006976 )
(MaterializeTemporaryExpr 0x93d37f0 'const class B' lvalue
  (ImplicitCastExpr 0x93d37e0 'const class B' <NoOp>
    (CXXConstructExpr 0x93d2fa0 'class B''void (void) throw()')))
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt ImplicitCastExpr ( 155006944 -> p 155006960 )
(ImplicitCastExpr 0x93d37e0 'const class B' <NoOp>
  (CXXConstructExpr 0x93d2fa0 'class B''void (void) throw()'))
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CXXConstructExpr ( 155004832 -> p 155006944 )
(CXXConstructExpr 0x93d2fa0 'class B''void (void) throw()')
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CXXMemberCallExpr ( 155004960 -> p 155006896 )
(CXXMemberCallExpr 0x93d3020 'void'
  (MemberExpr 0x93d2fe8 '<bound member function type>' .func 0x939f070
    (ImplicitCastExpr 0x93d3040 'class A<class B>' lvalue <UncheckedDerivedToBase (A)>
      (DeclRefExpr 0x93d2fd0 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')))
  (CXXConstructExpr 0x93d3120 'class B':'class B''void (const class B &) throw()'
    (ImplicitCastExpr 0x93d3050 'const class B' lvalue <NoOp>
      (DeclRefExpr 0x93d3008 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B'))))
____nameddecl____0.func(____nameddecl____0);
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt MemberExpr ( 155004904 -> p 155004960 )
(MemberExpr 0x93d2fe8 '<bound member function type>' .func 0x939f070
  (ImplicitCastExpr 0x93d3040 'class A<class B>' lvalue <UncheckedDerivedToBase (A)>
    (DeclRefExpr 0x93d2fd0 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')))
____nameddecl____0.func;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt ImplicitCastExpr ( 155004992 -> p 155004904 )
(ImplicitCastExpr 0x93d3040 'class A<class B>' lvalue <UncheckedDerivedToBase (A)>
  (DeclRefExpr 0x93d2fd0 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B'))
____nameddecl____0;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt DeclRefExpr ( 155004880 -> p 155004992 )
(DeclRefExpr 0x93d2fd0 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')
____nameddecl____0;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CXXConstructExpr ( 155005216 -> p 155004960 )
(CXXConstructExpr 0x93d3120 'class B':'class B''void (const class B &) throw()'
  (ImplicitCastExpr 0x93d3050 'const class B' lvalue <NoOp>
    (DeclRefExpr 0x93d3008 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')))
____nameddecl____0;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt ImplicitCastExpr ( 155005008 -> p 155005216 )
(ImplicitCastExpr 0x93d3050 'const class B' lvalue <NoOp>
  (DeclRefExpr 0x93d3008 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B'))
____nameddecl____0;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt DeclRefExpr ( 155004936 -> p 155005008 )
(DeclRefExpr 0x93d3008 'class B' lvalue Var 0x93d2b90 '____nameddecl____0' 'class B')
____nameddecl____0;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CXXOperatorCallExpr ( 155011800 -> p 155006896 )
(CXXOperatorCallExpr 0x93d4ad8 'class ____nameddecl____1' lvalue
  (ImplicitCastExpr 0x93d4ac8 'class ____nameddecl____1 &(*)(const class ____nameddecl____1 &) throw()' <FunctionToPointerDecay>
    (DeclRefExpr 0x93d4a78 'class ____nameddecl____1 &(const class ____nameddecl____1 &) throw()' lvalue CXXMethod 0x93d48f0 'operator=' 'class ____nameddecl____1 &(const class ____nameddecl____1 &) throw()'))
  (DeclRefExpr 0x93d4878 'class ____nameddecl____1':'class ____nameddecl____1' lvalue Var 0x93d3590 '____nameddecl____2' 'class ____nameddecl____1':'class ____nameddecl____1')
  (MaterializeTemporaryExpr 0x93d4a68 'const class ____nameddecl____1' lvalue
    (ImplicitCastExpr 0x93d4a58 'const class ____nameddecl____1' <NoOp>
      (CXXFunctionalCastExpr 0x93d4860 'class ____nameddecl____1':'class ____nameddecl____1' functional cast to class ____nameddecl____1 <ConstructorConversion>
        (CXXConstructExpr 0x93d4790 'class ____nameddecl____1':'class ____nameddecl____1''void (const class ____nameddecl____1 &) throw()' elidable
          (MaterializeTemporaryExpr 0x93d4700 'const class ____nameddecl____1' lvalue
            (ImplicitCastExpr 0x93d46f0 'const class ____nameddecl____1' <NoOp>
              (CXXConstructExpr 0x93d3748 'class ____nameddecl____1':'class ____nameddecl____1''void (void) throw()'))))))))
____nameddecl____2 = class ____nameddecl____1();
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt ImplicitCastExpr ( 155011784 -> p 155011800 )
(ImplicitCastExpr 0x93d4ac8 'class ____nameddecl____1 &(*)(const class ____nameddecl____1 &) throw()' <FunctionToPointerDecay>
  (DeclRefExpr 0x93d4a78 'class ____nameddecl____1 &(const class ____nameddecl____1 &) throw()' lvalue CXXMethod 0x93d48f0 'operator=' 'class ____nameddecl____1 &(const class ____nameddecl____1 &) throw()'))
operator=;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt DeclRefExpr ( 155011704 -> p 155011784 )
(DeclRefExpr 0x93d4a78 'class ____nameddecl____1 &(const class ____nameddecl____1 &) throw()' lvalue CXXMethod 0x93d48f0 'operator=' 'class ____nameddecl____1 &(const class ____nameddecl____1 &) throw()')
operator=;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt DeclRefExpr ( 155011192 -> p 155011800 )
(DeclRefExpr 0x93d4878 'class ____nameddecl____1':'class ____nameddecl____1' lvalue Var 0x93d3590 '____nameddecl____2' 'class ____nameddecl____1':'class ____nameddecl____1')
____nameddecl____2;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt MaterializeTemporaryExpr ( 155011688 -> p 155011800 )
(MaterializeTemporaryExpr 0x93d4a68 'const class ____nameddecl____1' lvalue
  (ImplicitCastExpr 0x93d4a58 'const class ____nameddecl____1' <NoOp>
    (CXXFunctionalCastExpr 0x93d4860 'class ____nameddecl____1':'class ____nameddecl____1' functional cast to class ____nameddecl____1 <ConstructorConversion>
      (CXXConstructExpr 0x93d4790 'class ____nameddecl____1':'class ____nameddecl____1''void (const class ____nameddecl____1 &) throw()' elidable
        (MaterializeTemporaryExpr 0x93d4700 'const class ____nameddecl____1' lvalue
          (ImplicitCastExpr 0x93d46f0 'const class ____nameddecl____1' <NoOp>
            (CXXConstructExpr 0x93d3748 'class ____nameddecl____1':'class ____nameddecl____1''void (void) throw()')))))))
class ____nameddecl____1();
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt ImplicitCastExpr ( 155011672 -> p 155011688 )
(ImplicitCastExpr 0x93d4a58 'const class ____nameddecl____1' <NoOp>
  (CXXFunctionalCastExpr 0x93d4860 'class ____nameddecl____1':'class ____nameddecl____1' functional cast to class ____nameddecl____1 <ConstructorConversion>
    (CXXConstructExpr 0x93d4790 'class ____nameddecl____1':'class ____nameddecl____1''void (const class ____nameddecl____1 &) throw()' elidable
      (MaterializeTemporaryExpr 0x93d4700 'const class ____nameddecl____1' lvalue
        (ImplicitCastExpr 0x93d46f0 'const class ____nameddecl____1' <NoOp>
          (CXXConstructExpr 0x93d3748 'class ____nameddecl____1':'class ____nameddecl____1''void (void) throw()'))))))
class ____nameddecl____1();
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CXXFunctionalCastExpr ( 155011168 -> p 155011672 )
(CXXFunctionalCastExpr 0x93d4860 'class ____nameddecl____1':'class ____nameddecl____1' functional cast to class ____nameddecl____1 <ConstructorConversion>
  (CXXConstructExpr 0x93d4790 'class ____nameddecl____1':'class ____nameddecl____1''void (const class ____nameddecl____1 &) throw()' elidable
    (MaterializeTemporaryExpr 0x93d4700 'const class ____nameddecl____1' lvalue
      (ImplicitCastExpr 0x93d46f0 'const class ____nameddecl____1' <NoOp>
        (CXXConstructExpr 0x93d3748 'class ____nameddecl____1':'class ____nameddecl____1''void (void) throw()')))))
class ____nameddecl____1();
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CXXConstructExpr ( 155010960 -> p 155011168 )
(CXXConstructExpr 0x93d4790 'class ____nameddecl____1':'class ____nameddecl____1''void (const class ____nameddecl____1 &) throw()' elidable
  (MaterializeTemporaryExpr 0x93d4700 'const class ____nameddecl____1' lvalue
    (ImplicitCastExpr 0x93d46f0 'const class ____nameddecl____1' <NoOp>
      (CXXConstructExpr 0x93d3748 'class ____nameddecl____1':'class ____nameddecl____1''void (void) throw()'))))
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt MaterializeTemporaryExpr ( 155010816 -> p 155010960 )
(MaterializeTemporaryExpr 0x93d4700 'const class ____nameddecl____1' lvalue
  (ImplicitCastExpr 0x93d46f0 'const class ____nameddecl____1' <NoOp>
    (CXXConstructExpr 0x93d3748 'class ____nameddecl____1':'class ____nameddecl____1''void (void) throw()')))
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt ImplicitCastExpr ( 155010800 -> p 155010816 )
(ImplicitCastExpr 0x93d46f0 'const class ____nameddecl____1' <NoOp>
  (CXXConstructExpr 0x93d3748 'class ____nameddecl____1':'class ____nameddecl____1''void (void) throw()'))
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt CXXConstructExpr ( 155006792 -> p 155010800 )
(CXXConstructExpr 0x93d3748 'class ____nameddecl____1':'class ____nameddecl____1''void (void) throw()')
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt ReturnStmt ( 155006880 -> p 155006896 )
(ReturnStmt 0x93d37a0
  (IntegerLiteral 0x93d3788 'int' 0))
return 0;
;
[DEBUG][alg/SimplePrinterConsumer.cpp - line 13] Stmt IntegerLiteral ( 155006856 -> p 155006880 )
(IntegerLiteral 0x93d3788 'int' 0)
0;
[0;1;33m
 [B2 (ENTRY)]
[0m[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B1]
[0m   1: B ____nameddecl____0;
   2: class ____nameddecl____1 ____nameddecl____2;
   3:  (CXXConstructExpr, class B)
   4: [B1.3] (CXXConstructExpr, class B)
   5: ____nameddecl____0 = B([B1.4]) (OperatorCall)
   6: ____nameddecl____0 (CXXConstructExpr, class B)
   7: ____nameddecl____0.func([B1.6])
   8:  (CXXConstructExpr, class ____nameddecl____1)
   9: [B1.8] (CXXConstructExpr, class ____nameddecl____1)
  10: ____nameddecl____2 = class ____nameddecl____1([B1.9]) (OperatorCall)
  11: return 0;
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B0[0m
[0;1;33m
 [B0 (EXIT)]
[0m[0;34m   Preds [0m(1):[0;34m B1[0m

Writing '/tmp/llvm_CMS1ZU/CFG.dot'...  done. 
[DEBUG][alg/SimplePrinter.cpp - line 24] alg finished.
[DEBUG][ResourceManager.cpp - line 98] src _class.cpp not changed.
[DEBUG][ResourceManager.cpp - line 136] Open desfile @_class.cpp
done2
