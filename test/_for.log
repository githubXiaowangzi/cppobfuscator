done1
[DEBUG][res/OptionTable.cpp - line 8] argc = 2
[DEBUG][res/OptionTable.cpp - line 38] non-option argvs caught: [_for.cpp]
ignoring nonexistent directory "/usr/include/c++/4.6/i486-linux-gnu"
#include "..." search starts here:
#include <...> search starts here:
 /usr/local/lib/clang/3.3/include
 /usr/local/include
 /usr/include
 /usr/include/linux
 /usr/include/c++/4.6
 /usr/include/c++/4.6/i686-linux-gnu
 /usr/include/c++/4.6/backward
 /usr/include/i386-linux-gnu
End of search list.
_for.cpp:5:27: warning: '&&' within '||'
    for(int i = 0; i < 13 && i > -1 || i < 14; i++){
                   ~~~~~~~^~~~~~~~~ ~~
_for.cpp:5:27: note: place parentheses around the '&&' expression to silence this warning
    for(int i = 0; i < 13 && i > -1 || i < 14; i++){
                          ^
                   (               )
_for.cpp:18:20: warning: expression result unused
        } else if (i, i+1, i-1, i-3) {
                   ^
_for.cpp:18:24: warning: expression result unused
        } else if (i, i+1, i-1, i-3) {
                      ~^~
_for.cpp:18:29: warning: expression result unused
        } else if (i, i+1, i-1, i-3) {
                           ~^~
[DEBUG][alg/InitParseConsumer.h - line 30] +decl, size = 1
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 99529d0 | Ctx 99526f4 -> p 99526e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 9952a00 | Ctx 99526f4 -> p 99526e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 99af870 | Ctx 99526f4 -> p 99526e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 48] enter FuncDecl
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 9] START VarRenamer
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af870 (Function)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: Function
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af7b0 (ParmVar)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: ParmVar
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 30]  ---- name = argc | type = int | desugared type = int | const = 0 | extern = 0 | POD = 1
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af7b0 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af7f0 (ParmVar)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: ParmVar
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 30]  ---- name = argv | type = char ** | desugared type = char ** | const = 0 | extern = 0 | POD = 1
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af7f0 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1920 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b18d0 (ForStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af938 (DeclStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af8f0 (Var)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: Var
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 30]  ---- name = i | type = int | desugared type = int | const = 0 | extern = 0 | POD = 1
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af920 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af920 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af8f0 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af938 (DeclStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa80 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af978 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af948 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af948 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af978 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af960 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af960 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9e8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9a0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9a0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9e8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9b8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9b8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa58 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa28 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa28 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa58 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa40 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa40 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa80 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afab0 (UnaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa98 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa98 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afab0 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b18b8 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc60 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc20 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afae0 (UnaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afac4 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afac4 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afae0 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc10 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afbd0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb28 (UnaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afaf4 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afaf4 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb28 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afbc0 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb88 (UnaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb3c (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb3c (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb88 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afbc0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afbd0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc10 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc20 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc60 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1898 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcb0 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afca0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc70 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc70 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afca0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc88 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc88 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcb0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcd0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcc8 (BreakStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcc8 (BreakStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcd0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1878 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1678 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1660 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afce4 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afce4 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd30 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcfc (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcfc (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd30 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd18 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd18 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afda0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd70 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd70 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afda0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd88 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd88 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afe10 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afde0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afde0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afe10 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afdf8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afdf8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1660 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1678 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16e0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16b8 (CompoundAssignOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1684 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1684 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16a0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16a0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16b8 (CompoundAssignOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16d8 (ContinueStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16d8 (ContinueStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16e0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1860 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b17f8 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16f8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16f8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1740 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1710 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1710 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1740 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1728 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1728 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1768 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1768 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1798 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1798 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b17c8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b17c8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b17f8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1840 (CompoundAssignOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1810 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1810 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1828 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1828 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1840 (CompoundAssignOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1860 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1878 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1898 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b18b8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b18d0 (ForStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1910 (ReturnStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b18f8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b18f8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1910 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1920 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af870 (Function)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 11] END VarRenamer
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 6] START StmtPretransformer
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af870 (Function)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 99af870(Function) Ctx 99526f4
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af7b0 (ParmVar)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 99af7b0(ParmVar) Ctx 99af894
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af7b0 (ParmVar)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af7f0 (ParmVar)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 99af7f0(ParmVar) Ctx 99af894
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af7f0 (ParmVar)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1920 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 99b1920 994d448 994d448
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b18d0 (ForStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ForStmt 99b18d0 99915c8 99915c8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af938 (DeclStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclStmt 99af938 9934078 9934078
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af8f0 (Var)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 99af8f0(Var) Ctx 99af894
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af920 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99af920 9934088 9934088
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af920 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99af920 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af8f0 (Var)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af938 (DeclStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclStmt, start transform
DeclStmt 0x99af938
`-VarDecl 0x99af8f0 ____localvar____2 'int'
  `-IntegerLiteral 0x99af920 'int' 0
int ____localvar____2 = 0;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa80 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99afa80 9934a70 9934a70
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99afa10 9934a80 9934a80
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99af988 9934a90 9934a90
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af978 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 99af978 99843c8 99843c8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af948 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99af948 99843d8 99843d8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af948 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af978 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
`-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af960 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99af960 9984400 9984400
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af960 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99af960 'int' 13
13[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99af9f8 996c318 996c318
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9e8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 99af9e8 996c328 996c328
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9a0 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99af9a0 996c338 996c338
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9a0 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9e8 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
`-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt UnaryOperator 99af9d0 996c348 996c348
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9b8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99af9b8 996c358 996c358
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9b8 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99af9b8 'int' 1
1[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99afa68 9934420 9934420
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa58 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 99afa58 9934430 9934430
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa28 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99afa28 9934440 9934440
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa28 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa58 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
`-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa40 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99afa40 9934450 9934450
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa40 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99afa40 'int' 14
14[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa80 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x99afa80 '_Bool' '||'
|-BinaryOperator 0x99afa10 '_Bool' '&&'
| |-BinaryOperator 0x99af988 '_Bool' '<'
| | |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | `-IntegerLiteral 0x99af960 'int' 13
| `-BinaryOperator 0x99af9f8 '_Bool' '>'
|   |-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   `-UnaryOperator 0x99af9d0 'int' prefix '-'
|     `-IntegerLiteral 0x99af9b8 'int' 1
`-BinaryOperator 0x99afa68 '_Bool' '<'
  |-ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
  | `-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-IntegerLiteral 0x99afa40 'int' 14
____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afab0 (UnaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt UnaryOperator 99afab0 9934460 9934460
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa98 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99afa98 9934470 9934470
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa98 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afab0 (UnaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt UnaryOperator, start transform
UnaryOperator 0x99afab0 'int' postfix '++'
`-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2++[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b18b8 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 99b18b8 9934660 9934660
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc60 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt LabelStmt 99afc60 9934670 9934670
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc20 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 99afc20 9934680 9934680
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afae0 (UnaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt UnaryOperator 99afae0 9934690 9934690
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afac4 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99afac4 99346a0 99346a0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afac4 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afae0 (UnaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt UnaryOperator, start transform
UnaryOperator 0x99afae0 'int' lvalue prefix '--'
`-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
--____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc10 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt LabelStmt 99afc10 99346b0 99346b0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afbd0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 99afbd0 99346c0 99346c0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb28 (UnaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt UnaryOperator 99afb28 9963f90 9963f90
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt UnaryOperator 99afb10 9963fa0 9963fa0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afaf4 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99afaf4 9963fb0 9963fb0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afaf4 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb28 (UnaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt UnaryOperator, start transform
UnaryOperator 0x99afb28 'int' lvalue prefix '--'
`-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
  `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
----____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afbc0 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt LabelStmt 99afbc0 9963fc0 9963fc0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb88 (UnaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt UnaryOperator 99afb88 9963fd0 9963fd0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt UnaryOperator 99afb70 9963fe0 9963fe0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt UnaryOperator 99afb58 9963ff0 9963ff0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb3c (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99afb3c 9964000 9964000
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb3c (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb88 (UnaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt UnaryOperator, start transform
UnaryOperator 0x99afb88 'int' lvalue prefix '++'
`-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
  `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
    `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
++++++____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afbc0 (LabelStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt LabelStmt, start transform
LabelStmt 0x99afbc0 'LABEL2'
`-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
  `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
    `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
      `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
LABEL2:
++++++____localvar____2;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afbd0 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x99afbd0
|-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
| `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
|   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-LabelStmt 0x99afbc0 'LABEL2'
  `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
    `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
      `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
        `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
{
    ----____localvar____2;
  LABEL2:
    ++++++____localvar____2;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc10 (LabelStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt LabelStmt, start transform
LabelStmt 0x99afc10 'LABEL1'
`-CompoundStmt 0x99afbd0
  |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
  | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
  |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-LabelStmt 0x99afbc0 'LABEL2'
    `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
      `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
        `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
          `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
LABEL1:
{
    ----____localvar____2;
  LABEL2:
    ++++++____localvar____2;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc20 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x99afc20
|-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
| `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-LabelStmt 0x99afc10 'LABEL1'
  `-CompoundStmt 0x99afbd0
    |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
    | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
    |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    `-LabelStmt 0x99afbc0 'LABEL2'
      `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
        `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
          `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
            `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
{
    --____localvar____2;
  LABEL1:
    {
        ----____localvar____2;
      LABEL2:
        ++++++____localvar____2;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc60 (LabelStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt LabelStmt, start transform
LabelStmt 0x99afc60 'LABEL0'
`-CompoundStmt 0x99afc20
  |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
  | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-LabelStmt 0x99afc10 'LABEL1'
    `-CompoundStmt 0x99afbd0
      |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
      | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
      |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      `-LabelStmt 0x99afbc0 'LABEL2'
        `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
          `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
            `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
              `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
LABEL0:
{
    --____localvar____2;
  LABEL1:
    {
        ----____localvar____2;
      LABEL2:
        ++++++____localvar____2;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1898 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IfStmt 99b1898 9933f78 9933f78
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcb0 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99afcb0 9933f88 9933f88
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afca0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 99afca0 9933f98 9933f98
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc70 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99afc70 9933fa8 9933fa8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc70 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afca0 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
`-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc88 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99afc88 9933fb8 9933fb8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc88 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99afc88 'int' 9
9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcb0 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x99afcb0 '_Bool' '>'
|-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
| `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99afc88 'int' 9
____localvar____2 > 9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcd0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 99afcd0 9933fc8 9933fc8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcc8 (BreakStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BreakStmt 99afcc8 9933fd8 9933fd8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcc8 (BreakStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BreakStmt, start transform
BreakStmt 0x99afcc8
break;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcd0 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x99afcd0
`-BreakStmt 0x99afcc8
{
    break;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1878 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IfStmt 99b1878 9933fe8 9933fe8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1678 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 99b1678 9933ff8 9933ff8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1660 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99b1660 99340d8 99340d8
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99afdc8 99340e8 99340e8
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99afd58 99340f8 99340f8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afce4 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99afce4 99843e8 99843e8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afce4 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99afd40 997f320 997f320
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd30 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 99afd30 997f330 997f330
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcfc (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99afcfc 99344d8 99344d8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcfc (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd30 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
`-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd18 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99afd18 99344e8 99344e8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd18 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99afd18 'int' 1
1[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99afdb0 994d320 994d320
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afda0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 99afda0 9934108 9934108
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd70 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99afd70 9934118 9934118
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd70 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afda0 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
`-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd88 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99afd88 9934128 9934128
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd88 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99afd88 'int' 1
1[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99b1648 9934138 9934138
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afe10 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 99afe10 9934148 9934148
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afde0 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99afde0 9934158 9934158
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afde0 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afe10 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
`-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afdf8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99afdf8 998d4f0 998d4f0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afdf8 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99afdf8 'int' 3
3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1660 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x99b1660 'int' ','
|-BinaryOperator 0x99afdc8 'int' ','
| |-BinaryOperator 0x99afd58 'int' ','
| | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | `-BinaryOperator 0x99afd40 'int' '+'
| |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
| |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |   `-IntegerLiteral 0x99afd18 'int' 1
| `-BinaryOperator 0x99afdb0 'int' '-'
|   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   `-IntegerLiteral 0x99afd88 'int' 1
`-BinaryOperator 0x99b1648 'int' '-'
  |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
  | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-IntegerLiteral 0x99afdf8 'int' 3
____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1678 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
`-BinaryOperator 0x99b1660 'int' ','
  |-BinaryOperator 0x99afdc8 'int' ','
  | |-BinaryOperator 0x99afd58 'int' ','
  | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | | `-BinaryOperator 0x99afd40 'int' '+'
  | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
  | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |   `-IntegerLiteral 0x99afd18 'int' 1
  | `-BinaryOperator 0x99afdb0 'int' '-'
  |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
  |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   `-IntegerLiteral 0x99afd88 'int' 1
  `-BinaryOperator 0x99b1648 'int' '-'
    |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
    | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    `-IntegerLiteral 0x99afdf8 'int' 3
____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16e0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 99b16e0 998d500 998d500
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16b8 (CompoundAssignOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundAssignOperator 99b16b8 998d510 998d510
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1684 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99b1684 998d520 998d520
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1684 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16a0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99b16a0 998d530 998d530
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16a0 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99b16a0 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16b8 (CompoundAssignOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundAssignOperator, start transform
CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99b16a0 'int' 2
____localvar____2 += 2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16d8 (ContinueStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ContinueStmt 99b16d8 998d540 998d540
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16d8 (ContinueStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ContinueStmt, start transform
ContinueStmt 0x99b16d8
continue;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16e0 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x99b16e0
|-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
| |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| `-IntegerLiteral 0x99b16a0 'int' 2
`-ContinueStmt 0x99b16d8
{
    ____localvar____2 += 2;
    continue;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1860 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 99b1860 997c488 997c488
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b17f8 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99b17f8 997c498 997c498
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16f8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99b16f8 99340a8 99340a8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16f8 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99b17e0 99340b8 99340b8
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99b17b0 998d550 998d550
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99b1780 998d560 998d560
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 99b1750 998d570 998d570
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1740 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 99b1740 998d580 998d580
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1710 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99b1710 998d590 998d590
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1710 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1740 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
`-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1728 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99b1728 998d5a0 998d5a0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1728 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99b1728 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1768 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99b1768 998d5b0 998d5b0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1768 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99b1768 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1798 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99b1798 998d5c0 998d5c0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1798 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99b1798 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b17c8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99b17c8 9965518 9965518
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b17c8 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99b17c8 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b17f8 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x99b17f8 'int' lvalue '='
|-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-BinaryOperator 0x99b17e0 'int' '-'
  |-BinaryOperator 0x99b17b0 'int' '+'
  | |-BinaryOperator 0x99b1780 'int' '-'
  | | |-BinaryOperator 0x99b1750 'int' '+'
  | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
  | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | | | `-IntegerLiteral 0x99b1728 'int' 1
  | | `-IntegerLiteral 0x99b1768 'int' 1
  | `-IntegerLiteral 0x99b1798 'int' 1
  `-IntegerLiteral 0x99b17c8 'int' 1
____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1840 (CompoundAssignOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundAssignOperator 99b1840 9965528 9965528
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1810 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 99b1810 9965538 9965538
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1810 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1828 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99b1828 9965548 9965548
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1828 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99b1828 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1840 (CompoundAssignOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundAssignOperator, start transform
CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99b1828 'int' 1
____localvar____2 *= 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1860 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x99b1860
|-BinaryOperator 0x99b17f8 'int' lvalue '='
| |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| `-BinaryOperator 0x99b17e0 'int' '-'
|   |-BinaryOperator 0x99b17b0 'int' '+'
|   | |-BinaryOperator 0x99b1780 'int' '-'
|   | | |-BinaryOperator 0x99b1750 'int' '+'
|   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   | | | `-IntegerLiteral 0x99b1728 'int' 1
|   | | `-IntegerLiteral 0x99b1768 'int' 1
|   | `-IntegerLiteral 0x99b1798 'int' 1
|   `-IntegerLiteral 0x99b17c8 'int' 1
`-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
  |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-IntegerLiteral 0x99b1828 'int' 1
{
    ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
    ____localvar____2 *= 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1878 (IfStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IfStmt, start transform
IfStmt 0x99b1878
|-<<<NULL>>>
|-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
| `-BinaryOperator 0x99b1660 'int' ','
|   |-BinaryOperator 0x99afdc8 'int' ','
|   | |-BinaryOperator 0x99afd58 'int' ','
|   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   | | `-BinaryOperator 0x99afd40 'int' '+'
|   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   | |   `-IntegerLiteral 0x99afd18 'int' 1
|   | `-BinaryOperator 0x99afdb0 'int' '-'
|   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |   `-IntegerLiteral 0x99afd88 'int' 1
|   `-BinaryOperator 0x99b1648 'int' '-'
|     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     `-IntegerLiteral 0x99afdf8 'int' 3
|-CompoundStmt 0x99b16e0
| |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
| | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | `-IntegerLiteral 0x99b16a0 'int' 2
| `-ContinueStmt 0x99b16d8
`-CompoundStmt 0x99b1860
  |-BinaryOperator 0x99b17f8 'int' lvalue '='
  | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | `-BinaryOperator 0x99b17e0 'int' '-'
  |   |-BinaryOperator 0x99b17b0 'int' '+'
  |   | |-BinaryOperator 0x99b1780 'int' '-'
  |   | | |-BinaryOperator 0x99b1750 'int' '+'
  |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
  |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   | | | `-IntegerLiteral 0x99b1728 'int' 1
  |   | | `-IntegerLiteral 0x99b1768 'int' 1
  |   | `-IntegerLiteral 0x99b1798 'int' 1
  |   `-IntegerLiteral 0x99b17c8 'int' 1
  `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
    |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    `-IntegerLiteral 0x99b1828 'int' 1
if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
    ____localvar____2 += 2;
    continue;
} else {
    ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
    ____localvar____2 *= 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1898 (IfStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IfStmt, start transform
IfStmt 0x99b1898
|-<<<NULL>>>
|-BinaryOperator 0x99afcb0 '_Bool' '>'
| |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
| | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| `-IntegerLiteral 0x99afc88 'int' 9
|-CompoundStmt 0x99afcd0
| `-BreakStmt 0x99afcc8
`-IfStmt 0x99b1878
  |-<<<NULL>>>
  |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
  | `-BinaryOperator 0x99b1660 'int' ','
  |   |-BinaryOperator 0x99afdc8 'int' ','
  |   | |-BinaryOperator 0x99afd58 'int' ','
  |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   | | `-BinaryOperator 0x99afd40 'int' '+'
  |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
  |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   | |   `-IntegerLiteral 0x99afd18 'int' 1
  |   | `-BinaryOperator 0x99afdb0 'int' '-'
  |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
  |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |   `-IntegerLiteral 0x99afd88 'int' 1
  |   `-BinaryOperator 0x99b1648 'int' '-'
  |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
  |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     `-IntegerLiteral 0x99afdf8 'int' 3
  |-CompoundStmt 0x99b16e0
  | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
  | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | | `-IntegerLiteral 0x99b16a0 'int' 2
  | `-ContinueStmt 0x99b16d8
  `-CompoundStmt 0x99b1860
    |-BinaryOperator 0x99b17f8 'int' lvalue '='
    | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | `-BinaryOperator 0x99b17e0 'int' '-'
    |   |-BinaryOperator 0x99b17b0 'int' '+'
    |   | |-BinaryOperator 0x99b1780 'int' '-'
    |   | | |-BinaryOperator 0x99b1750 'int' '+'
    |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |   | | | `-IntegerLiteral 0x99b1728 'int' 1
    |   | | `-IntegerLiteral 0x99b1768 'int' 1
    |   | `-IntegerLiteral 0x99b1798 'int' 1
    |   `-IntegerLiteral 0x99b17c8 'int' 1
    `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
      |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      `-IntegerLiteral 0x99b1828 'int' 1
if (____localvar____2 > 9) {
    break;
} else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
    ____localvar____2 += 2;
    continue;
} else {
    ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
    ____localvar____2 *= 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b18b8 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x99b18b8
|-LabelStmt 0x99afc60 'LABEL0'
| `-CompoundStmt 0x99afc20
|   |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
|   | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   `-LabelStmt 0x99afc10 'LABEL1'
|     `-CompoundStmt 0x99afbd0
|       |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
|       | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
|       |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|       `-LabelStmt 0x99afbc0 'LABEL2'
|         `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
|           `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
|             `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
|               `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IfStmt 0x99b1898
  |-<<<NULL>>>
  |-BinaryOperator 0x99afcb0 '_Bool' '>'
  | |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | `-IntegerLiteral 0x99afc88 'int' 9
  |-CompoundStmt 0x99afcd0
  | `-BreakStmt 0x99afcc8
  `-IfStmt 0x99b1878
    |-<<<NULL>>>
    |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
    | `-BinaryOperator 0x99b1660 'int' ','
    |   |-BinaryOperator 0x99afdc8 'int' ','
    |   | |-BinaryOperator 0x99afd58 'int' ','
    |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |   | | `-BinaryOperator 0x99afd40 'int' '+'
    |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |   | |   `-IntegerLiteral 0x99afd18 'int' 1
    |   | `-BinaryOperator 0x99afdb0 'int' '-'
    |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |   |   `-IntegerLiteral 0x99afd88 'int' 1
    |   `-BinaryOperator 0x99b1648 'int' '-'
    |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |     `-IntegerLiteral 0x99afdf8 'int' 3
    |-CompoundStmt 0x99b16e0
    | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | | `-IntegerLiteral 0x99b16a0 'int' 2
    | `-ContinueStmt 0x99b16d8
    `-CompoundStmt 0x99b1860
      |-BinaryOperator 0x99b17f8 'int' lvalue '='
      | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      | `-BinaryOperator 0x99b17e0 'int' '-'
      |   |-BinaryOperator 0x99b17b0 'int' '+'
      |   | |-BinaryOperator 0x99b1780 'int' '-'
      |   | | |-BinaryOperator 0x99b1750 'int' '+'
      |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
      |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      |   | | | `-IntegerLiteral 0x99b1728 'int' 1
      |   | | `-IntegerLiteral 0x99b1768 'int' 1
      |   | `-IntegerLiteral 0x99b1798 'int' 1
      |   `-IntegerLiteral 0x99b17c8 'int' 1
      `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
        |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
        `-IntegerLiteral 0x99b1828 'int' 1
{
  LABEL0:
    {
        --____localvar____2;
      LABEL1:
        {
            ----____localvar____2;
          LABEL2:
            ++++++____localvar____2;
        }
    }
    if (____localvar____2 > 9) {
        break;
    } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
        ____localvar____2 += 2;
        continue;
    } else {
        ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
        ____localvar____2 *= 1;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b18d0 (ForStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ForStmt, start transform
ForStmt 0x99b18d0
|-DeclStmt 0x99af938
| `-VarDecl 0x99af8f0 ____localvar____2 'int'
|   `-IntegerLiteral 0x99af920 'int' 0
|-<<<NULL>>>
|-BinaryOperator 0x99afa80 '_Bool' '||'
| |-BinaryOperator 0x99afa10 '_Bool' '&&'
| | |-BinaryOperator 0x99af988 '_Bool' '<'
| | | |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
| | | | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | | `-IntegerLiteral 0x99af960 'int' 13
| | `-BinaryOperator 0x99af9f8 '_Bool' '>'
| |   |-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
| |   | `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |   `-UnaryOperator 0x99af9d0 'int' prefix '-'
| |     `-IntegerLiteral 0x99af9b8 'int' 1
| `-BinaryOperator 0x99afa68 '_Bool' '<'
|   |-ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   `-IntegerLiteral 0x99afa40 'int' 14
|-UnaryOperator 0x99afab0 'int' postfix '++'
| `-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-CompoundStmt 0x99b18b8
  |-LabelStmt 0x99afc60 'LABEL0'
  | `-CompoundStmt 0x99afc20
  |   |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
  |   | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   `-LabelStmt 0x99afc10 'LABEL1'
  |     `-CompoundStmt 0x99afbd0
  |       |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
  |       | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
  |       |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |       `-LabelStmt 0x99afbc0 'LABEL2'
  |         `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
  |           `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
  |             `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
  |               `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-IfStmt 0x99b1898
    |-<<<NULL>>>
    |-BinaryOperator 0x99afcb0 '_Bool' '>'
    | |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | `-IntegerLiteral 0x99afc88 'int' 9
    |-CompoundStmt 0x99afcd0
    | `-BreakStmt 0x99afcc8
    `-IfStmt 0x99b1878
      |-<<<NULL>>>
      |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
      | `-BinaryOperator 0x99b1660 'int' ','
      |   |-BinaryOperator 0x99afdc8 'int' ','
      |   | |-BinaryOperator 0x99afd58 'int' ','
      |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      |   | | `-BinaryOperator 0x99afd40 'int' '+'
      |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
      |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      |   | |   `-IntegerLiteral 0x99afd18 'int' 1
      |   | `-BinaryOperator 0x99afdb0 'int' '-'
      |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
      |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      |   |   `-IntegerLiteral 0x99afd88 'int' 1
      |   `-BinaryOperator 0x99b1648 'int' '-'
      |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
      |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      |     `-IntegerLiteral 0x99afdf8 'int' 3
      |-CompoundStmt 0x99b16e0
      | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
      | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      | | `-IntegerLiteral 0x99b16a0 'int' 2
      | `-ContinueStmt 0x99b16d8
      `-CompoundStmt 0x99b1860
        |-BinaryOperator 0x99b17f8 'int' lvalue '='
        | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
        | `-BinaryOperator 0x99b17e0 'int' '-'
        |   |-BinaryOperator 0x99b17b0 'int' '+'
        |   | |-BinaryOperator 0x99b1780 'int' '-'
        |   | | |-BinaryOperator 0x99b1750 'int' '+'
        |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
        |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
        |   | | | `-IntegerLiteral 0x99b1728 'int' 1
        |   | | `-IntegerLiteral 0x99b1768 'int' 1
        |   | `-IntegerLiteral 0x99b1798 'int' 1
        |   `-IntegerLiteral 0x99b17c8 'int' 1
        `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
          |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
          `-IntegerLiteral 0x99b1828 'int' 1
for (int ____localvar____2 = 0; ____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14; ____localvar____2++) {
  LABEL0:
    {
        --____localvar____2;
      LABEL1:
        {
            ----____localvar____2;
          LABEL2:
            ++++++____localvar____2;
        }
    }
    if (____localvar____2 > 9) {
        break;
    } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
        ____localvar____2 += 2;
        continue;
    } else {
        ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
        ____localvar____2 *= 1;
    }
}
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 247] for to if trans
[DEBUG][alg/Algorithm.cpp - line 36] info 161154824: ____label____0 0
[DEBUG][alg/Algorithm.cpp - line 36] info 161154860: ____label____1 0
[DEBUG][alg/Algorithm.cpp - line 36] info 161154896: ____label____2 0
[DEBUG][alg/Algorithm.cpp - line 36] info 161154932: ____label____3 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99b1828 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99b1810 bfdfeef4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt CompoundAssignOperator (bfdff38c) 99b1840 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99b17c8 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99b1798 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99b1768 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99b1728 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99b1710 bfdfee54 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ImplicitCastExpr (bfdff38c) 99b1740 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99b1750 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99b1780 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99b17b0 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99b17e0 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99b16f8 bfdfeef4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99b17f8 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt CompoundStmt (bfdff38c) 99b1860 bfdff284 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ContinueStmt (bfdff38c) 99b16d8 bfdff1e4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99b16a0 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99b1684 bfdfeef4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt CompoundAssignOperator (bfdff38c) 99b16b8 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt CompoundStmt (bfdff38c) 99b16e0 bfdff284 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99afdf8 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99afde0 bfdfee54 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ImplicitCastExpr (bfdff38c) 99afe10 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99b1648 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99afd88 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99afd70 bfdfee54 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ImplicitCastExpr (bfdff38c) 99afda0 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99afdb0 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99afd18 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99afcfc bfdfee54 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ImplicitCastExpr (bfdff38c) 99afd30 bfdfef84 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99afd40 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99afce4 bfdfeef4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99afd58 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99afdc8 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99b1660 bfdfefd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ImplicitCastExpr (bfdff38c) 99b1678 bfdff284 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IfStmt (bfdff38c) 99b1878 bfdff324 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BreakStmt (bfdff38c) 99afcc8 bfdff284 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt CompoundStmt (bfdff38c) 99afcd0 bfdff324 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99afc88 bfdff0c4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99afc70 bfdfef94 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ImplicitCastExpr (bfdff38c) 99afca0 bfdff0c4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99afcb0 bfdff114 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IfStmt (bfdff38c) 99b1898 bfdff3c4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99afb3c bfdfedb4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt UnaryOperator (bfdff38c) 99afb58 bfdfee94 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt UnaryOperator (bfdff38c) 99afb70 bfdfee94 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt UnaryOperator (bfdff38c) 99afb88 bfdfee94 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt LabelStmt (bfdff38c) 99afbc0 bfdff144 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99afaf4 bfdfee54 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt UnaryOperator (bfdff38c) 99afb10 bfdfef34 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt UnaryOperator (bfdff38c) 99afb28 bfdfef34 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt CompoundStmt (bfdff38c) 99afbd0 bfdff1e4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt LabelStmt (bfdff38c) 99afc10 bfdff284 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99afac4 bfdfef94 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt UnaryOperator (bfdff38c) 99afae0 bfdff074 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt CompoundStmt (bfdff38c) 99afc20 bfdff324 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt LabelStmt (bfdff38c) 99afc60 bfdff3c4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt CompoundStmt (bfdff38c) 99b18b8 bfdff464 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99afa98 bfdff174 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt UnaryOperator (bfdff38c) 99afab0 bfdff254 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99afa40 bfdff204 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99afa28 bfdff0d4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ImplicitCastExpr (bfdff38c) 99afa58 bfdff204 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99afa68 bfdff254 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99af9b8 bfdff204 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt UnaryOperator (bfdff38c) 99af9d0 bfdff254 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99af9a0 bfdff0d4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ImplicitCastExpr (bfdff38c) 99af9e8 bfdff204 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99af9f8 bfdff254 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99af960 bfdff204 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfdff38c) 99af948 bfdff0d4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ImplicitCastExpr (bfdff38c) 99af978 bfdff204 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99af988 bfdff254 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99afa10 bfdff254 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfdff38c) 99afa80 bfdff254 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfdff38c) 99af920 bfdff304 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclStmt (bfdff38c) 99af938 bfdff464 0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1910 (ReturnStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ReturnStmt 99b1910 9934078 9934078
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b18f8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 99b18f8 9934088 9934088
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b18f8 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x99b18f8 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1910 (ReturnStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ReturnStmt, start transform
ReturnStmt 0x99b1910
`-IntegerLiteral 0x99b18f8 'int' 0
return 0;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1920 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x99b1920
|-LabelStmt 0x99b1970 '____label____0'
| `-CompoundStmt 0x99b1ad8
|   |-DeclStmt 0x99af938
|   | `-VarDecl 0x99af8f0 ____localvar____2 'int'
|   |   `-IntegerLiteral 0x99af920 'int' 0
|   |-LabelStmt 0x99b19b0 '____label____1'
|   | `-CompoundStmt 0x99b1ac0
|   |   `-IfStmt 0x99b1aa0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x99afa80 '_Bool' '||'
|   |     | |-BinaryOperator 0x99afa10 '_Bool' '&&'
|   |     | | |-BinaryOperator 0x99af988 '_Bool' '<'
|   |     | | | |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
|   |     | | | | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | | | `-IntegerLiteral 0x99af960 'int' 13
|   |     | | `-BinaryOperator 0x99af9f8 '_Bool' '>'
|   |     | |   |-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |   `-UnaryOperator 0x99af9d0 'int' prefix '-'
|   |     | |     `-IntegerLiteral 0x99af9b8 'int' 1
|   |     | `-BinaryOperator 0x99afa68 '_Bool' '<'
|   |     |   |-ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     |   `-IntegerLiteral 0x99afa40 'int' 14
|   |     |-CompoundStmt 0x99b1a88
|   |     | |-CompoundStmt 0x99b18b8
|   |     | | |-LabelStmt 0x99afc60 'LABEL0'
|   |     | | | `-CompoundStmt 0x99afc20
|   |     | | |   |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
|   |     | | |   | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | | |   `-LabelStmt 0x99afc10 'LABEL1'
|   |     | | |     `-CompoundStmt 0x99afbd0
|   |     | | |       |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
|   |     | | |       | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
|   |     | | |       |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | | |       `-LabelStmt 0x99afbc0 'LABEL2'
|   |     | | |         `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
|   |     | | |           `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
|   |     | | |             `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
|   |     | | |               `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | | `-IfStmt 0x99b1898
|   |     | |   |-<<<NULL>>>
|   |     | |   |-BinaryOperator 0x99afcb0 '_Bool' '>'
|   |     | |   | |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
|   |     | |   | | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |   | `-IntegerLiteral 0x99afc88 'int' 9
|   |     | |   |-CompoundStmt 0x99afcd0
|   |     | |   | `-GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
|   |     | |   `-IfStmt 0x99b1878
|   |     | |     |-<<<NULL>>>
|   |     | |     |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
|   |     | |     | `-BinaryOperator 0x99b1660 'int' ','
|   |     | |     |   |-BinaryOperator 0x99afdc8 'int' ','
|   |     | |     |   | |-BinaryOperator 0x99afd58 'int' ','
|   |     | |     |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |     |   | | `-BinaryOperator 0x99afd40 'int' '+'
|   |     | |     |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
|   |     | |     |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |     |   | |   `-IntegerLiteral 0x99afd18 'int' 1
|   |     | |     |   | `-BinaryOperator 0x99afdb0 'int' '-'
|   |     | |     |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
|   |     | |     |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |     |   |   `-IntegerLiteral 0x99afd88 'int' 1
|   |     | |     |   `-BinaryOperator 0x99b1648 'int' '-'
|   |     | |     |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
|   |     | |     |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |     |     `-IntegerLiteral 0x99afdf8 'int' 3
|   |     | |     |-CompoundStmt 0x99b16e0
|   |     | |     | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | |     | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |     | | `-IntegerLiteral 0x99b16a0 'int' 2
|   |     | |     | `-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
|   |     | |     `-CompoundStmt 0x99b1860
|   |     | |       |-BinaryOperator 0x99b17f8 'int' lvalue '='
|   |     | |       | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |       | `-BinaryOperator 0x99b17e0 'int' '-'
|   |     | |       |   |-BinaryOperator 0x99b17b0 'int' '+'
|   |     | |       |   | |-BinaryOperator 0x99b1780 'int' '-'
|   |     | |       |   | | |-BinaryOperator 0x99b1750 'int' '+'
|   |     | |       |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
|   |     | |       |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |       |   | | | `-IntegerLiteral 0x99b1728 'int' 1
|   |     | |       |   | | `-IntegerLiteral 0x99b1768 'int' 1
|   |     | |       |   | `-IntegerLiteral 0x99b1798 'int' 1
|   |     | |       |   `-IntegerLiteral 0x99b17c8 'int' 1
|   |     | |       `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | |         |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |         `-IntegerLiteral 0x99b1828 'int' 1
|   |     | `-LabelStmt 0x99b19f0 '____label____2'
|   |     |   `-CompoundStmt 0x99b1a70
|   |     |     |-UnaryOperator 0x99afab0 'int' postfix '++'
|   |     |     | `-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     |     `-GotoStmt 0x99b1a60 '____label____1' 0x99b1980
|   |     `-<<<NULL>>>
|   `-LabelStmt 0x99b1a30 '____label____3'
|     `-NullStmt 0x99b1a20
`-ReturnStmt 0x99b1910
  `-IntegerLiteral 0x99b18f8 'int' 0
{
  ____label____0:
    {
        int ____localvar____2 = 0;
      ____label____1:
        {
            if (____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14) {
                {
                  LABEL0:
                    {
                        --____localvar____2;
                      LABEL1:
                        {
                            ----____localvar____2;
                          LABEL2:
                            ++++++____localvar____2;
                        }
                    }
                    if (____localvar____2 > 9) {
                        goto ____label____3;
                    } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
                        ____localvar____2 += 2;
                        goto ____label____2;
                    } else {
                        ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
                        ____localvar____2 *= 1;
                    }
                }
              ____label____2:
                {
                    ____localvar____2++;
                    goto ____label____1;
                }
            }
        }
      ____label____3:
        ;
    }
    return 0;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af870 (Function)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 30] END StmtPretransformer
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 5] START LocalDeclMover
FunctionDecl 0x99af870 <_for.cpp:3:1, line:27:1> main 'int (int, char **)'
|-ParmVarDecl 0x99af7b0 <line:3:10, col:14> ____localvar____0 'int'
|-ParmVarDecl 0x99af7f0 <col:20, col:27> ____localvar____1 'char **'
`-CompoundStmt 0x99b1920 <line:4:1, line:27:1>
  |-LabelStmt 0x99b1970 <<invalid sloc>> '____label____0'
  | `-CompoundStmt 0x99b1ad8 <<invalid sloc>>
  |   |-DeclStmt 0x99af938 <line:5:9, col:18>
  |   | `-VarDecl 0x99af8f0 <col:9, col:17> ____localvar____2 'int'
  |   |   `-IntegerLiteral 0x99af920 <col:17> 'int' 0
  |   |-LabelStmt 0x99b19b0 <<invalid sloc>> '____label____1'
  |   | `-CompoundStmt 0x99b1ac0 <<invalid sloc>>
  |   |   `-IfStmt 0x99b1aa0 <<invalid sloc>>
  |   |     |-<<<NULL>>>
  |   |     |-BinaryOperator 0x99afa80 <col:20, col:44> '_Bool' '||'
  |   |     | |-BinaryOperator 0x99afa10 <col:20, col:35> '_Bool' '&&'
  |   |     | | |-BinaryOperator 0x99af988 <col:20, col:24> '_Bool' '<'
  |   |     | | | |-ImplicitCastExpr 0x99af978 <col:20> 'int' <LValueToRValue>
  |   |     | | | | `-DeclRefExpr 0x99af948 <col:20> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | | `-IntegerLiteral 0x99af960 <col:24> 'int' 13
  |   |     | | `-BinaryOperator 0x99af9f8 <col:30, col:35> '_Bool' '>'
  |   |     | |   |-ImplicitCastExpr 0x99af9e8 <col:30> 'int' <LValueToRValue>
  |   |     | |   | `-DeclRefExpr 0x99af9a0 <col:30> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |   `-UnaryOperator 0x99af9d0 <col:34, col:35> 'int' prefix '-'
  |   |     | |     `-IntegerLiteral 0x99af9b8 <col:35> 'int' 1
  |   |     | `-BinaryOperator 0x99afa68 <col:40, col:44> '_Bool' '<'
  |   |     |   |-ImplicitCastExpr 0x99afa58 <col:40> 'int' <LValueToRValue>
  |   |     |   | `-DeclRefExpr 0x99afa28 <col:40> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     |   `-IntegerLiteral 0x99afa40 <col:44> 'int' 14
  |   |     |-CompoundStmt 0x99b1a88 <<invalid sloc>>
  |   |     | |-CompoundStmt 0x99b18b8 <col:52, line:25:5>
  |   |     | | |-LabelStmt 0x99afc60 <line:6:1, line:15:9> 'LABEL0'
  |   |     | | | `-CompoundStmt 0x99afc20 <line:7:9, line:15:9>
  |   |     | | |   |-UnaryOperator 0x99afae0 <line:8:13, col:15> 'int' lvalue prefix '--'
  |   |     | | |   | `-DeclRefExpr 0x99afac4 <col:15> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | |   `-LabelStmt 0x99afc10 <line:9:1, line:14:13> 'LABEL1'
  |   |     | | |     `-CompoundStmt 0x99afbd0 <line:10:13, line:14:13>
  |   |     | | |       |-UnaryOperator 0x99afb28 <line:11:17, col:21> 'int' lvalue prefix '--'
  |   |     | | |       | `-UnaryOperator 0x99afb10 <col:19, col:21> 'int' lvalue prefix '--'
  |   |     | | |       |   `-DeclRefExpr 0x99afaf4 <col:21> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | |       `-LabelStmt 0x99afbc0 <line:12:1, line:13:23> 'LABEL2'
  |   |     | | |         `-UnaryOperator 0x99afb88 <col:17, col:23> 'int' lvalue prefix '++'
  |   |     | | |           `-UnaryOperator 0x99afb70 <col:19, col:23> 'int' lvalue prefix '++'
  |   |     | | |             `-UnaryOperator 0x99afb58 <col:21, col:23> 'int' lvalue prefix '++'
  |   |     | | |               `-DeclRefExpr 0x99afb3c <col:23> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | `-IfStmt 0x99b1898 <line:16:9, line:24:9>
  |   |     | |   |-<<<NULL>>>
  |   |     | |   |-BinaryOperator 0x99afcb0 <line:16:13, col:17> '_Bool' '>'
  |   |     | |   | |-ImplicitCastExpr 0x99afca0 <col:13> 'int' <LValueToRValue>
  |   |     | |   | | `-DeclRefExpr 0x99afc70 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |   | `-IntegerLiteral 0x99afc88 <col:17> 'int' 9
  |   |     | |   |-CompoundStmt 0x99afcd0 <col:20, line:18:9>
  |   |     | |   | `-GotoStmt 0x99b1a50 <<invalid sloc>> '____label____3' 0x99b1a00
  |   |     | |   `-IfStmt 0x99b1878 <col:16, line:24:9>
  |   |     | |     |-<<<NULL>>>
  |   |     | |     |-ImplicitCastExpr 0x99b1678 <line:18:20, col:35> '_Bool' <IntegralToBoolean>
  |   |     | |     | `-BinaryOperator 0x99b1660 <col:20, col:35> 'int' ','
  |   |     | |     |   |-BinaryOperator 0x99afdc8 <col:20, col:30> 'int' ','
  |   |     | |     |   | |-BinaryOperator 0x99afd58 <col:20, col:25> 'int' ','
  |   |     | |     |   | | |-DeclRefExpr 0x99afce4 <col:20> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |   | | `-BinaryOperator 0x99afd40 <col:23, col:25> 'int' '+'
  |   |     | |     |   | |   |-ImplicitCastExpr 0x99afd30 <col:23> 'int' <LValueToRValue>
  |   |     | |     |   | |   | `-DeclRefExpr 0x99afcfc <col:23> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |   | |   `-IntegerLiteral 0x99afd18 <col:25> 'int' 1
  |   |     | |     |   | `-BinaryOperator 0x99afdb0 <col:28, col:30> 'int' '-'
  |   |     | |     |   |   |-ImplicitCastExpr 0x99afda0 <col:28> 'int' <LValueToRValue>
  |   |     | |     |   |   | `-DeclRefExpr 0x99afd70 <col:28> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |   |   `-IntegerLiteral 0x99afd88 <col:30> 'int' 1
  |   |     | |     |   `-BinaryOperator 0x99b1648 <col:33, col:35> 'int' '-'
  |   |     | |     |     |-ImplicitCastExpr 0x99afe10 <col:33> 'int' <LValueToRValue>
  |   |     | |     |     | `-DeclRefExpr 0x99afde0 <col:33> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |     `-IntegerLiteral 0x99afdf8 <col:35> 'int' 3
  |   |     | |     |-CompoundStmt 0x99b16e0 <col:38, line:21:9>
  |   |     | |     | |-CompoundAssignOperator 0x99b16b8 <line:19:13, col:18> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
  |   |     | |     | | |-DeclRefExpr 0x99b1684 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     | | `-IntegerLiteral 0x99b16a0 <col:18> 'int' 2
  |   |     | |     | `-GotoStmt 0x99b1a40 <<invalid sloc>> '____label____2' 0x99b19c0
  |   |     | |     `-CompoundStmt 0x99b1860 <line:21:16, line:24:9>
  |   |     | |       |-BinaryOperator 0x99b17f8 <line:22:13, col:25> 'int' lvalue '='
  |   |     | |       | |-DeclRefExpr 0x99b16f8 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |       | `-BinaryOperator 0x99b17e0 <col:17, col:25> 'int' '-'
  |   |     | |       |   |-BinaryOperator 0x99b17b0 <col:17, col:23> 'int' '+'
  |   |     | |       |   | |-BinaryOperator 0x99b1780 <col:17, col:21> 'int' '-'
  |   |     | |       |   | | |-BinaryOperator 0x99b1750 <col:17, col:19> 'int' '+'
  |   |     | |       |   | | | |-ImplicitCastExpr 0x99b1740 <col:17> 'int' <LValueToRValue>
  |   |     | |       |   | | | | `-DeclRefExpr 0x99b1710 <col:17> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |       |   | | | `-IntegerLiteral 0x99b1728 <col:19> 'int' 1
  |   |     | |       |   | | `-IntegerLiteral 0x99b1768 <col:21> 'int' 1
  |   |     | |       |   | `-IntegerLiteral 0x99b1798 <col:23> 'int' 1
  |   |     | |       |   `-IntegerLiteral 0x99b17c8 <col:25> 'int' 1
  |   |     | |       `-CompoundAssignOperator 0x99b1840 <line:23:13, col:18> 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
  |   |     | |         |-DeclRefExpr 0x99b1810 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |         `-IntegerLiteral 0x99b1828 <col:18> 'int' 1
  |   |     | `-LabelStmt 0x99b19f0 <<invalid sloc>> '____label____2'
  |   |     |   `-CompoundStmt 0x99b1a70 <<invalid sloc>>
  |   |     |     |-UnaryOperator 0x99afab0 <line:5:48, col:49> 'int' postfix '++'
  |   |     |     | `-DeclRefExpr 0x99afa98 <col:48> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     |     `-GotoStmt 0x99b1a60 <<invalid sloc>> '____label____1' 0x99b1980
  |   |     `-<<<NULL>>>
  |   `-LabelStmt 0x99b1a30 <<invalid sloc>> '____label____3'
  |     `-NullStmt 0x99b1a20 <<invalid sloc>>
  `-ReturnStmt 0x99b1910 <line:26:5, col:12>
    `-IntegerLiteral 0x99b18f8 <col:12> 'int' 0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af870 (Function)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af7b0 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af7b0 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af7f0 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af7f0 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1920 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 99b1920 -> p 0 )
CompoundStmt 0x99b1920
|-LabelStmt 0x99b1970 '____label____0'
| `-CompoundStmt 0x99b1ad8
|   |-DeclStmt 0x99af938
|   | `-VarDecl 0x99af8f0 ____localvar____2 'int'
|   |   `-IntegerLiteral 0x99af920 'int' 0
|   |-LabelStmt 0x99b19b0 '____label____1'
|   | `-CompoundStmt 0x99b1ac0
|   |   `-IfStmt 0x99b1aa0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x99afa80 '_Bool' '||'
|   |     | |-BinaryOperator 0x99afa10 '_Bool' '&&'
|   |     | | |-BinaryOperator 0x99af988 '_Bool' '<'
|   |     | | | |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
|   |     | | | | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | | | `-IntegerLiteral 0x99af960 'int' 13
|   |     | | `-BinaryOperator 0x99af9f8 '_Bool' '>'
|   |     | |   |-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |   `-UnaryOperator 0x99af9d0 'int' prefix '-'
|   |     | |     `-IntegerLiteral 0x99af9b8 'int' 1
|   |     | `-BinaryOperator 0x99afa68 '_Bool' '<'
|   |     |   |-ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     |   `-IntegerLiteral 0x99afa40 'int' 14
|   |     |-CompoundStmt 0x99b1a88
|   |     | |-CompoundStmt 0x99b18b8
|   |     | | |-LabelStmt 0x99afc60 'LABEL0'
|   |     | | | `-CompoundStmt 0x99afc20
|   |     | | |   |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
|   |     | | |   | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | | |   `-LabelStmt 0x99afc10 'LABEL1'
|   |     | | |     `-CompoundStmt 0x99afbd0
|   |     | | |       |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
|   |     | | |       | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
|   |     | | |       |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | | |       `-LabelStmt 0x99afbc0 'LABEL2'
|   |     | | |         `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
|   |     | | |           `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
|   |     | | |             `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
|   |     | | |               `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | | `-IfStmt 0x99b1898
|   |     | |   |-<<<NULL>>>
|   |     | |   |-BinaryOperator 0x99afcb0 '_Bool' '>'
|   |     | |   | |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
|   |     | |   | | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |   | `-IntegerLiteral 0x99afc88 'int' 9
|   |     | |   |-CompoundStmt 0x99afcd0
|   |     | |   | `-GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
|   |     | |   `-IfStmt 0x99b1878
|   |     | |     |-<<<NULL>>>
|   |     | |     |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
|   |     | |     | `-BinaryOperator 0x99b1660 'int' ','
|   |     | |     |   |-BinaryOperator 0x99afdc8 'int' ','
|   |     | |     |   | |-BinaryOperator 0x99afd58 'int' ','
|   |     | |     |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |     |   | | `-BinaryOperator 0x99afd40 'int' '+'
|   |     | |     |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
|   |     | |     |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |     |   | |   `-IntegerLiteral 0x99afd18 'int' 1
|   |     | |     |   | `-BinaryOperator 0x99afdb0 'int' '-'
|   |     | |     |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
|   |     | |     |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |     |   |   `-IntegerLiteral 0x99afd88 'int' 1
|   |     | |     |   `-BinaryOperator 0x99b1648 'int' '-'
|   |     | |     |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
|   |     | |     |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |     |     `-IntegerLiteral 0x99afdf8 'int' 3
|   |     | |     |-CompoundStmt 0x99b16e0
|   |     | |     | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | |     | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |     | | `-IntegerLiteral 0x99b16a0 'int' 2
|   |     | |     | `-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
|   |     | |     `-CompoundStmt 0x99b1860
|   |     | |       |-BinaryOperator 0x99b17f8 'int' lvalue '='
|   |     | |       | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |       | `-BinaryOperator 0x99b17e0 'int' '-'
|   |     | |       |   |-BinaryOperator 0x99b17b0 'int' '+'
|   |     | |       |   | |-BinaryOperator 0x99b1780 'int' '-'
|   |     | |       |   | | |-BinaryOperator 0x99b1750 'int' '+'
|   |     | |       |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
|   |     | |       |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |       |   | | | `-IntegerLiteral 0x99b1728 'int' 1
|   |     | |       |   | | `-IntegerLiteral 0x99b1768 'int' 1
|   |     | |       |   | `-IntegerLiteral 0x99b1798 'int' 1
|   |     | |       |   `-IntegerLiteral 0x99b17c8 'int' 1
|   |     | |       `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     | |         |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     | |         `-IntegerLiteral 0x99b1828 'int' 1
|   |     | `-LabelStmt 0x99b19f0 '____label____2'
|   |     |   `-CompoundStmt 0x99b1a70
|   |     |     |-UnaryOperator 0x99afab0 'int' postfix '++'
|   |     |     | `-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |     |     `-GotoStmt 0x99b1a60 '____label____1' 0x99b1980
|   |     `-<<<NULL>>>
|   `-LabelStmt 0x99b1a30 '____label____3'
|     `-NullStmt 0x99b1a20
`-ReturnStmt 0x99b1910
  `-IntegerLiteral 0x99b18f8 'int' 0
{
  ____label____0:
    {
        int ____localvar____2 = 0;
      ____label____1:
        {
            if (____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14) {
                {
                  LABEL0:
                    {
                        --____localvar____2;
                      LABEL1:
                        {
                            ----____localvar____2;
                          LABEL2:
                            ++++++____localvar____2;
                        }
                    }
                    if (____localvar____2 > 9) {
                        goto ____label____3;
                    } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
                        ____localvar____2 += 2;
                        goto ____label____2;
                    } else {
                        ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
                        ____localvar____2 *= 1;
                    }
                }
              ____label____2:
                {
                    ____localvar____2++;
                    goto ____label____1;
                }
            }
        }
      ____label____3:
        ;
    }
    return 0;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1970 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 99b1970 -> p 99b1920 )
LabelStmt 0x99b1970 '____label____0'
`-CompoundStmt 0x99b1ad8
  |-DeclStmt 0x99af938
  | `-VarDecl 0x99af8f0 ____localvar____2 'int'
  |   `-IntegerLiteral 0x99af920 'int' 0
  |-LabelStmt 0x99b19b0 '____label____1'
  | `-CompoundStmt 0x99b1ac0
  |   `-IfStmt 0x99b1aa0
  |     |-<<<NULL>>>
  |     |-BinaryOperator 0x99afa80 '_Bool' '||'
  |     | |-BinaryOperator 0x99afa10 '_Bool' '&&'
  |     | | |-BinaryOperator 0x99af988 '_Bool' '<'
  |     | | | |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
  |     | | | | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | | | `-IntegerLiteral 0x99af960 'int' 13
  |     | | `-BinaryOperator 0x99af9f8 '_Bool' '>'
  |     | |   |-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
  |     | |   | `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | |   `-UnaryOperator 0x99af9d0 'int' prefix '-'
  |     | |     `-IntegerLiteral 0x99af9b8 'int' 1
  |     | `-BinaryOperator 0x99afa68 '_Bool' '<'
  |     |   |-ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
  |     |   | `-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     |   `-IntegerLiteral 0x99afa40 'int' 14
  |     |-CompoundStmt 0x99b1a88
  |     | |-CompoundStmt 0x99b18b8
  |     | | |-LabelStmt 0x99afc60 'LABEL0'
  |     | | | `-CompoundStmt 0x99afc20
  |     | | |   |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
  |     | | |   | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | | |   `-LabelStmt 0x99afc10 'LABEL1'
  |     | | |     `-CompoundStmt 0x99afbd0
  |     | | |       |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
  |     | | |       | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
  |     | | |       |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | | |       `-LabelStmt 0x99afbc0 'LABEL2'
  |     | | |         `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
  |     | | |           `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
  |     | | |             `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
  |     | | |               `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | | `-IfStmt 0x99b1898
  |     | |   |-<<<NULL>>>
  |     | |   |-BinaryOperator 0x99afcb0 '_Bool' '>'
  |     | |   | |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
  |     | |   | | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | |   | `-IntegerLiteral 0x99afc88 'int' 9
  |     | |   |-CompoundStmt 0x99afcd0
  |     | |   | `-GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
  |     | |   `-IfStmt 0x99b1878
  |     | |     |-<<<NULL>>>
  |     | |     |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
  |     | |     | `-BinaryOperator 0x99b1660 'int' ','
  |     | |     |   |-BinaryOperator 0x99afdc8 'int' ','
  |     | |     |   | |-BinaryOperator 0x99afd58 'int' ','
  |     | |     |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | |     |   | | `-BinaryOperator 0x99afd40 'int' '+'
  |     | |     |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
  |     | |     |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | |     |   | |   `-IntegerLiteral 0x99afd18 'int' 1
  |     | |     |   | `-BinaryOperator 0x99afdb0 'int' '-'
  |     | |     |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
  |     | |     |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | |     |   |   `-IntegerLiteral 0x99afd88 'int' 1
  |     | |     |   `-BinaryOperator 0x99b1648 'int' '-'
  |     | |     |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
  |     | |     |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | |     |     `-IntegerLiteral 0x99afdf8 'int' 3
  |     | |     |-CompoundStmt 0x99b16e0
  |     | |     | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
  |     | |     | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | |     | | `-IntegerLiteral 0x99b16a0 'int' 2
  |     | |     | `-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
  |     | |     `-CompoundStmt 0x99b1860
  |     | |       |-BinaryOperator 0x99b17f8 'int' lvalue '='
  |     | |       | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | |       | `-BinaryOperator 0x99b17e0 'int' '-'
  |     | |       |   |-BinaryOperator 0x99b17b0 'int' '+'
  |     | |       |   | |-BinaryOperator 0x99b1780 'int' '-'
  |     | |       |   | | |-BinaryOperator 0x99b1750 'int' '+'
  |     | |       |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
  |     | |       |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | |       |   | | | `-IntegerLiteral 0x99b1728 'int' 1
  |     | |       |   | | `-IntegerLiteral 0x99b1768 'int' 1
  |     | |       |   | `-IntegerLiteral 0x99b1798 'int' 1
  |     | |       |   `-IntegerLiteral 0x99b17c8 'int' 1
  |     | |       `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
  |     | |         |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     | |         `-IntegerLiteral 0x99b1828 'int' 1
  |     | `-LabelStmt 0x99b19f0 '____label____2'
  |     |   `-CompoundStmt 0x99b1a70
  |     |     |-UnaryOperator 0x99afab0 'int' postfix '++'
  |     |     | `-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     |     `-GotoStmt 0x99b1a60 '____label____1' 0x99b1980
  |     `-<<<NULL>>>
  `-LabelStmt 0x99b1a30 '____label____3'
    `-NullStmt 0x99b1a20
____label____0:
{
    int ____localvar____2 = 0;
  ____label____1:
    {
        if (____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14) {
            {
              LABEL0:
                {
                    --____localvar____2;
                  LABEL1:
                    {
                        ----____localvar____2;
                      LABEL2:
                        ++++++____localvar____2;
                    }
                }
                if (____localvar____2 > 9) {
                    goto ____label____3;
                } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
                    ____localvar____2 += 2;
                    goto ____label____2;
                } else {
                    ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
                    ____localvar____2 *= 1;
                }
            }
          ____label____2:
            {
                ____localvar____2++;
                goto ____label____1;
            }
        }
    }
  ____label____3:
    ;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1ad8 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 99b1ad8 -> p 99b1970 )
CompoundStmt 0x99b1ad8
|-DeclStmt 0x99af938
| `-VarDecl 0x99af8f0 ____localvar____2 'int'
|   `-IntegerLiteral 0x99af920 'int' 0
|-LabelStmt 0x99b19b0 '____label____1'
| `-CompoundStmt 0x99b1ac0
|   `-IfStmt 0x99b1aa0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x99afa80 '_Bool' '||'
|     | |-BinaryOperator 0x99afa10 '_Bool' '&&'
|     | | |-BinaryOperator 0x99af988 '_Bool' '<'
|     | | | |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | | | `-IntegerLiteral 0x99af960 'int' 13
|     | | `-BinaryOperator 0x99af9f8 '_Bool' '>'
|     | |   |-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
|     | |   | `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | |   `-UnaryOperator 0x99af9d0 'int' prefix '-'
|     | |     `-IntegerLiteral 0x99af9b8 'int' 1
|     | `-BinaryOperator 0x99afa68 '_Bool' '<'
|     |   |-ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     |   `-IntegerLiteral 0x99afa40 'int' 14
|     |-CompoundStmt 0x99b1a88
|     | |-CompoundStmt 0x99b18b8
|     | | |-LabelStmt 0x99afc60 'LABEL0'
|     | | | `-CompoundStmt 0x99afc20
|     | | |   |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
|     | | |   | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | | |   `-LabelStmt 0x99afc10 'LABEL1'
|     | | |     `-CompoundStmt 0x99afbd0
|     | | |       |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
|     | | |       | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
|     | | |       |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | | |       `-LabelStmt 0x99afbc0 'LABEL2'
|     | | |         `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
|     | | |           `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
|     | | |             `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
|     | | |               `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | | `-IfStmt 0x99b1898
|     | |   |-<<<NULL>>>
|     | |   |-BinaryOperator 0x99afcb0 '_Bool' '>'
|     | |   | |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
|     | |   | | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | |   | `-IntegerLiteral 0x99afc88 'int' 9
|     | |   |-CompoundStmt 0x99afcd0
|     | |   | `-GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
|     | |   `-IfStmt 0x99b1878
|     | |     |-<<<NULL>>>
|     | |     |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
|     | |     | `-BinaryOperator 0x99b1660 'int' ','
|     | |     |   |-BinaryOperator 0x99afdc8 'int' ','
|     | |     |   | |-BinaryOperator 0x99afd58 'int' ','
|     | |     |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | |     |   | | `-BinaryOperator 0x99afd40 'int' '+'
|     | |     |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
|     | |     |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | |     |   | |   `-IntegerLiteral 0x99afd18 'int' 1
|     | |     |   | `-BinaryOperator 0x99afdb0 'int' '-'
|     | |     |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
|     | |     |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | |     |   |   `-IntegerLiteral 0x99afd88 'int' 1
|     | |     |   `-BinaryOperator 0x99b1648 'int' '-'
|     | |     |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
|     | |     |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | |     |     `-IntegerLiteral 0x99afdf8 'int' 3
|     | |     |-CompoundStmt 0x99b16e0
|     | |     | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |     | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | |     | | `-IntegerLiteral 0x99b16a0 'int' 2
|     | |     | `-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
|     | |     `-CompoundStmt 0x99b1860
|     | |       |-BinaryOperator 0x99b17f8 'int' lvalue '='
|     | |       | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | |       | `-BinaryOperator 0x99b17e0 'int' '-'
|     | |       |   |-BinaryOperator 0x99b17b0 'int' '+'
|     | |       |   | |-BinaryOperator 0x99b1780 'int' '-'
|     | |       |   | | |-BinaryOperator 0x99b1750 'int' '+'
|     | |       |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
|     | |       |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | |       |   | | | `-IntegerLiteral 0x99b1728 'int' 1
|     | |       |   | | `-IntegerLiteral 0x99b1768 'int' 1
|     | |       |   | `-IntegerLiteral 0x99b1798 'int' 1
|     | |       |   `-IntegerLiteral 0x99b17c8 'int' 1
|     | |       `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
|     | |         |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | |         `-IntegerLiteral 0x99b1828 'int' 1
|     | `-LabelStmt 0x99b19f0 '____label____2'
|     |   `-CompoundStmt 0x99b1a70
|     |     |-UnaryOperator 0x99afab0 'int' postfix '++'
|     |     | `-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     |     `-GotoStmt 0x99b1a60 '____label____1' 0x99b1980
|     `-<<<NULL>>>
`-LabelStmt 0x99b1a30 '____label____3'
  `-NullStmt 0x99b1a20
{
    int ____localvar____2 = 0;
  ____label____1:
    {
        if (____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14) {
            {
              LABEL0:
                {
                    --____localvar____2;
                  LABEL1:
                    {
                        ----____localvar____2;
                      LABEL2:
                        ++++++____localvar____2;
                    }
                }
                if (____localvar____2 > 9) {
                    goto ____label____3;
                } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
                    ____localvar____2 += 2;
                    goto ____label____2;
                } else {
                    ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
                    ____localvar____2 *= 1;
                }
            }
          ____label____2:
            {
                ____localvar____2++;
                goto ____label____1;
            }
        }
    }
  ____label____3:
    ;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af938 (DeclStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclStmt ( 99af938 -> p 99b1ad8 )
DeclStmt 0x99af938
`-VarDecl 0x99af8f0 ____localvar____2 'int'
  `-IntegerLiteral 0x99af920 'int' 0
int ____localvar____2 = 0;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af8f0 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af920 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99af920 -> p 99af938 )
IntegerLiteral 0x99af920 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af920 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af8f0 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af938 (DeclStmt)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 177] WorkOnDeclStmt
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 229] Handle VarDecl ____localvar____2 99af8f0 | Ctx 99af894(Function) -> p 99526f4
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 254] QualType 
int identifier
IntegerLiteral 0x99af920 'int' 0
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 306] Expr type: lhs 9952760, rhs 9952760
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 309] retAssign
BinaryOperator 0x99b1b20 'int' lvalue '='
|-DeclRefExpr 0x99b1b04 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99af920 'int' 0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b19b0 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 99b19b0 -> p 99b1ad8 )
LabelStmt 0x99b19b0 '____label____1'
`-CompoundStmt 0x99b1ac0
  `-IfStmt 0x99b1aa0
    |-<<<NULL>>>
    |-BinaryOperator 0x99afa80 '_Bool' '||'
    | |-BinaryOperator 0x99afa10 '_Bool' '&&'
    | | |-BinaryOperator 0x99af988 '_Bool' '<'
    | | | |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
    | | | | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | | | `-IntegerLiteral 0x99af960 'int' 13
    | | `-BinaryOperator 0x99af9f8 '_Bool' '>'
    | |   |-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | |   `-UnaryOperator 0x99af9d0 'int' prefix '-'
    | |     `-IntegerLiteral 0x99af9b8 'int' 1
    | `-BinaryOperator 0x99afa68 '_Bool' '<'
    |   |-ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
    |   | `-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |   `-IntegerLiteral 0x99afa40 'int' 14
    |-CompoundStmt 0x99b1a88
    | |-CompoundStmt 0x99b18b8
    | | |-LabelStmt 0x99afc60 'LABEL0'
    | | | `-CompoundStmt 0x99afc20
    | | |   |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
    | | |   | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | | |   `-LabelStmt 0x99afc10 'LABEL1'
    | | |     `-CompoundStmt 0x99afbd0
    | | |       |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
    | | |       | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
    | | |       |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | | |       `-LabelStmt 0x99afbc0 'LABEL2'
    | | |         `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
    | | |           `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
    | | |             `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
    | | |               `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | | `-IfStmt 0x99b1898
    | |   |-<<<NULL>>>
    | |   |-BinaryOperator 0x99afcb0 '_Bool' '>'
    | |   | |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | |   | `-IntegerLiteral 0x99afc88 'int' 9
    | |   |-CompoundStmt 0x99afcd0
    | |   | `-GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
    | |   `-IfStmt 0x99b1878
    | |     |-<<<NULL>>>
    | |     |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
    | |     | `-BinaryOperator 0x99b1660 'int' ','
    | |     |   |-BinaryOperator 0x99afdc8 'int' ','
    | |     |   | |-BinaryOperator 0x99afd58 'int' ','
    | |     |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | |     |   | | `-BinaryOperator 0x99afd40 'int' '+'
    | |     |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
    | |     |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | |     |   | |   `-IntegerLiteral 0x99afd18 'int' 1
    | |     |   | `-BinaryOperator 0x99afdb0 'int' '-'
    | |     |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
    | |     |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | |     |   |   `-IntegerLiteral 0x99afd88 'int' 1
    | |     |   `-BinaryOperator 0x99b1648 'int' '-'
    | |     |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
    | |     |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | |     |     `-IntegerLiteral 0x99afdf8 'int' 3
    | |     |-CompoundStmt 0x99b16e0
    | |     | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | |     | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | |     | | `-IntegerLiteral 0x99b16a0 'int' 2
    | |     | `-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
    | |     `-CompoundStmt 0x99b1860
    | |       |-BinaryOperator 0x99b17f8 'int' lvalue '='
    | |       | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | |       | `-BinaryOperator 0x99b17e0 'int' '-'
    | |       |   |-BinaryOperator 0x99b17b0 'int' '+'
    | |       |   | |-BinaryOperator 0x99b1780 'int' '-'
    | |       |   | | |-BinaryOperator 0x99b1750 'int' '+'
    | |       |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
    | |       |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | |       |   | | | `-IntegerLiteral 0x99b1728 'int' 1
    | |       |   | | `-IntegerLiteral 0x99b1768 'int' 1
    | |       |   | `-IntegerLiteral 0x99b1798 'int' 1
    | |       |   `-IntegerLiteral 0x99b17c8 'int' 1
    | |       `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
    | |         |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | |         `-IntegerLiteral 0x99b1828 'int' 1
    | `-LabelStmt 0x99b19f0 '____label____2'
    |   `-CompoundStmt 0x99b1a70
    |     |-UnaryOperator 0x99afab0 'int' postfix '++'
    |     | `-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |     `-GotoStmt 0x99b1a60 '____label____1' 0x99b1980
    `-<<<NULL>>>
____label____1:
{
    if (____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14) {
        {
          LABEL0:
            {
                --____localvar____2;
              LABEL1:
                {
                    ----____localvar____2;
                  LABEL2:
                    ++++++____localvar____2;
                }
            }
            if (____localvar____2 > 9) {
                goto ____label____3;
            } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
                ____localvar____2 += 2;
                goto ____label____2;
            } else {
                ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
                ____localvar____2 *= 1;
            }
        }
      ____label____2:
        {
            ____localvar____2++;
            goto ____label____1;
        }
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1ac0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 99b1ac0 -> p 99b19b0 )
CompoundStmt 0x99b1ac0
`-IfStmt 0x99b1aa0
  |-<<<NULL>>>
  |-BinaryOperator 0x99afa80 '_Bool' '||'
  | |-BinaryOperator 0x99afa10 '_Bool' '&&'
  | | |-BinaryOperator 0x99af988 '_Bool' '<'
  | | | |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
  | | | | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | | | `-IntegerLiteral 0x99af960 'int' 13
  | | `-BinaryOperator 0x99af9f8 '_Bool' '>'
  | |   |-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
  | |   | `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |   `-UnaryOperator 0x99af9d0 'int' prefix '-'
  | |     `-IntegerLiteral 0x99af9b8 'int' 1
  | `-BinaryOperator 0x99afa68 '_Bool' '<'
  |   |-ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
  |   | `-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   `-IntegerLiteral 0x99afa40 'int' 14
  |-CompoundStmt 0x99b1a88
  | |-CompoundStmt 0x99b18b8
  | | |-LabelStmt 0x99afc60 'LABEL0'
  | | | `-CompoundStmt 0x99afc20
  | | |   |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
  | | |   | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | | |   `-LabelStmt 0x99afc10 'LABEL1'
  | | |     `-CompoundStmt 0x99afbd0
  | | |       |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
  | | |       | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
  | | |       |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | | |       `-LabelStmt 0x99afbc0 'LABEL2'
  | | |         `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
  | | |           `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
  | | |             `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
  | | |               `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | | `-IfStmt 0x99b1898
  | |   |-<<<NULL>>>
  | |   |-BinaryOperator 0x99afcb0 '_Bool' '>'
  | |   | |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
  | |   | | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |   | `-IntegerLiteral 0x99afc88 'int' 9
  | |   |-CompoundStmt 0x99afcd0
  | |   | `-GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
  | |   `-IfStmt 0x99b1878
  | |     |-<<<NULL>>>
  | |     |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
  | |     | `-BinaryOperator 0x99b1660 'int' ','
  | |     |   |-BinaryOperator 0x99afdc8 'int' ','
  | |     |   | |-BinaryOperator 0x99afd58 'int' ','
  | |     |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |     |   | | `-BinaryOperator 0x99afd40 'int' '+'
  | |     |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
  | |     |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |     |   | |   `-IntegerLiteral 0x99afd18 'int' 1
  | |     |   | `-BinaryOperator 0x99afdb0 'int' '-'
  | |     |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
  | |     |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |     |   |   `-IntegerLiteral 0x99afd88 'int' 1
  | |     |   `-BinaryOperator 0x99b1648 'int' '-'
  | |     |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
  | |     |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |     |     `-IntegerLiteral 0x99afdf8 'int' 3
  | |     |-CompoundStmt 0x99b16e0
  | |     | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
  | |     | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |     | | `-IntegerLiteral 0x99b16a0 'int' 2
  | |     | `-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
  | |     `-CompoundStmt 0x99b1860
  | |       |-BinaryOperator 0x99b17f8 'int' lvalue '='
  | |       | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |       | `-BinaryOperator 0x99b17e0 'int' '-'
  | |       |   |-BinaryOperator 0x99b17b0 'int' '+'
  | |       |   | |-BinaryOperator 0x99b1780 'int' '-'
  | |       |   | | |-BinaryOperator 0x99b1750 'int' '+'
  | |       |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
  | |       |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |       |   | | | `-IntegerLiteral 0x99b1728 'int' 1
  | |       |   | | `-IntegerLiteral 0x99b1768 'int' 1
  | |       |   | `-IntegerLiteral 0x99b1798 'int' 1
  | |       |   `-IntegerLiteral 0x99b17c8 'int' 1
  | |       `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
  | |         |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |         `-IntegerLiteral 0x99b1828 'int' 1
  | `-LabelStmt 0x99b19f0 '____label____2'
  |   `-CompoundStmt 0x99b1a70
  |     |-UnaryOperator 0x99afab0 'int' postfix '++'
  |     | `-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     `-GotoStmt 0x99b1a60 '____label____1' 0x99b1980
  `-<<<NULL>>>
{
    if (____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14) {
        {
          LABEL0:
            {
                --____localvar____2;
              LABEL1:
                {
                    ----____localvar____2;
                  LABEL2:
                    ++++++____localvar____2;
                }
            }
            if (____localvar____2 > 9) {
                goto ____label____3;
            } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
                ____localvar____2 += 2;
                goto ____label____2;
            } else {
                ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
                ____localvar____2 *= 1;
            }
        }
      ____label____2:
        {
            ____localvar____2++;
            goto ____label____1;
        }
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1aa0 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 99b1aa0 -> p 99b1ac0 )
IfStmt 0x99b1aa0
|-<<<NULL>>>
|-BinaryOperator 0x99afa80 '_Bool' '||'
| |-BinaryOperator 0x99afa10 '_Bool' '&&'
| | |-BinaryOperator 0x99af988 '_Bool' '<'
| | | |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
| | | | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | | `-IntegerLiteral 0x99af960 'int' 13
| | `-BinaryOperator 0x99af9f8 '_Bool' '>'
| |   |-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
| |   | `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |   `-UnaryOperator 0x99af9d0 'int' prefix '-'
| |     `-IntegerLiteral 0x99af9b8 'int' 1
| `-BinaryOperator 0x99afa68 '_Bool' '<'
|   |-ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   `-IntegerLiteral 0x99afa40 'int' 14
|-CompoundStmt 0x99b1a88
| |-CompoundStmt 0x99b18b8
| | |-LabelStmt 0x99afc60 'LABEL0'
| | | `-CompoundStmt 0x99afc20
| | |   |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
| | |   | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | |   `-LabelStmt 0x99afc10 'LABEL1'
| | |     `-CompoundStmt 0x99afbd0
| | |       |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
| | |       | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
| | |       |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | |       `-LabelStmt 0x99afbc0 'LABEL2'
| | |         `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
| | |           `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
| | |             `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
| | |               `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | `-IfStmt 0x99b1898
| |   |-<<<NULL>>>
| |   |-BinaryOperator 0x99afcb0 '_Bool' '>'
| |   | |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
| |   | | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |   | `-IntegerLiteral 0x99afc88 'int' 9
| |   |-CompoundStmt 0x99afcd0
| |   | `-GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
| |   `-IfStmt 0x99b1878
| |     |-<<<NULL>>>
| |     |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
| |     | `-BinaryOperator 0x99b1660 'int' ','
| |     |   |-BinaryOperator 0x99afdc8 'int' ','
| |     |   | |-BinaryOperator 0x99afd58 'int' ','
| |     |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |     |   | | `-BinaryOperator 0x99afd40 'int' '+'
| |     |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
| |     |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |     |   | |   `-IntegerLiteral 0x99afd18 'int' 1
| |     |   | `-BinaryOperator 0x99afdb0 'int' '-'
| |     |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
| |     |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |     |   |   `-IntegerLiteral 0x99afd88 'int' 1
| |     |   `-BinaryOperator 0x99b1648 'int' '-'
| |     |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
| |     |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |     |     `-IntegerLiteral 0x99afdf8 'int' 3
| |     |-CompoundStmt 0x99b16e0
| |     | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
| |     | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |     | | `-IntegerLiteral 0x99b16a0 'int' 2
| |     | `-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
| |     `-CompoundStmt 0x99b1860
| |       |-BinaryOperator 0x99b17f8 'int' lvalue '='
| |       | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |       | `-BinaryOperator 0x99b17e0 'int' '-'
| |       |   |-BinaryOperator 0x99b17b0 'int' '+'
| |       |   | |-BinaryOperator 0x99b1780 'int' '-'
| |       |   | | |-BinaryOperator 0x99b1750 'int' '+'
| |       |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
| |       |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |       |   | | | `-IntegerLiteral 0x99b1728 'int' 1
| |       |   | | `-IntegerLiteral 0x99b1768 'int' 1
| |       |   | `-IntegerLiteral 0x99b1798 'int' 1
| |       |   `-IntegerLiteral 0x99b17c8 'int' 1
| |       `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
| |         |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |         `-IntegerLiteral 0x99b1828 'int' 1
| `-LabelStmt 0x99b19f0 '____label____2'
|   `-CompoundStmt 0x99b1a70
|     |-UnaryOperator 0x99afab0 'int' postfix '++'
|     | `-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     `-GotoStmt 0x99b1a60 '____label____1' 0x99b1980
`-<<<NULL>>>
if (____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14) {
    {
      LABEL0:
        {
            --____localvar____2;
          LABEL1:
            {
                ----____localvar____2;
              LABEL2:
                ++++++____localvar____2;
            }
        }
        if (____localvar____2 > 9) {
            goto ____label____3;
        } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
            ____localvar____2 += 2;
            goto ____label____2;
        } else {
            ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
            ____localvar____2 *= 1;
        }
    }
  ____label____2:
    {
        ____localvar____2++;
        goto ____label____1;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa80 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99afa80 -> p 99b1aa0 )
BinaryOperator 0x99afa80 '_Bool' '||'
|-BinaryOperator 0x99afa10 '_Bool' '&&'
| |-BinaryOperator 0x99af988 '_Bool' '<'
| | |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | `-IntegerLiteral 0x99af960 'int' 13
| `-BinaryOperator 0x99af9f8 '_Bool' '>'
|   |-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   `-UnaryOperator 0x99af9d0 'int' prefix '-'
|     `-IntegerLiteral 0x99af9b8 'int' 1
`-BinaryOperator 0x99afa68 '_Bool' '<'
  |-ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
  | `-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-IntegerLiteral 0x99afa40 'int' 14
____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99afa10 -> p 99afa80 )
BinaryOperator 0x99afa10 '_Bool' '&&'
|-BinaryOperator 0x99af988 '_Bool' '<'
| |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
| | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| `-IntegerLiteral 0x99af960 'int' 13
`-BinaryOperator 0x99af9f8 '_Bool' '>'
  |-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
  | `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-UnaryOperator 0x99af9d0 'int' prefix '-'
    `-IntegerLiteral 0x99af9b8 'int' 1
____localvar____2 < 13 && ____localvar____2 > -1[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99af988 -> p 99afa10 )
BinaryOperator 0x99af988 '_Bool' '<'
|-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
| `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99af960 'int' 13
____localvar____2 < 13[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af978 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 99af978 -> p 99af988 )
ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
`-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af948 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99af948 -> p 99af978 )
DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af948 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af978 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af960 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99af960 -> p 99af988 )
IntegerLiteral 0x99af960 'int' 13
13[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af960 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99af9f8 -> p 99afa10 )
BinaryOperator 0x99af9f8 '_Bool' '>'
|-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
| `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-UnaryOperator 0x99af9d0 'int' prefix '-'
  `-IntegerLiteral 0x99af9b8 'int' 1
____localvar____2 > -1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9e8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 99af9e8 -> p 99af9f8 )
ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
`-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9a0 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99af9a0 -> p 99af9e8 )
DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9a0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9e8 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt UnaryOperator ( 99af9d0 -> p 99af9f8 )
UnaryOperator 0x99af9d0 'int' prefix '-'
`-IntegerLiteral 0x99af9b8 'int' 1
-1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9b8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99af9b8 -> p 99af9d0 )
IntegerLiteral 0x99af9b8 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9b8 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99afa68 -> p 99afa80 )
BinaryOperator 0x99afa68 '_Bool' '<'
|-ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
| `-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99afa40 'int' 14
____localvar____2 < 14[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa58 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 99afa58 -> p 99afa68 )
ImplicitCastExpr 0x99afa58 'int' <LValueToRValue>
`-DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa28 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99afa28 -> p 99afa58 )
DeclRefExpr 0x99afa28 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa28 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa58 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa40 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99afa40 -> p 99afa68 )
IntegerLiteral 0x99afa40 'int' 14
14[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa40 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa80 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a88 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 99b1a88 -> p 99b1aa0 )
CompoundStmt 0x99b1a88
|-CompoundStmt 0x99b18b8
| |-LabelStmt 0x99afc60 'LABEL0'
| | `-CompoundStmt 0x99afc20
| |   |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
| |   | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |   `-LabelStmt 0x99afc10 'LABEL1'
| |     `-CompoundStmt 0x99afbd0
| |       |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
| |       | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
| |       |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |       `-LabelStmt 0x99afbc0 'LABEL2'
| |         `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
| |           `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
| |             `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
| |               `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| `-IfStmt 0x99b1898
|   |-<<<NULL>>>
|   |-BinaryOperator 0x99afcb0 '_Bool' '>'
|   | |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   | `-IntegerLiteral 0x99afc88 'int' 9
|   |-CompoundStmt 0x99afcd0
|   | `-GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
|   `-IfStmt 0x99b1878
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
|     | `-BinaryOperator 0x99b1660 'int' ','
|     |   |-BinaryOperator 0x99afdc8 'int' ','
|     |   | |-BinaryOperator 0x99afd58 'int' ','
|     |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     |   | | `-BinaryOperator 0x99afd40 'int' '+'
|     |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
|     |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     |   | |   `-IntegerLiteral 0x99afd18 'int' 1
|     |   | `-BinaryOperator 0x99afdb0 'int' '-'
|     |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
|     |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     |   |   `-IntegerLiteral 0x99afd88 'int' 1
|     |   `-BinaryOperator 0x99b1648 'int' '-'
|     |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
|     |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     |     `-IntegerLiteral 0x99afdf8 'int' 3
|     |-CompoundStmt 0x99b16e0
|     | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|     | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     | | `-IntegerLiteral 0x99b16a0 'int' 2
|     | `-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
|     `-CompoundStmt 0x99b1860
|       |-BinaryOperator 0x99b17f8 'int' lvalue '='
|       | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|       | `-BinaryOperator 0x99b17e0 'int' '-'
|       |   |-BinaryOperator 0x99b17b0 'int' '+'
|       |   | |-BinaryOperator 0x99b1780 'int' '-'
|       |   | | |-BinaryOperator 0x99b1750 'int' '+'
|       |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
|       |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|       |   | | | `-IntegerLiteral 0x99b1728 'int' 1
|       |   | | `-IntegerLiteral 0x99b1768 'int' 1
|       |   | `-IntegerLiteral 0x99b1798 'int' 1
|       |   `-IntegerLiteral 0x99b17c8 'int' 1
|       `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
|         |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|         `-IntegerLiteral 0x99b1828 'int' 1
`-LabelStmt 0x99b19f0 '____label____2'
  `-CompoundStmt 0x99b1a70
    |-UnaryOperator 0x99afab0 'int' postfix '++'
    | `-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    `-GotoStmt 0x99b1a60 '____label____1' 0x99b1980
{
    {
      LABEL0:
        {
            --____localvar____2;
          LABEL1:
            {
                ----____localvar____2;
              LABEL2:
                ++++++____localvar____2;
            }
        }
        if (____localvar____2 > 9) {
            goto ____label____3;
        } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
            ____localvar____2 += 2;
            goto ____label____2;
        } else {
            ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
            ____localvar____2 *= 1;
        }
    }
  ____label____2:
    {
        ____localvar____2++;
        goto ____label____1;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b18b8 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 99b18b8 -> p 99b1a88 )
CompoundStmt 0x99b18b8
|-LabelStmt 0x99afc60 'LABEL0'
| `-CompoundStmt 0x99afc20
|   |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
|   | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   `-LabelStmt 0x99afc10 'LABEL1'
|     `-CompoundStmt 0x99afbd0
|       |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
|       | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
|       |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|       `-LabelStmt 0x99afbc0 'LABEL2'
|         `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
|           `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
|             `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
|               `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IfStmt 0x99b1898
  |-<<<NULL>>>
  |-BinaryOperator 0x99afcb0 '_Bool' '>'
  | |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | `-IntegerLiteral 0x99afc88 'int' 9
  |-CompoundStmt 0x99afcd0
  | `-GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
  `-IfStmt 0x99b1878
    |-<<<NULL>>>
    |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
    | `-BinaryOperator 0x99b1660 'int' ','
    |   |-BinaryOperator 0x99afdc8 'int' ','
    |   | |-BinaryOperator 0x99afd58 'int' ','
    |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |   | | `-BinaryOperator 0x99afd40 'int' '+'
    |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
    |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |   | |   `-IntegerLiteral 0x99afd18 'int' 1
    |   | `-BinaryOperator 0x99afdb0 'int' '-'
    |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |   |   `-IntegerLiteral 0x99afd88 'int' 1
    |   `-BinaryOperator 0x99b1648 'int' '-'
    |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
    |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |     `-IntegerLiteral 0x99afdf8 'int' 3
    |-CompoundStmt 0x99b16e0
    | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
    | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | | `-IntegerLiteral 0x99b16a0 'int' 2
    | `-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
    `-CompoundStmt 0x99b1860
      |-BinaryOperator 0x99b17f8 'int' lvalue '='
      | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      | `-BinaryOperator 0x99b17e0 'int' '-'
      |   |-BinaryOperator 0x99b17b0 'int' '+'
      |   | |-BinaryOperator 0x99b1780 'int' '-'
      |   | | |-BinaryOperator 0x99b1750 'int' '+'
      |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
      |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      |   | | | `-IntegerLiteral 0x99b1728 'int' 1
      |   | | `-IntegerLiteral 0x99b1768 'int' 1
      |   | `-IntegerLiteral 0x99b1798 'int' 1
      |   `-IntegerLiteral 0x99b17c8 'int' 1
      `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
        |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
        `-IntegerLiteral 0x99b1828 'int' 1
{
  LABEL0:
    {
        --____localvar____2;
      LABEL1:
        {
            ----____localvar____2;
          LABEL2:
            ++++++____localvar____2;
        }
    }
    if (____localvar____2 > 9) {
        goto ____label____3;
    } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
        ____localvar____2 += 2;
        goto ____label____2;
    } else {
        ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
        ____localvar____2 *= 1;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc60 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 99afc60 -> p 99b18b8 )
LabelStmt 0x99afc60 'LABEL0'
`-CompoundStmt 0x99afc20
  |-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
  | `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-LabelStmt 0x99afc10 'LABEL1'
    `-CompoundStmt 0x99afbd0
      |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
      | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
      |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      `-LabelStmt 0x99afbc0 'LABEL2'
        `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
          `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
            `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
              `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
LABEL0:
{
    --____localvar____2;
  LABEL1:
    {
        ----____localvar____2;
      LABEL2:
        ++++++____localvar____2;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc20 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 99afc20 -> p 99afc60 )
CompoundStmt 0x99afc20
|-UnaryOperator 0x99afae0 'int' lvalue prefix '--'
| `-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-LabelStmt 0x99afc10 'LABEL1'
  `-CompoundStmt 0x99afbd0
    |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
    | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
    |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    `-LabelStmt 0x99afbc0 'LABEL2'
      `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
        `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
          `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
            `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
{
    --____localvar____2;
  LABEL1:
    {
        ----____localvar____2;
      LABEL2:
        ++++++____localvar____2;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afae0 (UnaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt UnaryOperator ( 99afae0 -> p 99afc20 )
UnaryOperator 0x99afae0 'int' lvalue prefix '--'
`-DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
--____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afac4 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99afac4 -> p 99afae0 )
DeclRefExpr 0x99afac4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afac4 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afae0 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc10 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 99afc10 -> p 99afc20 )
LabelStmt 0x99afc10 'LABEL1'
`-CompoundStmt 0x99afbd0
  |-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
  | `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
  |   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-LabelStmt 0x99afbc0 'LABEL2'
    `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
      `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
        `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
          `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
LABEL1:
{
    ----____localvar____2;
  LABEL2:
    ++++++____localvar____2;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afbd0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 99afbd0 -> p 99afc10 )
CompoundStmt 0x99afbd0
|-UnaryOperator 0x99afb28 'int' lvalue prefix '--'
| `-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
|   `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-LabelStmt 0x99afbc0 'LABEL2'
  `-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
    `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
      `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
        `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
{
    ----____localvar____2;
  LABEL2:
    ++++++____localvar____2;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb28 (UnaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt UnaryOperator ( 99afb28 -> p 99afbd0 )
UnaryOperator 0x99afb28 'int' lvalue prefix '--'
`-UnaryOperator 0x99afb10 'int' lvalue prefix '--'
  `-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
----____localvar____2[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt UnaryOperator ( 99afb10 -> p 99afb28 )
UnaryOperator 0x99afb10 'int' lvalue prefix '--'
`-DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
--____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afaf4 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99afaf4 -> p 99afb10 )
DeclRefExpr 0x99afaf4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afaf4 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb28 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afbc0 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 99afbc0 -> p 99afbd0 )
LabelStmt 0x99afbc0 'LABEL2'
`-UnaryOperator 0x99afb88 'int' lvalue prefix '++'
  `-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
    `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
      `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
LABEL2:
++++++____localvar____2;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb88 (UnaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt UnaryOperator ( 99afb88 -> p 99afbc0 )
UnaryOperator 0x99afb88 'int' lvalue prefix '++'
`-UnaryOperator 0x99afb70 'int' lvalue prefix '++'
  `-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
    `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
++++++____localvar____2[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt UnaryOperator ( 99afb70 -> p 99afb88 )
UnaryOperator 0x99afb70 'int' lvalue prefix '++'
`-UnaryOperator 0x99afb58 'int' lvalue prefix '++'
  `-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
++++____localvar____2[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt UnaryOperator ( 99afb58 -> p 99afb70 )
UnaryOperator 0x99afb58 'int' lvalue prefix '++'
`-DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
++____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb3c (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99afb3c -> p 99afb58 )
DeclRefExpr 0x99afb3c 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb3c (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb88 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afbc0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afbd0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc10 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc20 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc60 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1898 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 99b1898 -> p 99b18b8 )
IfStmt 0x99b1898
|-<<<NULL>>>
|-BinaryOperator 0x99afcb0 '_Bool' '>'
| |-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
| | `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| `-IntegerLiteral 0x99afc88 'int' 9
|-CompoundStmt 0x99afcd0
| `-GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
`-IfStmt 0x99b1878
  |-<<<NULL>>>
  |-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
  | `-BinaryOperator 0x99b1660 'int' ','
  |   |-BinaryOperator 0x99afdc8 'int' ','
  |   | |-BinaryOperator 0x99afd58 'int' ','
  |   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   | | `-BinaryOperator 0x99afd40 'int' '+'
  |   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
  |   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   | |   `-IntegerLiteral 0x99afd18 'int' 1
  |   | `-BinaryOperator 0x99afdb0 'int' '-'
  |   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
  |   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |   `-IntegerLiteral 0x99afd88 'int' 1
  |   `-BinaryOperator 0x99b1648 'int' '-'
  |     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
  |     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |     `-IntegerLiteral 0x99afdf8 'int' 3
  |-CompoundStmt 0x99b16e0
  | |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
  | | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | | `-IntegerLiteral 0x99b16a0 'int' 2
  | `-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
  `-CompoundStmt 0x99b1860
    |-BinaryOperator 0x99b17f8 'int' lvalue '='
    | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    | `-BinaryOperator 0x99b17e0 'int' '-'
    |   |-BinaryOperator 0x99b17b0 'int' '+'
    |   | |-BinaryOperator 0x99b1780 'int' '-'
    |   | | |-BinaryOperator 0x99b1750 'int' '+'
    |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
    |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    |   | | | `-IntegerLiteral 0x99b1728 'int' 1
    |   | | `-IntegerLiteral 0x99b1768 'int' 1
    |   | `-IntegerLiteral 0x99b1798 'int' 1
    |   `-IntegerLiteral 0x99b17c8 'int' 1
    `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
      |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
      `-IntegerLiteral 0x99b1828 'int' 1
if (____localvar____2 > 9) {
    goto ____label____3;
} else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
    ____localvar____2 += 2;
    goto ____label____2;
} else {
    ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
    ____localvar____2 *= 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcb0 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99afcb0 -> p 99b1898 )
BinaryOperator 0x99afcb0 '_Bool' '>'
|-ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
| `-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99afc88 'int' 9
____localvar____2 > 9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afca0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 99afca0 -> p 99afcb0 )
ImplicitCastExpr 0x99afca0 'int' <LValueToRValue>
`-DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc70 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99afc70 -> p 99afca0 )
DeclRefExpr 0x99afc70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc70 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afca0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc88 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99afc88 -> p 99afcb0 )
IntegerLiteral 0x99afc88 'int' 9
9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc88 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcb0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcd0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 99afcd0 -> p 99b1898 )
CompoundStmt 0x99afcd0
`-GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
{
    goto ____label____3;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a50 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 99b1a50 -> p 99afcd0 )
GotoStmt 0x99b1a50 '____label____3' 0x99b1a00
goto ____label____3;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a50 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcd0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1878 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 99b1878 -> p 99b1898 )
IfStmt 0x99b1878
|-<<<NULL>>>
|-ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
| `-BinaryOperator 0x99b1660 'int' ','
|   |-BinaryOperator 0x99afdc8 'int' ','
|   | |-BinaryOperator 0x99afd58 'int' ','
|   | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   | | `-BinaryOperator 0x99afd40 'int' '+'
|   | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   | |   `-IntegerLiteral 0x99afd18 'int' 1
|   | `-BinaryOperator 0x99afdb0 'int' '-'
|   |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   |   `-IntegerLiteral 0x99afd88 'int' 1
|   `-BinaryOperator 0x99b1648 'int' '-'
|     |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|     `-IntegerLiteral 0x99afdf8 'int' 3
|-CompoundStmt 0x99b16e0
| |-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
| | |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | `-IntegerLiteral 0x99b16a0 'int' 2
| `-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
`-CompoundStmt 0x99b1860
  |-BinaryOperator 0x99b17f8 'int' lvalue '='
  | |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | `-BinaryOperator 0x99b17e0 'int' '-'
  |   |-BinaryOperator 0x99b17b0 'int' '+'
  |   | |-BinaryOperator 0x99b1780 'int' '-'
  |   | | |-BinaryOperator 0x99b1750 'int' '+'
  |   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
  |   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   | | | `-IntegerLiteral 0x99b1728 'int' 1
  |   | | `-IntegerLiteral 0x99b1768 'int' 1
  |   | `-IntegerLiteral 0x99b1798 'int' 1
  |   `-IntegerLiteral 0x99b17c8 'int' 1
  `-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
    |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    `-IntegerLiteral 0x99b1828 'int' 1
if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
    ____localvar____2 += 2;
    goto ____label____2;
} else {
    ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
    ____localvar____2 *= 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1678 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 99b1678 -> p 99b1878 )
ImplicitCastExpr 0x99b1678 '_Bool' <IntegralToBoolean>
`-BinaryOperator 0x99b1660 'int' ','
  |-BinaryOperator 0x99afdc8 'int' ','
  | |-BinaryOperator 0x99afd58 'int' ','
  | | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | | `-BinaryOperator 0x99afd40 'int' '+'
  | |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
  | |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | |   `-IntegerLiteral 0x99afd18 'int' 1
  | `-BinaryOperator 0x99afdb0 'int' '-'
  |   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
  |   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   `-IntegerLiteral 0x99afd88 'int' 1
  `-BinaryOperator 0x99b1648 'int' '-'
    |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
    | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
    `-IntegerLiteral 0x99afdf8 'int' 3
____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1660 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99b1660 -> p 99b1678 )
BinaryOperator 0x99b1660 'int' ','
|-BinaryOperator 0x99afdc8 'int' ','
| |-BinaryOperator 0x99afd58 'int' ','
| | |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | `-BinaryOperator 0x99afd40 'int' '+'
| |   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
| |   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| |   `-IntegerLiteral 0x99afd18 'int' 1
| `-BinaryOperator 0x99afdb0 'int' '-'
|   |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   `-IntegerLiteral 0x99afd88 'int' 1
`-BinaryOperator 0x99b1648 'int' '-'
  |-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
  | `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-IntegerLiteral 0x99afdf8 'int' 3
____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99afdc8 -> p 99b1660 )
BinaryOperator 0x99afdc8 'int' ','
|-BinaryOperator 0x99afd58 'int' ','
| |-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| `-BinaryOperator 0x99afd40 'int' '+'
|   |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   `-IntegerLiteral 0x99afd18 'int' 1
`-BinaryOperator 0x99afdb0 'int' '-'
  |-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
  | `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-IntegerLiteral 0x99afd88 'int' 1
____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99afd58 -> p 99afdc8 )
BinaryOperator 0x99afd58 'int' ','
|-DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-BinaryOperator 0x99afd40 'int' '+'
  |-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
  | `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-IntegerLiteral 0x99afd18 'int' 1
____localvar____2 , ____localvar____2 + 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afce4 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99afce4 -> p 99afd58 )
DeclRefExpr 0x99afce4 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afce4 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99afd40 -> p 99afd58 )
BinaryOperator 0x99afd40 'int' '+'
|-ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
| `-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99afd18 'int' 1
____localvar____2 + 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd30 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 99afd30 -> p 99afd40 )
ImplicitCastExpr 0x99afd30 'int' <LValueToRValue>
`-DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcfc (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99afcfc -> p 99afd30 )
DeclRefExpr 0x99afcfc 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcfc (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd30 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd18 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99afd18 -> p 99afd40 )
IntegerLiteral 0x99afd18 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd18 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99afdb0 -> p 99afdc8 )
BinaryOperator 0x99afdb0 'int' '-'
|-ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
| `-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99afd88 'int' 1
____localvar____2 - 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afda0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 99afda0 -> p 99afdb0 )
ImplicitCastExpr 0x99afda0 'int' <LValueToRValue>
`-DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd70 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99afd70 -> p 99afda0 )
DeclRefExpr 0x99afd70 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd70 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afda0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd88 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99afd88 -> p 99afdb0 )
IntegerLiteral 0x99afd88 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd88 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99b1648 -> p 99b1660 )
BinaryOperator 0x99b1648 'int' '-'
|-ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
| `-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99afdf8 'int' 3
____localvar____2 - 3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afe10 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 99afe10 -> p 99b1648 )
ImplicitCastExpr 0x99afe10 'int' <LValueToRValue>
`-DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afde0 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99afde0 -> p 99afe10 )
DeclRefExpr 0x99afde0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afde0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afe10 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afdf8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99afdf8 -> p 99b1648 )
IntegerLiteral 0x99afdf8 'int' 3
3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afdf8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1660 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1678 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16e0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 99b16e0 -> p 99b1878 )
CompoundStmt 0x99b16e0
|-CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
| |-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| `-IntegerLiteral 0x99b16a0 'int' 2
`-GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
{
    ____localvar____2 += 2;
    goto ____label____2;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16b8 (CompoundAssignOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundAssignOperator ( 99b16b8 -> p 99b16e0 )
CompoundAssignOperator 0x99b16b8 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99b16a0 'int' 2
____localvar____2 += 2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1684 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99b1684 -> p 99b16b8 )
DeclRefExpr 0x99b1684 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1684 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16a0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99b16a0 -> p 99b16b8 )
IntegerLiteral 0x99b16a0 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16a0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16b8 (CompoundAssignOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a40 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 99b1a40 -> p 99b16e0 )
GotoStmt 0x99b1a40 '____label____2' 0x99b19c0
goto ____label____2;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a40 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16e0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1860 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 99b1860 -> p 99b1878 )
CompoundStmt 0x99b1860
|-BinaryOperator 0x99b17f8 'int' lvalue '='
| |-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| `-BinaryOperator 0x99b17e0 'int' '-'
|   |-BinaryOperator 0x99b17b0 'int' '+'
|   | |-BinaryOperator 0x99b1780 'int' '-'
|   | | |-BinaryOperator 0x99b1750 'int' '+'
|   | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
|   | | | `-IntegerLiteral 0x99b1728 'int' 1
|   | | `-IntegerLiteral 0x99b1768 'int' 1
|   | `-IntegerLiteral 0x99b1798 'int' 1
|   `-IntegerLiteral 0x99b17c8 'int' 1
`-CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
  |-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-IntegerLiteral 0x99b1828 'int' 1
{
    ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
    ____localvar____2 *= 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b17f8 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99b17f8 -> p 99b1860 )
BinaryOperator 0x99b17f8 'int' lvalue '='
|-DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-BinaryOperator 0x99b17e0 'int' '-'
  |-BinaryOperator 0x99b17b0 'int' '+'
  | |-BinaryOperator 0x99b1780 'int' '-'
  | | |-BinaryOperator 0x99b1750 'int' '+'
  | | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
  | | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | | | `-IntegerLiteral 0x99b1728 'int' 1
  | | `-IntegerLiteral 0x99b1768 'int' 1
  | `-IntegerLiteral 0x99b1798 'int' 1
  `-IntegerLiteral 0x99b17c8 'int' 1
____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16f8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99b16f8 -> p 99b17f8 )
DeclRefExpr 0x99b16f8 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16f8 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99b17e0 -> p 99b17f8 )
BinaryOperator 0x99b17e0 'int' '-'
|-BinaryOperator 0x99b17b0 'int' '+'
| |-BinaryOperator 0x99b1780 'int' '-'
| | |-BinaryOperator 0x99b1750 'int' '+'
| | | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
| | | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | | `-IntegerLiteral 0x99b1728 'int' 1
| | `-IntegerLiteral 0x99b1768 'int' 1
| `-IntegerLiteral 0x99b1798 'int' 1
`-IntegerLiteral 0x99b17c8 'int' 1
____localvar____2 + 1 - 1 + 1 - 1[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99b17b0 -> p 99b17e0 )
BinaryOperator 0x99b17b0 'int' '+'
|-BinaryOperator 0x99b1780 'int' '-'
| |-BinaryOperator 0x99b1750 'int' '+'
| | |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| | `-IntegerLiteral 0x99b1728 'int' 1
| `-IntegerLiteral 0x99b1768 'int' 1
`-IntegerLiteral 0x99b1798 'int' 1
____localvar____2 + 1 - 1 + 1[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99b1780 -> p 99b17b0 )
BinaryOperator 0x99b1780 'int' '-'
|-BinaryOperator 0x99b1750 'int' '+'
| |-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
| | `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| `-IntegerLiteral 0x99b1728 'int' 1
`-IntegerLiteral 0x99b1768 'int' 1
____localvar____2 + 1 - 1[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 99b1750 -> p 99b1780 )
BinaryOperator 0x99b1750 'int' '+'
|-ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
| `-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99b1728 'int' 1
____localvar____2 + 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1740 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 99b1740 -> p 99b1750 )
ImplicitCastExpr 0x99b1740 'int' <LValueToRValue>
`-DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1710 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99b1710 -> p 99b1740 )
DeclRefExpr 0x99b1710 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1710 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1740 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1728 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99b1728 -> p 99b1750 )
IntegerLiteral 0x99b1728 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1728 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1768 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99b1768 -> p 99b1780 )
IntegerLiteral 0x99b1768 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1768 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1798 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99b1798 -> p 99b17b0 )
IntegerLiteral 0x99b1798 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1798 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b17c8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99b17c8 -> p 99b17e0 )
IntegerLiteral 0x99b17c8 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b17c8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b17f8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1840 (CompoundAssignOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundAssignOperator ( 99b1840 -> p 99b1860 )
CompoundAssignOperator 0x99b1840 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
|-DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99b1828 'int' 1
____localvar____2 *= 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1810 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99b1810 -> p 99b1840 )
DeclRefExpr 0x99b1810 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1810 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1828 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99b1828 -> p 99b1840 )
IntegerLiteral 0x99b1828 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1828 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1840 (CompoundAssignOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1860 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1878 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1898 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b18b8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b19f0 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 99b19f0 -> p 99b1a88 )
LabelStmt 0x99b19f0 '____label____2'
`-CompoundStmt 0x99b1a70
  |-UnaryOperator 0x99afab0 'int' postfix '++'
  | `-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  `-GotoStmt 0x99b1a60 '____label____1' 0x99b1980
____label____2:
{
    ____localvar____2++;
    goto ____label____1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a70 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 99b1a70 -> p 99b19f0 )
CompoundStmt 0x99b1a70
|-UnaryOperator 0x99afab0 'int' postfix '++'
| `-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-GotoStmt 0x99b1a60 '____label____1' 0x99b1980
{
    ____localvar____2++;
    goto ____label____1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afab0 (UnaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt UnaryOperator ( 99afab0 -> p 99b1a70 )
UnaryOperator 0x99afab0 'int' postfix '++'
`-DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2++[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa98 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 99afa98 -> p 99afab0 )
DeclRefExpr 0x99afa98 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
____localvar____2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa98 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afab0 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a60 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 99b1a60 -> p 99b1a70 )
GotoStmt 0x99b1a60 '____label____1' 0x99b1980
goto ____label____1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a60 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a70 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b19f0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a88 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1aa0 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1ac0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b19b0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a30 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 99b1a30 -> p 99b1ad8 )
LabelStmt 0x99b1a30 '____label____3'
`-NullStmt 0x99b1a20
____label____3:
;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a20 (NullStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt NullStmt ( 99b1a20 -> p 99b1a30 )
NullStmt 0x99b1a20
;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a20 (NullStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a30 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1ad8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1970 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1910 (ReturnStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ReturnStmt ( 99b1910 -> p 99b1920 )
ReturnStmt 0x99b1910
`-IntegerLiteral 0x99b18f8 'int' 0
return 0;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b18f8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 99b18f8 -> p 99b1910 )
IntegerLiteral 0x99b18f8 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b18f8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1910 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1920 (CompoundStmt)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 109] root stmt type CompoundStmt 99b1920 | children size 1
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af870 (Function)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 27] END LocalDeclMover
FunctionDecl 0x99af870 <_for.cpp:3:1, line:27:1> main 'int (int, char **)'
|-ParmVarDecl 0x99af7b0 <line:3:10, col:14> ____localvar____0 'int'
|-ParmVarDecl 0x99af7f0 <col:20, col:27> ____localvar____1 'char **'
`-CompoundStmt 0x99b1920 <line:4:1, line:27:1>
  |-DeclStmt 0x99b1b38 <<invalid sloc>>
  | `-VarDecl 0x99af8f0 <line:5:9, col:13> ____localvar____2 'int'
  |-LabelStmt 0x99b1970 <<invalid sloc>> '____label____0'
  | `-CompoundStmt 0x99b1ad8 <<invalid sloc>>
  |   |-BinaryOperator 0x99b1b20 <<invalid sloc>, col:17> 'int' lvalue '='
  |   | |-DeclRefExpr 0x99b1b04 <<invalid sloc>> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   | `-IntegerLiteral 0x99af920 <col:17> 'int' 0
  |   |-LabelStmt 0x99b19b0 <<invalid sloc>> '____label____1'
  |   | `-CompoundStmt 0x99b1ac0 <<invalid sloc>>
  |   |   `-IfStmt 0x99b1aa0 <<invalid sloc>>
  |   |     |-<<<NULL>>>
  |   |     |-BinaryOperator 0x99afa80 <col:20, col:44> '_Bool' '||'
  |   |     | |-BinaryOperator 0x99afa10 <col:20, col:35> '_Bool' '&&'
  |   |     | | |-BinaryOperator 0x99af988 <col:20, col:24> '_Bool' '<'
  |   |     | | | |-ImplicitCastExpr 0x99af978 <col:20> 'int' <LValueToRValue>
  |   |     | | | | `-DeclRefExpr 0x99af948 <col:20> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | | `-IntegerLiteral 0x99af960 <col:24> 'int' 13
  |   |     | | `-BinaryOperator 0x99af9f8 <col:30, col:35> '_Bool' '>'
  |   |     | |   |-ImplicitCastExpr 0x99af9e8 <col:30> 'int' <LValueToRValue>
  |   |     | |   | `-DeclRefExpr 0x99af9a0 <col:30> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |   `-UnaryOperator 0x99af9d0 <col:34, col:35> 'int' prefix '-'
  |   |     | |     `-IntegerLiteral 0x99af9b8 <col:35> 'int' 1
  |   |     | `-BinaryOperator 0x99afa68 <col:40, col:44> '_Bool' '<'
  |   |     |   |-ImplicitCastExpr 0x99afa58 <col:40> 'int' <LValueToRValue>
  |   |     |   | `-DeclRefExpr 0x99afa28 <col:40> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     |   `-IntegerLiteral 0x99afa40 <col:44> 'int' 14
  |   |     |-CompoundStmt 0x99b1a88 <<invalid sloc>>
  |   |     | |-CompoundStmt 0x99b18b8 <col:52, line:25:5>
  |   |     | | |-LabelStmt 0x99afc60 <line:6:1, line:15:9> 'LABEL0'
  |   |     | | | `-CompoundStmt 0x99afc20 <line:7:9, line:15:9>
  |   |     | | |   |-UnaryOperator 0x99afae0 <line:8:13, col:15> 'int' lvalue prefix '--'
  |   |     | | |   | `-DeclRefExpr 0x99afac4 <col:15> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | |   `-LabelStmt 0x99afc10 <line:9:1, line:14:13> 'LABEL1'
  |   |     | | |     `-CompoundStmt 0x99afbd0 <line:10:13, line:14:13>
  |   |     | | |       |-UnaryOperator 0x99afb28 <line:11:17, col:21> 'int' lvalue prefix '--'
  |   |     | | |       | `-UnaryOperator 0x99afb10 <col:19, col:21> 'int' lvalue prefix '--'
  |   |     | | |       |   `-DeclRefExpr 0x99afaf4 <col:21> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | |       `-LabelStmt 0x99afbc0 <line:12:1, line:13:23> 'LABEL2'
  |   |     | | |         `-UnaryOperator 0x99afb88 <col:17, col:23> 'int' lvalue prefix '++'
  |   |     | | |           `-UnaryOperator 0x99afb70 <col:19, col:23> 'int' lvalue prefix '++'
  |   |     | | |             `-UnaryOperator 0x99afb58 <col:21, col:23> 'int' lvalue prefix '++'
  |   |     | | |               `-DeclRefExpr 0x99afb3c <col:23> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | `-IfStmt 0x99b1898 <line:16:9, line:24:9>
  |   |     | |   |-<<<NULL>>>
  |   |     | |   |-BinaryOperator 0x99afcb0 <line:16:13, col:17> '_Bool' '>'
  |   |     | |   | |-ImplicitCastExpr 0x99afca0 <col:13> 'int' <LValueToRValue>
  |   |     | |   | | `-DeclRefExpr 0x99afc70 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |   | `-IntegerLiteral 0x99afc88 <col:17> 'int' 9
  |   |     | |   |-CompoundStmt 0x99afcd0 <col:20, line:18:9>
  |   |     | |   | `-GotoStmt 0x99b1a50 <<invalid sloc>> '____label____3' 0x99b1a00
  |   |     | |   `-IfStmt 0x99b1878 <col:16, line:24:9>
  |   |     | |     |-<<<NULL>>>
  |   |     | |     |-ImplicitCastExpr 0x99b1678 <line:18:20, col:35> '_Bool' <IntegralToBoolean>
  |   |     | |     | `-BinaryOperator 0x99b1660 <col:20, col:35> 'int' ','
  |   |     | |     |   |-BinaryOperator 0x99afdc8 <col:20, col:30> 'int' ','
  |   |     | |     |   | |-BinaryOperator 0x99afd58 <col:20, col:25> 'int' ','
  |   |     | |     |   | | |-DeclRefExpr 0x99afce4 <col:20> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |   | | `-BinaryOperator 0x99afd40 <col:23, col:25> 'int' '+'
  |   |     | |     |   | |   |-ImplicitCastExpr 0x99afd30 <col:23> 'int' <LValueToRValue>
  |   |     | |     |   | |   | `-DeclRefExpr 0x99afcfc <col:23> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |   | |   `-IntegerLiteral 0x99afd18 <col:25> 'int' 1
  |   |     | |     |   | `-BinaryOperator 0x99afdb0 <col:28, col:30> 'int' '-'
  |   |     | |     |   |   |-ImplicitCastExpr 0x99afda0 <col:28> 'int' <LValueToRValue>
  |   |     | |     |   |   | `-DeclRefExpr 0x99afd70 <col:28> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |   |   `-IntegerLiteral 0x99afd88 <col:30> 'int' 1
  |   |     | |     |   `-BinaryOperator 0x99b1648 <col:33, col:35> 'int' '-'
  |   |     | |     |     |-ImplicitCastExpr 0x99afe10 <col:33> 'int' <LValueToRValue>
  |   |     | |     |     | `-DeclRefExpr 0x99afde0 <col:33> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |     `-IntegerLiteral 0x99afdf8 <col:35> 'int' 3
  |   |     | |     |-CompoundStmt 0x99b16e0 <col:38, line:21:9>
  |   |     | |     | |-CompoundAssignOperator 0x99b16b8 <line:19:13, col:18> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
  |   |     | |     | | |-DeclRefExpr 0x99b1684 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     | | `-IntegerLiteral 0x99b16a0 <col:18> 'int' 2
  |   |     | |     | `-GotoStmt 0x99b1a40 <<invalid sloc>> '____label____2' 0x99b19c0
  |   |     | |     `-CompoundStmt 0x99b1860 <line:21:16, line:24:9>
  |   |     | |       |-BinaryOperator 0x99b17f8 <line:22:13, col:25> 'int' lvalue '='
  |   |     | |       | |-DeclRefExpr 0x99b16f8 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |       | `-BinaryOperator 0x99b17e0 <col:17, col:25> 'int' '-'
  |   |     | |       |   |-BinaryOperator 0x99b17b0 <col:17, col:23> 'int' '+'
  |   |     | |       |   | |-BinaryOperator 0x99b1780 <col:17, col:21> 'int' '-'
  |   |     | |       |   | | |-BinaryOperator 0x99b1750 <col:17, col:19> 'int' '+'
  |   |     | |       |   | | | |-ImplicitCastExpr 0x99b1740 <col:17> 'int' <LValueToRValue>
  |   |     | |       |   | | | | `-DeclRefExpr 0x99b1710 <col:17> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |       |   | | | `-IntegerLiteral 0x99b1728 <col:19> 'int' 1
  |   |     | |       |   | | `-IntegerLiteral 0x99b1768 <col:21> 'int' 1
  |   |     | |       |   | `-IntegerLiteral 0x99b1798 <col:23> 'int' 1
  |   |     | |       |   `-IntegerLiteral 0x99b17c8 <col:25> 'int' 1
  |   |     | |       `-CompoundAssignOperator 0x99b1840 <line:23:13, col:18> 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
  |   |     | |         |-DeclRefExpr 0x99b1810 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |         `-IntegerLiteral 0x99b1828 <col:18> 'int' 1
  |   |     | `-LabelStmt 0x99b19f0 <<invalid sloc>> '____label____2'
  |   |     |   `-CompoundStmt 0x99b1a70 <<invalid sloc>>
  |   |     |     |-UnaryOperator 0x99afab0 <line:5:48, col:49> 'int' postfix '++'
  |   |     |     | `-DeclRefExpr 0x99afa98 <col:48> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     |     `-GotoStmt 0x99b1a60 <<invalid sloc>> '____label____1' 0x99b1980
  |   |     `-<<<NULL>>>
  |   `-LabelStmt 0x99b1a30 <<invalid sloc>> '____label____3'
  |     `-NullStmt 0x99b1a20 <<invalid sloc>>
  `-ReturnStmt 0x99b1910 <line:26:5, col:12>
    `-IntegerLiteral 0x99b18f8 <col:12> 'int' 0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 20] decl before flatten
FunctionDecl 0x99af870 <_for.cpp:3:1, line:27:1> main 'int (int, char **)'
|-ParmVarDecl 0x99af7b0 <line:3:10, col:14> ____localvar____0 'int'
|-ParmVarDecl 0x99af7f0 <col:20, col:27> ____localvar____1 'char **'
`-CompoundStmt 0x99b1920 <line:4:1, line:27:1>
  |-DeclStmt 0x99b1b38 <<invalid sloc>>
  | `-VarDecl 0x99af8f0 <line:5:9, col:13> ____localvar____2 'int'
  |-LabelStmt 0x99b1970 <<invalid sloc>> '____label____0'
  | `-CompoundStmt 0x99b1ad8 <<invalid sloc>>
  |   |-BinaryOperator 0x99b1b20 <<invalid sloc>, col:17> 'int' lvalue '='
  |   | |-DeclRefExpr 0x99b1b04 <<invalid sloc>> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   | `-IntegerLiteral 0x99af920 <col:17> 'int' 0
  |   |-LabelStmt 0x99b19b0 <<invalid sloc>> '____label____1'
  |   | `-CompoundStmt 0x99b1ac0 <<invalid sloc>>
  |   |   `-IfStmt 0x99b1aa0 <<invalid sloc>>
  |   |     |-<<<NULL>>>
  |   |     |-BinaryOperator 0x99afa80 <col:20, col:44> '_Bool' '||'
  |   |     | |-BinaryOperator 0x99afa10 <col:20, col:35> '_Bool' '&&'
  |   |     | | |-BinaryOperator 0x99af988 <col:20, col:24> '_Bool' '<'
  |   |     | | | |-ImplicitCastExpr 0x99af978 <col:20> 'int' <LValueToRValue>
  |   |     | | | | `-DeclRefExpr 0x99af948 <col:20> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | | `-IntegerLiteral 0x99af960 <col:24> 'int' 13
  |   |     | | `-BinaryOperator 0x99af9f8 <col:30, col:35> '_Bool' '>'
  |   |     | |   |-ImplicitCastExpr 0x99af9e8 <col:30> 'int' <LValueToRValue>
  |   |     | |   | `-DeclRefExpr 0x99af9a0 <col:30> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |   `-UnaryOperator 0x99af9d0 <col:34, col:35> 'int' prefix '-'
  |   |     | |     `-IntegerLiteral 0x99af9b8 <col:35> 'int' 1
  |   |     | `-BinaryOperator 0x99afa68 <col:40, col:44> '_Bool' '<'
  |   |     |   |-ImplicitCastExpr 0x99afa58 <col:40> 'int' <LValueToRValue>
  |   |     |   | `-DeclRefExpr 0x99afa28 <col:40> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     |   `-IntegerLiteral 0x99afa40 <col:44> 'int' 14
  |   |     |-CompoundStmt 0x99b1a88 <<invalid sloc>>
  |   |     | |-CompoundStmt 0x99b18b8 <col:52, line:25:5>
  |   |     | | |-LabelStmt 0x99afc60 <line:6:1, line:15:9> 'LABEL0'
  |   |     | | | `-CompoundStmt 0x99afc20 <line:7:9, line:15:9>
  |   |     | | |   |-UnaryOperator 0x99afae0 <line:8:13, col:15> 'int' lvalue prefix '--'
  |   |     | | |   | `-DeclRefExpr 0x99afac4 <col:15> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | |   `-LabelStmt 0x99afc10 <line:9:1, line:14:13> 'LABEL1'
  |   |     | | |     `-CompoundStmt 0x99afbd0 <line:10:13, line:14:13>
  |   |     | | |       |-UnaryOperator 0x99afb28 <line:11:17, col:21> 'int' lvalue prefix '--'
  |   |     | | |       | `-UnaryOperator 0x99afb10 <col:19, col:21> 'int' lvalue prefix '--'
  |   |     | | |       |   `-DeclRefExpr 0x99afaf4 <col:21> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | |       `-LabelStmt 0x99afbc0 <line:12:1, line:13:23> 'LABEL2'
  |   |     | | |         `-UnaryOperator 0x99afb88 <col:17, col:23> 'int' lvalue prefix '++'
  |   |     | | |           `-UnaryOperator 0x99afb70 <col:19, col:23> 'int' lvalue prefix '++'
  |   |     | | |             `-UnaryOperator 0x99afb58 <col:21, col:23> 'int' lvalue prefix '++'
  |   |     | | |               `-DeclRefExpr 0x99afb3c <col:23> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | | `-IfStmt 0x99b1898 <line:16:9, line:24:9>
  |   |     | |   |-<<<NULL>>>
  |   |     | |   |-BinaryOperator 0x99afcb0 <line:16:13, col:17> '_Bool' '>'
  |   |     | |   | |-ImplicitCastExpr 0x99afca0 <col:13> 'int' <LValueToRValue>
  |   |     | |   | | `-DeclRefExpr 0x99afc70 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |   | `-IntegerLiteral 0x99afc88 <col:17> 'int' 9
  |   |     | |   |-CompoundStmt 0x99afcd0 <col:20, line:18:9>
  |   |     | |   | `-GotoStmt 0x99b1a50 <<invalid sloc>> '____label____3' 0x99b1a00
  |   |     | |   `-IfStmt 0x99b1878 <col:16, line:24:9>
  |   |     | |     |-<<<NULL>>>
  |   |     | |     |-ImplicitCastExpr 0x99b1678 <line:18:20, col:35> '_Bool' <IntegralToBoolean>
  |   |     | |     | `-BinaryOperator 0x99b1660 <col:20, col:35> 'int' ','
  |   |     | |     |   |-BinaryOperator 0x99afdc8 <col:20, col:30> 'int' ','
  |   |     | |     |   | |-BinaryOperator 0x99afd58 <col:20, col:25> 'int' ','
  |   |     | |     |   | | |-DeclRefExpr 0x99afce4 <col:20> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |   | | `-BinaryOperator 0x99afd40 <col:23, col:25> 'int' '+'
  |   |     | |     |   | |   |-ImplicitCastExpr 0x99afd30 <col:23> 'int' <LValueToRValue>
  |   |     | |     |   | |   | `-DeclRefExpr 0x99afcfc <col:23> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |   | |   `-IntegerLiteral 0x99afd18 <col:25> 'int' 1
  |   |     | |     |   | `-BinaryOperator 0x99afdb0 <col:28, col:30> 'int' '-'
  |   |     | |     |   |   |-ImplicitCastExpr 0x99afda0 <col:28> 'int' <LValueToRValue>
  |   |     | |     |   |   | `-DeclRefExpr 0x99afd70 <col:28> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |   |   `-IntegerLiteral 0x99afd88 <col:30> 'int' 1
  |   |     | |     |   `-BinaryOperator 0x99b1648 <col:33, col:35> 'int' '-'
  |   |     | |     |     |-ImplicitCastExpr 0x99afe10 <col:33> 'int' <LValueToRValue>
  |   |     | |     |     | `-DeclRefExpr 0x99afde0 <col:33> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     |     `-IntegerLiteral 0x99afdf8 <col:35> 'int' 3
  |   |     | |     |-CompoundStmt 0x99b16e0 <col:38, line:21:9>
  |   |     | |     | |-CompoundAssignOperator 0x99b16b8 <line:19:13, col:18> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
  |   |     | |     | | |-DeclRefExpr 0x99b1684 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |     | | `-IntegerLiteral 0x99b16a0 <col:18> 'int' 2
  |   |     | |     | `-GotoStmt 0x99b1a40 <<invalid sloc>> '____label____2' 0x99b19c0
  |   |     | |     `-CompoundStmt 0x99b1860 <line:21:16, line:24:9>
  |   |     | |       |-BinaryOperator 0x99b17f8 <line:22:13, col:25> 'int' lvalue '='
  |   |     | |       | |-DeclRefExpr 0x99b16f8 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |       | `-BinaryOperator 0x99b17e0 <col:17, col:25> 'int' '-'
  |   |     | |       |   |-BinaryOperator 0x99b17b0 <col:17, col:23> 'int' '+'
  |   |     | |       |   | |-BinaryOperator 0x99b1780 <col:17, col:21> 'int' '-'
  |   |     | |       |   | | |-BinaryOperator 0x99b1750 <col:17, col:19> 'int' '+'
  |   |     | |       |   | | | |-ImplicitCastExpr 0x99b1740 <col:17> 'int' <LValueToRValue>
  |   |     | |       |   | | | | `-DeclRefExpr 0x99b1710 <col:17> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |       |   | | | `-IntegerLiteral 0x99b1728 <col:19> 'int' 1
  |   |     | |       |   | | `-IntegerLiteral 0x99b1768 <col:21> 'int' 1
  |   |     | |       |   | `-IntegerLiteral 0x99b1798 <col:23> 'int' 1
  |   |     | |       |   `-IntegerLiteral 0x99b17c8 <col:25> 'int' 1
  |   |     | |       `-CompoundAssignOperator 0x99b1840 <line:23:13, col:18> 'int' lvalue '*=' ComputeLHSTy='int' ComputeResultTy='int'
  |   |     | |         |-DeclRefExpr 0x99b1810 <col:13> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     | |         `-IntegerLiteral 0x99b1828 <col:18> 'int' 1
  |   |     | `-LabelStmt 0x99b19f0 <<invalid sloc>> '____label____2'
  |   |     |   `-CompoundStmt 0x99b1a70 <<invalid sloc>>
  |   |     |     |-UnaryOperator 0x99afab0 <line:5:48, col:49> 'int' postfix '++'
  |   |     |     | `-DeclRefExpr 0x99afa98 <col:48> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  |   |     |     `-GotoStmt 0x99b1a60 <<invalid sloc>> '____label____1' 0x99b1980
  |   |     `-<<<NULL>>>
  |   `-LabelStmt 0x99b1a30 <<invalid sloc>> '____label____3'
  |     `-NullStmt 0x99b1a20 <<invalid sloc>>
  `-ReturnStmt 0x99b1910 <line:26:5, col:12>
    `-IntegerLiteral 0x99b18f8 <col:12> 'int' 0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 26] cfg before flattening

 [B15 (ENTRY)]
   Succs (1): B14

 [B1]
  ____label____3:
   1: return 0;
   Preds (2): B6 B10
   Succs (1): B0

 [B2]
  ____label____2:
   1: ____localvar____2++
   T: goto ____label____1;

   Preds (2): B3 B4
   Succs (1): B12

 [B3]
   1: ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1
   2: ____localvar____2 *= 1
   Preds (1): B5
   Succs (1): B2

 [B4]
   1: ____localvar____2 += 2
   T: goto ____label____2;

   Preds (1): B5
   Succs (1): B2

 [B5]
   1: ____localvar____2
   2: ____localvar____2 + 1
   3: ... , [B5.2]
   4: ____localvar____2 - 1
   5: ... , [B5.4]
   6: ____localvar____2 - 3
   7: ... , [B5.6]
   8: [B5.7] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B5.8]
   Preds (1): B7
   Succs (2): B4 B3

 [B6]
   T: goto ____label____3;

   Preds (1): B7
   Succs (1): B1

 [B7]
  LABEL2:
   1: ++++++____localvar____2
   2: ____localvar____2 > 9
   T: if [B7.2]
   Preds (1): B8
   Succs (2): B6 B5

 [B8]
  LABEL1:
   1: ----____localvar____2
   Preds (1): B9
   Succs (1): B7

 [B9]
  LABEL0:
   1: --____localvar____2
   Preds (2): B10 B11
   Succs (1): B8

 [B10]
   1: ____localvar____2 < 14
   T: if [B12.1] && [B11.1] || [B10.1]
   Preds (2): B11 B12
   Succs (2): B9 B1

 [B11]
   1: ____localvar____2 > -1
   T: [B12.1] && [B11.1] || ...
   Preds (1): B12
   Succs (2): B9 B10

 [B12]
  ____label____1:
   1: ____localvar____2 < 13
   T: [B12.1] && ...
   Preds (2): B13 B2
   Succs (2): B11 B10

 [B13]
  ____label____0:
   1: ____localvar____2 = 0
   Preds (1): B14
   Succs (1): B12

 [B14]
   1: int ____localvar____2;
   Preds (1): B15
   Succs (1): B13

 [B0 (EXIT)]
   Preds (1): B1

Writing '/tmp/llvm_baApde/CFG.dot'...  done. 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1920 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1b38 (DeclStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 99af8f0 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 99af8f0 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1b38 (DeclStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1970 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1ad8 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1b20 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1b04 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1b04 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af920 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af920 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1b20 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b19b0 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1ac0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1aa0 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa80 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af978 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af948 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af948 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af978 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af960 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af960 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9e8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9a0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9a0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9e8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99af9b8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99af9b8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa58 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa28 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa28 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa58 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa40 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa40 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa80 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a88 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b18b8 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc60 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc20 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afae0 (UnaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afac4 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afac4 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afae0 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc10 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afbd0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb28 (UnaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afaf4 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afaf4 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb28 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afbc0 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb88 (UnaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afb3c (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb3c (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afb88 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afbc0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afbd0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc10 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc20 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc60 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1898 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcb0 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afca0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc70 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc70 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afca0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afc88 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afc88 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcb0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcd0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a50 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a50 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcd0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1878 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1678 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1660 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afce4 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afce4 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd30 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afcfc (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afcfc (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd30 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd18 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd18 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afda0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd70 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd70 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afda0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afd88 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afd88 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afe10 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afde0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afde0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afe10 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afdf8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afdf8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1660 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1678 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16e0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16b8 (CompoundAssignOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1684 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1684 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16a0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16a0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16b8 (CompoundAssignOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a40 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a40 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16e0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1860 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b17f8 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b16f8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b16f8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1740 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1710 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1710 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1740 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1728 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1728 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1768 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1768 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1798 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1798 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b17c8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b17c8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b17f8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1840 (CompoundAssignOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1810 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1810 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1828 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1828 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1840 (CompoundAssignOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1860 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1878 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1898 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b18b8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b19f0 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a70 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afab0 (UnaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99afa98 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afa98 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99afab0 (UnaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a60 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a60 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a70 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b19f0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a88 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1aa0 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1ac0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b19b0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a30 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1a20 (NullStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a20 (NullStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1a30 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1ad8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1970 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b1910 (ReturnStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 99b18f8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b18f8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1910 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 99b1920 (CompoundStmt)
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B1.1], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 1 -> 0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B2.1], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 2 -> 12
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B3.1], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B3.2], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 3 -> 2
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B4.1], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 4 -> 2
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B5.1], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B5.2], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B5.3], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B5.4], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B5.5], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B5.6], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B5.7], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B5.8], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 5 -> 4
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 5 -> 3
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 6 -> 1
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B7.1], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B7.2], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 7 -> 6
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 7 -> 5
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B8.1], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 8 -> 7
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B9.1], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 9 -> 8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B10.1], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 10 -> 9
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 10 -> 1
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B11.1], Root is [B12.1]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 11 -> 9
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 11 -> 10
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 12 -> 11
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 12 -> 10
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 13 -> 12
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 14 -> 13
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 15 -> 14
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 39] CompoundStmt before flatten
{
    int ____localvar____2;
  ____label____0:
    {
        ____localvar____2 = 0;
      ____label____1:
        {
            if (____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14) {
                {
                  LABEL0:
                    {
                        --____localvar____2;
                      LABEL1:
                        {
                            ----____localvar____2;
                          LABEL2:
                            ++++++____localvar____2;
                        }
                    }
                    if (____localvar____2 > 9) {
                        goto ____label____3;
                    } else if (____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3) {
                        ____localvar____2 += 2;
                        goto ____label____2;
                    } else {
                        ____localvar____2 = ____localvar____2 + 1 - 1 + 1 - 1;
                        ____localvar____2 *= 1;
                    }
                }
              ____label____2:
                {
                    ____localvar____2++;
                    goto ____label____1;
                }
            }
        }
      ____label____3:
        ;
    }
    return 0;
}
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 48] DeclStmt at the beginning met.
DeclStmt 0x99b1b38
`-VarDecl 0x99af8f0 ____localvar____2 'int'
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 1 99b83e4
<NULL>CaseStmt 0x99b1c80
|-IntegerLiteral 0x99b1c68 'int' 1
|-<<<NULL>>>
`-CompoundStmt 0x99b1cb8
  |-LabelStmt 0x99b1a30 '____label____3'
  | `-NullStmt 0x99b1ca0
  `-BreakStmt 0x99b1cb0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 2 99b8448
<NULL>CaseStmt 0x99b1ce8
|-IntegerLiteral 0x99b1cd0 'int' 2
|-<<<NULL>>>
`-CompoundStmt 0x99b1d68
  |-LabelStmt 0x99b19f0 '____label____2'
  | `-NullStmt 0x99b1d08
  |-BinaryOperator 0x99b1d48 'int' lvalue '='
  | |-DeclRefExpr 0x99b1d30 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  | `-IntegerLiteral 0x99b1d18 'int' 12
  `-BreakStmt 0x99b1d60
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 3 99b84ac
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 214] Transparent Node skipped
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 4 99b8510
<NULL>CaseStmt 0x99b1da0
|-IntegerLiteral 0x99b1d88 'int' 4
|-<<<NULL>>>
`-CompoundStmt 0x99b1e10
  |-BinaryOperator 0x99b1df0 'int' lvalue '='
  | |-DeclRefExpr 0x99b1dd8 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  | `-IntegerLiteral 0x99b1dc0 'int' 2
  `-BreakStmt 0x99b1e08
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 5 99b857c
____localvar____2 , ____localvar____2 + 1 , ____localvar____2 - 1 , ____localvar____2 - 3CaseStmt 0x99b1e40
|-IntegerLiteral 0x99b1e28 'int' 5
|-<<<NULL>>>
`-CompoundStmt 0x99b1eb0
  |-BinaryOperator 0x99b1e90 'int' lvalue '='
  | |-DeclRefExpr 0x99b1e78 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  | `-IntegerLiteral 0x99b1e60 'int' 4
  `-BreakStmt 0x99b1ea8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 6 99b8628
<NULL>CaseStmt 0x99b1ee0
|-IntegerLiteral 0x99b1ec8 'int' 6
|-<<<NULL>>>
`-CompoundStmt 0x99b1f50
  |-BinaryOperator 0x99b1f30 'int' lvalue '='
  | |-DeclRefExpr 0x99b1f18 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  | `-IntegerLiteral 0x99b1f00 'int' 1
  `-BreakStmt 0x99b1f48
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 7 99b868c
____localvar____2 > 9CaseStmt 0x99b1f80
|-IntegerLiteral 0x99b1f68 'int' 7
|-<<<NULL>>>
`-CompoundStmt 0x99b2000
  |-LabelStmt 0x99afbc0 'LABEL2'
  | `-NullStmt 0x99b1fa0
  |-BinaryOperator 0x99b1fe0 'int' lvalue '='
  | |-DeclRefExpr 0x99b1fc8 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  | `-IntegerLiteral 0x99b1fb0 'int' 6
  `-BreakStmt 0x99b1ff8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 8 99b86f8
<NULL>CaseStmt 0x99b2038
|-IntegerLiteral 0x99b2020 'int' 8
|-<<<NULL>>>
`-CompoundStmt 0x99b20b8
  |-LabelStmt 0x99afc10 'LABEL1'
  | `-NullStmt 0x99b2058
  |-BinaryOperator 0x99b2098 'int' lvalue '='
  | |-DeclRefExpr 0x99b2080 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  | `-IntegerLiteral 0x99b2068 'int' 7
  `-BreakStmt 0x99b20b0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 9 99b875c
<NULL>CaseStmt 0x99b20f0
|-IntegerLiteral 0x99b20d8 'int' 9
|-<<<NULL>>>
`-CompoundStmt 0x99b2170
  |-LabelStmt 0x99afc60 'LABEL0'
  | `-NullStmt 0x99b2110
  |-BinaryOperator 0x99b2150 'int' lvalue '='
  | |-DeclRefExpr 0x99b2138 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  | `-IntegerLiteral 0x99b2120 'int' 8
  `-BreakStmt 0x99b2168
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 10 99b87c0
____localvar____2 < 13 && ____localvar____2 > -1 || ____localvar____2 < 14CaseStmt 0x99b21a8
|-IntegerLiteral 0x99b2190 'int' 10
|-<<<NULL>>>
`-CompoundStmt 0x99b21d0
  `-BreakStmt 0x99b21c8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 11 99b8884
____localvar____2 < 13 && ____localvar____2 > -1CaseStmt 0x99b2200
|-IntegerLiteral 0x99b21e8 'int' 11
|-<<<NULL>>>
`-CompoundStmt 0x99b2228
  `-BreakStmt 0x99b2220
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 12 99b88f8
____localvar____2 < 13[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____2 < 13[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 257] terminator cond stmt met: BinaryOperator
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 288] Terminated by BinaryOperator:
BinaryOperator 0x99af988 '_Bool' '<'
|-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
| `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-IntegerLiteral 0x99af960 'int' 13
BinaryOperator 0x99af9f8 '_Bool' '>'
|-ImplicitCastExpr 0x99af9e8 'int' <LValueToRValue>
| `-DeclRefExpr 0x99af9a0 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
`-UnaryOperator 0x99af9d0 'int' prefix '-'
  `-IntegerLiteral 0x99af9b8 'int' 1
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 292] Built IfStmt:
IfStmt 0x99b2288
|-<<<NULL>>>
|-BinaryOperator 0x99af988 '_Bool' '<'
| |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
| | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
| `-IntegerLiteral 0x99af960 'int' 13
|-CompoundStmt 0x99b2338
| `-BinaryOperator 0x99b22d8 'int' lvalue '='
|   |-DeclRefExpr 0x99b22c0 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
|   `-IntegerLiteral 0x99b22a8 'int' 11
`-CompoundStmt 0x99b2350
  `-BinaryOperator 0x99b2320 'int' lvalue '='
    |-DeclRefExpr 0x99b2308 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
    `-IntegerLiteral 0x99b22f0 'int' 10
CaseStmt 0x99b2258
|-IntegerLiteral 0x99b2240 'int' 12
|-<<<NULL>>>
`-CompoundStmt 0x99b23b8
  |-LabelStmt 0x99b19b0 '____label____1'
  | `-NullStmt 0x99b2278
  |-IfStmt 0x99b2288
  | |-<<<NULL>>>
  | |-BinaryOperator 0x99af988 '_Bool' '<'
  | | |-ImplicitCastExpr 0x99af978 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x99af948 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | | `-IntegerLiteral 0x99af960 'int' 13
  | |-CompoundStmt 0x99b2338
  | | `-BinaryOperator 0x99b22d8 'int' lvalue '='
  | |   |-DeclRefExpr 0x99b22c0 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  | |   `-IntegerLiteral 0x99b22a8 'int' 11
  | `-CompoundStmt 0x99b2350
  |   `-BinaryOperator 0x99b2320 'int' lvalue '='
  |     |-DeclRefExpr 0x99b2308 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  |     `-IntegerLiteral 0x99b22f0 'int' 10
  |-BinaryOperator 0x99b2398 'int' lvalue '='
  | |-DeclRefExpr 0x99b2380 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  | `-IntegerLiteral 0x99b2368 'int' 11
  `-BreakStmt 0x99b23b0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 13 99b896c
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____2 = 0CaseStmt 0x99b23f0
|-IntegerLiteral 0x99b23d8 'int' 13
|-<<<NULL>>>
`-CompoundStmt 0x99b2470
  |-LabelStmt 0x99b1970 '____label____0'
  | `-NullStmt 0x99b2410
  |-BinaryOperator 0x99b1b20 'int' lvalue '='
  | |-DeclRefExpr 0x99b1b04 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
  | `-IntegerLiteral 0x99af920 'int' 0
  |-BinaryOperator 0x99b2450 'int' lvalue '='
  | |-DeclRefExpr 0x99b2438 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  | `-IntegerLiteral 0x99b2420 'int' 12
  `-BreakStmt 0x99b2468
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 14 99b89d0
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
CaseStmt 0x99b24a8
|-IntegerLiteral 0x99b2490 'int' 14
|-<<<NULL>>>
`-CompoundStmt 0x99b2518
  |-BinaryOperator 0x99b24f8 'int' lvalue '='
  | |-DeclRefExpr 0x99b24e0 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
  | `-IntegerLiteral 0x99b24c8 'int' 13
  `-BreakStmt 0x99b2510
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 85] New switch body create
switch (int ____localvar____3 = 14) {
  case 1:
    {
      ____label____3:
        ;
        break;
    }
  case 2:
    {
      ____label____2:
        ;
        ____localvar____3 = 12;
        break;
    }
  case 4:
    {
        ____localvar____3 = 2;
        break;
    }
  case 5:
    {
        ____localvar____3 = 4;
        break;
    }
  case 6:
    {
        ____localvar____3 = 1;
        break;
    }
  case 7:
    {
      LABEL2:
        ;
        ____localvar____3 = 6;
        break;
    }
  case 8:
    {
      LABEL1:
        ;
        ____localvar____3 = 7;
        break;
    }
  case 9:
    {
      LABEL0:
        ;
        ____localvar____3 = 8;
        break;
    }
  case 10:
    {
        break;
    }
  case 11:
    {
        break;
    }
  case 12:
    {
      ____label____1:
        ;
        if (____localvar____2 < 13) {
            ____localvar____3 = 11;
        } else {
            ____localvar____3 = 10;
        }
        ____localvar____3 = 11;
        break;
    }
  case 13:
    {
      ____label____0:
        ;
        ____localvar____2 = 0;
        ____localvar____3 = 12;
        break;
    }
  case 14:
    {
        ____localvar____3 = 13;
        break;
    }
}
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 89] New function body created.
{
    int ____localvar____2;
    int ____localvar____3 = 14;
    while (____localvar____3 != 0)
        switch (int ____localvar____3 = 14) {
          case 1:
            {
              ____label____3:
                ;
                break;
            }
          case 2:
            {
              ____label____2:
                ;
                ____localvar____3 = 12;
                break;
            }
          case 4:
            {
                ____localvar____3 = 2;
                break;
            }
          case 5:
            {
                ____localvar____3 = 4;
                break;
            }
          case 6:
            {
                ____localvar____3 = 1;
                break;
            }
          case 7:
            {
              LABEL2:
                ;
                ____localvar____3 = 6;
                break;
            }
          case 8:
            {
              LABEL1:
                ;
                ____localvar____3 = 7;
                break;
            }
          case 9:
            {
              LABEL0:
                ;
                ____localvar____3 = 8;
                break;
            }
          case 10:
            {
                break;
            }
          case 11:
            {
                break;
            }
          case 12:
            {
              ____label____1:
                ;
                if (____localvar____2 < 13) {
                    ____localvar____3 = 11;
                } else {
                    ____localvar____3 = 10;
                }
                ____localvar____3 = 11;
                break;
            }
          case 13:
            {
              ____label____0:
                ;
                ____localvar____2 = 0;
                ____localvar____3 = 12;
                break;
            }
          case 14:
            {
                ____localvar____3 = 13;
                break;
            }
        }
}
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 92] decl after flatten
FunctionDecl 0x99af870 <_for.cpp:3:1, line:27:1> main 'int (int, char **)'
|-ParmVarDecl 0x99af7b0 <line:3:10, col:14> ____localvar____0 'int'
|-ParmVarDecl 0x99af7f0 <col:20, col:27> ____localvar____1 'char **'
`-CompoundStmt 0x99b1920 <line:4:1, line:27:1>
  |-DeclStmt 0x99b1b38 <<invalid sloc>>
  | `-VarDecl 0x99af8f0 <line:5:9, col:13> ____localvar____2 'int'
  |-DeclStmt 0x99b1ba0 <<invalid sloc>>
  | `-VarDecl 0x99b1b70 <<invalid sloc>> ____localvar____3 'int'
  |   `-IntegerLiteral 0x99b1b58 <<invalid sloc>> 'int' 14
  `-WhileStmt 0x99b1c08 <<invalid sloc>>
    |-<<<NULL>>>
    |-BinaryOperator 0x99b1bf0 <<invalid sloc>> '_Bool' '!='
    | |-ImplicitCastExpr 0x99b1be0 <<invalid sloc>> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x99b1bc8 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
    | `-IntegerLiteral 0x99b1bb0 <<invalid sloc>> 'int' 0
    `-SwitchStmt 0x99b1c38 <<invalid sloc>>
      |-DeclStmt 0x99b1c58 <<invalid sloc>>
      | `-VarDecl 0x99b1b70 <<invalid sloc>> ____localvar____3 'int'
      |   `-IntegerLiteral 0x99b1b58 <<invalid sloc>> 'int' 14
      |-DeclRefExpr 0x99b1c1c <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
      `-CompoundStmt 0x99b2530 <<invalid sloc>>
        |-CaseStmt 0x99b1c80 <<invalid sloc>>
        | |-IntegerLiteral 0x99b1c68 <<invalid sloc>> 'int' 1
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b1cb8 <<invalid sloc>>
        |   |-LabelStmt 0x99b1a30 <<invalid sloc>> '____label____3'
        |   | `-NullStmt 0x99b1ca0 <<invalid sloc>>
        |   `-BreakStmt 0x99b1cb0 <<invalid sloc>>
        |-CaseStmt 0x99b1ce8 <<invalid sloc>>
        | |-IntegerLiteral 0x99b1cd0 <<invalid sloc>> 'int' 2
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b1d68 <<invalid sloc>>
        |   |-LabelStmt 0x99b19f0 <<invalid sloc>> '____label____2'
        |   | `-NullStmt 0x99b1d08 <<invalid sloc>>
        |   |-BinaryOperator 0x99b1d48 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x99b1d30 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
        |   | `-IntegerLiteral 0x99b1d18 <<invalid sloc>> 'int' 12
        |   `-BreakStmt 0x99b1d60 <<invalid sloc>>
        |-CaseStmt 0x99b1da0 <<invalid sloc>>
        | |-IntegerLiteral 0x99b1d88 <<invalid sloc>> 'int' 4
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b1e10 <<invalid sloc>>
        |   |-BinaryOperator 0x99b1df0 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x99b1dd8 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
        |   | `-IntegerLiteral 0x99b1dc0 <<invalid sloc>> 'int' 2
        |   `-BreakStmt 0x99b1e08 <<invalid sloc>>
        |-CaseStmt 0x99b1e40 <<invalid sloc>>
        | |-IntegerLiteral 0x99b1e28 <<invalid sloc>> 'int' 5
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b1eb0 <<invalid sloc>>
        |   |-BinaryOperator 0x99b1e90 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x99b1e78 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
        |   | `-IntegerLiteral 0x99b1e60 <<invalid sloc>> 'int' 4
        |   `-BreakStmt 0x99b1ea8 <<invalid sloc>>
        |-CaseStmt 0x99b1ee0 <<invalid sloc>>
        | |-IntegerLiteral 0x99b1ec8 <<invalid sloc>> 'int' 6
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b1f50 <<invalid sloc>>
        |   |-BinaryOperator 0x99b1f30 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x99b1f18 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
        |   | `-IntegerLiteral 0x99b1f00 <<invalid sloc>> 'int' 1
        |   `-BreakStmt 0x99b1f48 <<invalid sloc>>
        |-CaseStmt 0x99b1f80 <<invalid sloc>>
        | |-IntegerLiteral 0x99b1f68 <<invalid sloc>> 'int' 7
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b2000 <<invalid sloc>>
        |   |-LabelStmt 0x99afbc0 <line:12:1, <invalid sloc>> 'LABEL2'
        |   | `-NullStmt 0x99b1fa0 <<invalid sloc>>
        |   |-BinaryOperator 0x99b1fe0 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x99b1fc8 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
        |   | `-IntegerLiteral 0x99b1fb0 <<invalid sloc>> 'int' 6
        |   `-BreakStmt 0x99b1ff8 <<invalid sloc>>
        |-CaseStmt 0x99b2038 <<invalid sloc>>
        | |-IntegerLiteral 0x99b2020 <<invalid sloc>> 'int' 8
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b20b8 <<invalid sloc>>
        |   |-LabelStmt 0x99afc10 <line:9:1, <invalid sloc>> 'LABEL1'
        |   | `-NullStmt 0x99b2058 <<invalid sloc>>
        |   |-BinaryOperator 0x99b2098 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x99b2080 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
        |   | `-IntegerLiteral 0x99b2068 <<invalid sloc>> 'int' 7
        |   `-BreakStmt 0x99b20b0 <<invalid sloc>>
        |-CaseStmt 0x99b20f0 <<invalid sloc>>
        | |-IntegerLiteral 0x99b20d8 <<invalid sloc>> 'int' 9
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b2170 <<invalid sloc>>
        |   |-LabelStmt 0x99afc60 <line:6:1, <invalid sloc>> 'LABEL0'
        |   | `-NullStmt 0x99b2110 <<invalid sloc>>
        |   |-BinaryOperator 0x99b2150 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x99b2138 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
        |   | `-IntegerLiteral 0x99b2120 <<invalid sloc>> 'int' 8
        |   `-BreakStmt 0x99b2168 <<invalid sloc>>
        |-CaseStmt 0x99b21a8 <<invalid sloc>>
        | |-IntegerLiteral 0x99b2190 <<invalid sloc>> 'int' 10
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b21d0 <<invalid sloc>>
        |   `-BreakStmt 0x99b21c8 <<invalid sloc>>
        |-CaseStmt 0x99b2200 <<invalid sloc>>
        | |-IntegerLiteral 0x99b21e8 <<invalid sloc>> 'int' 11
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b2228 <<invalid sloc>>
        |   `-BreakStmt 0x99b2220 <<invalid sloc>>
        |-CaseStmt 0x99b2258 <<invalid sloc>>
        | |-IntegerLiteral 0x99b2240 <<invalid sloc>> 'int' 12
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b23b8 <<invalid sloc>>
        |   |-LabelStmt 0x99b19b0 <<invalid sloc>> '____label____1'
        |   | `-NullStmt 0x99b2278 <<invalid sloc>>
        |   |-IfStmt 0x99b2288 <<invalid sloc>>
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x99af988 <line:5:20, col:24> '_Bool' '<'
        |   | | |-ImplicitCastExpr 0x99af978 <col:20> 'int' <LValueToRValue>
        |   | | | `-DeclRefExpr 0x99af948 <col:20> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
        |   | | `-IntegerLiteral 0x99af960 <col:24> 'int' 13
        |   | |-CompoundStmt 0x99b2338 <<invalid sloc>>
        |   | | `-BinaryOperator 0x99b22d8 <<invalid sloc>> 'int' lvalue '='
        |   | |   |-DeclRefExpr 0x99b22c0 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
        |   | |   `-IntegerLiteral 0x99b22a8 <<invalid sloc>> 'int' 11
        |   | `-CompoundStmt 0x99b2350 <<invalid sloc>>
        |   |   `-BinaryOperator 0x99b2320 <<invalid sloc>> 'int' lvalue '='
        |   |     |-DeclRefExpr 0x99b2308 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
        |   |     `-IntegerLiteral 0x99b22f0 <<invalid sloc>> 'int' 10
        |   |-BinaryOperator 0x99b2398 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x99b2380 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
        |   | `-IntegerLiteral 0x99b2368 <<invalid sloc>> 'int' 11
        |   `-BreakStmt 0x99b23b0 <<invalid sloc>>
        |-CaseStmt 0x99b23f0 <<invalid sloc>>
        | |-IntegerLiteral 0x99b23d8 <<invalid sloc>> 'int' 13
        | |-<<<NULL>>>
        | `-CompoundStmt 0x99b2470 <<invalid sloc>>
        |   |-LabelStmt 0x99b1970 <<invalid sloc>> '____label____0'
        |   | `-NullStmt 0x99b2410 <<invalid sloc>>
        |   |-BinaryOperator 0x99b1b20 <<invalid sloc>, col:17> 'int' lvalue '='
        |   | |-DeclRefExpr 0x99b1b04 <<invalid sloc>> 'int' lvalue Var 0x99af8f0 '____localvar____2' 'int'
        |   | `-IntegerLiteral 0x99af920 <col:17> 'int' 0
        |   |-BinaryOperator 0x99b2450 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x99b2438 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
        |   | `-IntegerLiteral 0x99b2420 <<invalid sloc>> 'int' 12
        |   `-BreakStmt 0x99b2468 <<invalid sloc>>
        `-CaseStmt 0x99b24a8 <<invalid sloc>>
          |-IntegerLiteral 0x99b2490 <<invalid sloc>> 'int' 14
          |-<<<NULL>>>
          `-CompoundStmt 0x99b2518 <<invalid sloc>>
            |-BinaryOperator 0x99b24f8 <<invalid sloc>> 'int' lvalue '='
            | |-DeclRefExpr 0x99b24e0 <<invalid sloc>> 'int' lvalue Var 0x99b1b70 '____localvar____3' 'int'
            | `-IntegerLiteral 0x99b24c8 <<invalid sloc>> 'int' 13
            `-BreakStmt 0x99b2510 <<invalid sloc>>
[DEBUG][alg/SimplePrinter.cpp - line 7] alg started.
[DEBUG][alg/SimplePrinterConsumer.cpp - line 47] PrintingPolicy: 0 0 0 0 0
int main(int ____localvar____0, char **____localvar____1) {
    int ____localvar____2;
    int ____localvar____3 = 14;
    while (____localvar____3 != 0)
        switch (int ____localvar____3 = 14) {
          case 1:
            {
              ____label____3:
                ;
                break;
            }
          case 2:
            {
              ____label____2:
                ;
                ____localvar____3 = 12;
                break;
            }
          case 4:
            {
                ____localvar____3 = 2;
                break;
            }
          case 5:
            {
                ____localvar____3 = 4;
                break;
            }
          case 6:
            {
                ____localvar____3 = 1;
                break;
            }
          case 7:
            {
              LABEL2:
                ;
                ____localvar____3 = 6;
                break;
            }
          case 8:
            {
              LABEL1:
                ;
                ____localvar____3 = 7;
                break;
            }
          case 9:
            {
              LABEL0:
                ;
                ____localvar____3 = 8;
                break;
            }
          case 10:
            {
                break;
            }
          case 11:
            {
                break;
            }
          case 12:
            {
              ____label____1:
                ;
                if (____localvar____2 < 13) {
                    ____localvar____3 = 11;
                } else {
                    ____localvar____3 = 10;
                }
                ____localvar____3 = 11;
                break;
            }
          case 13:
            {
              ____label____0:
                ;
                ____localvar____2 = 0;
                ____localvar____3 = 12;
                break;
            }
          case 14:
            {
                ____localvar____3 = 13;
                break;
            }
        }
}

;
[0;1;33m
 [B28 (ENTRY)]
[0m[0;35m   Succs [0m(1):[0;35m B27[0m
[0;1;33m
 [B1]
[0m[0;34m   Preds [0m(14):[0;34m B3 B4 B6 B11 B12 B13 B15 B17
      B19 B20 B21 B22 B24 B2[0m
[0;35m   Succs [0m(1):[0;35m B26[0m
[0;1;33m
 [B2]
[0m   1: 14
   2: int ____localvar____3 = 14;
   3: ____localvar____3
[0;32m   T: switch [B2.3]
[0m[0;34m   Preds [0m(1):[0;34m B26[0m
[0;35m   Succs [0m(14):[0;35m B3 B5 B10 B11 B12 B14 B16 B18
     B19 B20 B21 B23 B25 B1[0m
[0;1;33m
 [B3]
[0m  case 14:
   1: ____localvar____3 = 13
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B4]
[0m  ____label____0:
   1: ____localvar____2 = 0
   2: ____localvar____3 = 12
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B5[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B5]
[0m  case 13:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B4[0m
[0;1;33m
 [B6]
[0m   1: ____localvar____3 = 11
[0;32m   T: break;

[0m[0;34m   Preds [0m(2):[0;34m B7 B8[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B7]
[0m   1: ____localvar____3 = 10
[0;34m   Preds [0m(1):[0;34m B9[0m
[0;35m   Succs [0m(1):[0;35m B6[0m
[0;1;33m
 [B8]
[0m   1: ____localvar____3 = 11
[0;34m   Preds [0m(1):[0;34m B9[0m
[0;35m   Succs [0m(1):[0;35m B6[0m
[0;1;33m
 [B9]
[0m  ____label____1:
   1: ____localvar____2 < 13
[0;32m   T: if [B9.1]
[0m[0;34m   Preds [0m(1):[0;34m B10[0m
[0;35m   Succs [0m(2):[0;35m B8 B7[0m
[0;1;33m
 [B10]
[0m  case 12:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B9[0m
[0;1;33m
 [B11]
[0m  case 11:
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B12]
[0m  case 10:
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B13]
[0m  LABEL0:
   1: ____localvar____3 = 8
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B14[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B14]
[0m  case 9:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B13[0m
[0;1;33m
 [B15]
[0m  LABEL1:
   1: ____localvar____3 = 7
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B16[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B16]
[0m  case 8:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B15[0m
[0;1;33m
 [B17]
[0m  LABEL2:
   1: ____localvar____3 = 6
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B18[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B18]
[0m  case 7:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B17[0m
[0;1;33m
 [B19]
[0m  case 6:
   1: ____localvar____3 = 1
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B20]
[0m  case 5:
   1: ____localvar____3 = 4
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B21]
[0m  case 4:
   1: ____localvar____3 = 2
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B22]
[0m  ____label____2:
   1: ____localvar____3 = 12
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B23[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B23]
[0m  case 2:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B22[0m
[0;1;33m
 [B24]
[0m  ____label____3:
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B25[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B25]
[0m  case 1:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B24[0m
[0;1;33m
 [B26]
[0m   1: ____localvar____3 != 0
[0;32m   T: while [B26.1]
[0m[0;34m   Preds [0m(2):[0;34m B1 B27[0m
[0;35m   Succs [0m(2):[0;35m B2 B0[0m
[0;1;33m
 [B27]
[0m   1: int ____localvar____2;
   2: int ____localvar____3 = 14;
[0;34m   Preds [0m(1):[0;34m B28[0m
[0;35m   Succs [0m(1):[0;35m B26[0m
[0;1;33m
 [B0 (EXIT)]
[0m[0;34m   Preds [0m(1):[0;34m B26[0m

Writing '/tmp/llvm_njTsNh/CFG.dot'...  done. 
[DEBUG][alg/SimplePrinter.cpp - line 26] alg finished.
[DEBUG][ResourceManager.cpp - line 134] src _.__for.cpp rewrited.
done2
