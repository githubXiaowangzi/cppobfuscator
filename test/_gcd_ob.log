done1
[DEBUG][res/OptionTable.cpp - line 8] argc = 2
[DEBUG][res/OptionTable.cpp - line 38] non-option argvs caught: [_gcd_ob.cpp]
ignoring nonexistent directory "/usr/include/c++/4.6/i486-linux-gnu"
#include "..." search starts here:
#include <...> search starts here:
 /usr/local/lib/clang/3.3/include
 /usr/local/include
 /usr/include
 /usr/include/linux
 /usr/include/c++/4.6
 /usr/include/c++/4.6/i686-linux-gnu
 /usr/include/c++/4.6/backward
 /usr/include/i386-linux-gnu
End of search list.
_gcd_ob.cpp:40:1: warning: control may reach end of non-void function
}
^
[DEBUG][alg/InitParseConsumer.h - line 30] +decl, size = 1
[DEBUG][alg/InitParseConsumer.h - line 30] +decl, size = 2
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 968a9d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 968aa00 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 968ab30 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 96d27c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96d2850 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96d2890 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96d28e0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96d2910 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96d2950 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96d2990 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96d29d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 96d2a00 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96d2cf0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96d2d50 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 96d2d80 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 96ed4f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 96ed5c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 96efcf0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 96efe40 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 96effd0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 96f39c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 96fd070 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9701680 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9703a90 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9703d80 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 97160b0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9722fb0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 972a4f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 972a8c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9731520 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9735a40 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 973d2c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9741200 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 974ef30 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9757140 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 97571c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9757270 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9761120 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 976c990 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9770b40 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9777660 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9777a10 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9777da0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 977b0e0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9780ba0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9783940 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9783af0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9783ee0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 9786ac0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 9787000 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 978f060 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 978f1e0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 978f3a0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 978f8f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 978fb10 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9790ea0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791110 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791150 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791190 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97911d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791210 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791250 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791290 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97912d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791310 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791350 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791390 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97913d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791410 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791450 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97914a0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97914e0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791520 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791560 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791590 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97915d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791610 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791650 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97916a0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97916e0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 9791710 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791870 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97918c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791900 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791930 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791970 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97919b0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97919f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791a30 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791a70 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791ab0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791af0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791b30 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791b70 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791bb0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9791bf0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96e7390 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96e73d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96e7400 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96e7440 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96e7470 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96e74b0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96e7500 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96e7580 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96e75c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96e7600 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 96e7640 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 96e7670 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 97ab610 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 97abb50 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97b4130 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97b4160 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97b4320 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97b4350 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 97b44b0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97c27b0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97c2920 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97c2950 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97c2bb0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 97c2bf0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 97c30c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 97c6c90 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97d8da0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97d8dd0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97d8fa0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97d8fe0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97d91b0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97d91f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dbac0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97dbb00 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dbca0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97dbce0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dc1e0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97dc220 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dc3c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dc410 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dc450 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97dcd00 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dd2c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97dd300 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dd4a0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dd4f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97dd520 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dd6f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97dd730 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dd8d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 97dd960 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 97dd990 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 97dda80 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 97de6e0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 97de890 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 97de9b0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 97deb30 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 97dec20 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 97ded10 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl CXXRecord 97dee00 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 97df150 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 97df240 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 97df330 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 97fac80 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 982db50 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 982db80 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 982dbb0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 982dbe0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 982dc10 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 982dc40 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 982dc80 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 982dd70 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 982df80 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 982e110 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 982f370 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 982f5d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 982f7d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 982f990 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 982fac0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 982fc40 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 982fe00 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 982ff80 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9830160 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9830320 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9830550 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98306e0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98308b0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9830a90 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9830c20 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9830e00 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9830fd0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98311f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9831390 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9831580 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9831710 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98318f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9831ad0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9831c40 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9831ff0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98322c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98324e0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9832700 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9832910 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9832ab0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9832d30 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9833130 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9833380 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9833550 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9833790 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98339f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9833ca0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9833f30 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9834260 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9834540 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9834820 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98349d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9834be0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9834dd0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9834fc0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9835190 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98353d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9835690 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9835940 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9835be0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9835e00 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 9835f60 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9835fb0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98361a0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98362d0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 9837ba0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9839700 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9844cb0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 984d690 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 984da60 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9852f70 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9874df0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9879410 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 98a2000 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 98c2450 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9913250 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 991b020 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 99222f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 992ccd0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 993cc50 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9948470 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Typedef 995b200 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Enum 995b230 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 996a6f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl LinkageSpec 996b4c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 996cc80 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 996d4c0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 996de80 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 997dc80 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9862ad0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 999c690 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 99b1a60 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 99c7830 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 99ef780 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 99f4510 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 99feef0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9a08010 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9a22eb0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9a383f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Namespace 9a625b0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9a62aa0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 48] enter FuncDecl
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 9] START VarRenamer
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62aa0 (Function)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: Function
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a629e0 (ParmVar)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: ParmVar
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 30]  ---- name = ____localvar____0 | type = double | desugared type = double | const = 0 | extern = 0 | POD = 1
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a629e0 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62a20 (ParmVar)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: ParmVar
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 30]  ---- name = ____localvar____1 | type = int | desugared type = int | const = 0 | extern = 0 | POD = 1
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62a20 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a633b0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62b50 (DeclStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62b20 (Var)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: Var
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 30]  ---- name = ____localvar____2 | type = double | desugared type = double | const = 0 | extern = 0 | POD = 1
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62b20 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62b50 (DeclStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62bb8 (DeclStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62b70 (Var)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: Var
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 30]  ---- name = ____localvar____3 | type = int | desugared type = int | const = 0 | extern = 0 | POD = 1
5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ba0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ba0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62b70 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62bb8 (DeclStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63398 (WhileStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c08 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62bf8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62bc8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62bc8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62bf8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62be0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62be0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c08 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c48 (SwitchStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c38 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c20 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c20 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c38 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63370 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c80 (CaseStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c68 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c68 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d58 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d48 (ReturnStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d30 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62cd0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ca0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ca0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62cd0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ce0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62cb8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62cb8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ce0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d20 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d08 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d08 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d20 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d30 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d48 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d58 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c80 (CaseStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d88 (CaseStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d70 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d70 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e20 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e10 (ReturnStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62df8 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62dd8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62da8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62da8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62dd8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62de8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62dc0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62dc0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62de8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62df8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e10 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e20 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d88 (CaseStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e50 (CaseStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e38 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e38 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63138 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fb0 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e70 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e70 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f78 (CallExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f68 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f30 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f30 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f68 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fa0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ebc (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ebc (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fa0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f18 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f08 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ed4 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ed4 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f08 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ef0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ef0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f18 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f78 (CallExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fb0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63110 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63038 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ff8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fc8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fc8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ff8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fe0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fe0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63020 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63020 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63038 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63098 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63080 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63050 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63050 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63068 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63068 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63080 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63098 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630f8 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630e0 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630ac (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630ac (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630c8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630c8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630e0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630f8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63110 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63130 (BreakStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63130 (BreakStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63138 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e50 (CaseStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63170 (CaseStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63158 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63158 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631c8 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631b8 (ReturnStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631a8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63190 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63190 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631a8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631b8 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631c8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63170 (CaseStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631f8 (CaseStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631e0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631e0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63358 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63330 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63258 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63248 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63218 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63218 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63248 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63230 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63230 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63258 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632b8 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632a0 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63270 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63270 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63288 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63288 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632a0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632b8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63318 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63300 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632cc (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632cc (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632e8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632e8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63300 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63318 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63330 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63350 (BreakStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63350 (BreakStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63358 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631f8 (CaseStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63370 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c48 (SwitchStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63398 (WhileStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a633b0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62aa0 (Function)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 11] END VarRenamer
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 6] START StmtPretransformer
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62aa0 (Function)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 9a62aa0(Function) Ctx 968a6f4
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a629e0 (ParmVar)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 9a629e0(ParmVar) Ctx 9a62ac4
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a629e0 (ParmVar)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62a20 (ParmVar)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 9a62a20(ParmVar) Ctx 9a62ac4
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62a20 (ParmVar)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a633b0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a633b0 98a9838 98a9838
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62b50 (DeclStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclStmt 9a62b50 9891ac8 9891ac8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62b20 (Var)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 9a62b20(Var) Ctx 9a62ac4
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62b20 (Var)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62b50 (DeclStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclStmt, start transform
DeclStmt 0x9a62b50
`-VarDecl 0x9a62b20 ____localvar____7 'double'
double ____localvar____7;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62bb8 (DeclStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclStmt 9a62bb8 9886880 9886880
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62b70 (Var)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 9a62b70(Var) Ctx 9a62ac4
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ba0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a62ba0 96def28 96def28
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ba0 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a62ba0 'int' 5
5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62b70 (Var)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62bb8 (DeclStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclStmt, start transform
DeclStmt 0x9a62bb8
`-VarDecl 0x9a62b70 ____localvar____8 'int'
  `-IntegerLiteral 0x9a62ba0 'int' 5
int ____localvar____8 = 5;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63398 (WhileStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt WhileStmt 9a63398 988bf50 988bf50
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c08 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a62c08 96b8370 96b8370
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62bf8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a62bf8 989b8b0 989b8b0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62bc8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62bc8 973dda0 973dda0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62bc8 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62bf8 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
`-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62be0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a62be0 96baef8 96baef8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62be0 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a62be0 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c08 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a62c08 '_Bool' '!='
|-ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-IntegerLiteral 0x9a62be0 'int' 0
____localvar____8 != 0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c48 (SwitchStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt SwitchStmt 9a62c48 9887690 9887690
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c38 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a62c38 96bb6e8 96bb6e8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c20 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62c20 9744b78 9744b78
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c20 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c38 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
`-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63370 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a63370 9716f90 9716f90
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c80 (CaseStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CaseStmt 9a62c80 96a4700 96a4700
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c68 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a62c68 97423f0 97423f0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c68 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a62c68 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d58 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a62d58 9743f90 9743f90
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d48 (ReturnStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ReturnStmt 9a62d48 96a0c78 96a0c78
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d30 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a62d30 96bcc88 96bcc88
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a62cf0 97b5e10 97b5e10
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62cd0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a62cd0 966c618 966c618
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ca0 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62ca0 96e3df8 96e3df8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ca0 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62cd0 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ce0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a62ce0 966c8d8 966c8d8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62cb8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62cb8 98a3348 98a3348
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62cb8 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ce0 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d20 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a62d20 988c0a0 988c0a0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d08 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62d08 9843498 9843498
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d08 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
____localvar____5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d20 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
____localvar____5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d30 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a62d30 'double' '*'
|-BinaryOperator 0x9a62cf0 'double' '*'
| |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
| | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
|   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
`-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
  `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
____localvar____7 * ____localvar____7 * ____localvar____5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d48 (ReturnStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ReturnStmt, start transform
ReturnStmt 0x9a62d48
`-BinaryOperator 0x9a62d30 'double' '*'
  |-BinaryOperator 0x9a62cf0 'double' '*'
  | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
  | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
  |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
    `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
return ____localvar____7 * ____localvar____7 * ____localvar____5;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d58 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a62d58
`-ReturnStmt 0x9a62d48
  `-BinaryOperator 0x9a62d30 'double' '*'
    |-BinaryOperator 0x9a62cf0 'double' '*'
    | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
    | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
    |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
      `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
{
    return ____localvar____7 * ____localvar____7 * ____localvar____5;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c80 (CaseStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CaseStmt, start transform
CaseStmt 0x9a62c80
|-IntegerLiteral 0x9a62c68 'int' 1
|-<<<NULL>>>
`-CompoundStmt 0x9a62d58
  `-ReturnStmt 0x9a62d48
    `-BinaryOperator 0x9a62d30 'double' '*'
      |-BinaryOperator 0x9a62cf0 'double' '*'
      | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
      | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
      |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
        `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
case 1:
{
    return ____localvar____7 * ____localvar____7 * ____localvar____5;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d88 (CaseStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CaseStmt 9a62d88 99d4078 99d4078
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d70 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a62d70 987f150 987f150
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d70 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a62d70 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e20 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a62e20 96e5360 96e5360
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e10 (ReturnStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ReturnStmt 9a62e10 9886b60 9886b60
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62df8 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a62df8 9896e10 9896e10
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62dd8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a62dd8 9725c78 9725c78
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62da8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62da8 98a2b38 98a2b38
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62da8 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62dd8 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62de8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a62de8 96ef668 96ef668
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62dc0 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62dc0 96d07a8 96d07a8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62dc0 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62de8 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62df8 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a62df8 'double' '*'
|-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
| `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
`-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
  `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7 * ____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e10 (ReturnStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ReturnStmt, start transform
ReturnStmt 0x9a62e10
`-BinaryOperator 0x9a62df8 'double' '*'
  |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
  | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
    `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
return ____localvar____7 * ____localvar____7;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e20 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a62e20
`-ReturnStmt 0x9a62e10
  `-BinaryOperator 0x9a62df8 'double' '*'
    |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
    | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
      `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
{
    return ____localvar____7 * ____localvar____7;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d88 (CaseStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CaseStmt, start transform
CaseStmt 0x9a62d88
|-IntegerLiteral 0x9a62d70 'int' 2
|-<<<NULL>>>
`-CompoundStmt 0x9a62e20
  `-ReturnStmt 0x9a62e10
    `-BinaryOperator 0x9a62df8 'double' '*'
      |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
      | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
        `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
case 2:
{
    return ____localvar____7 * ____localvar____7;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e50 (CaseStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CaseStmt 9a62e50 9886c48 9886c48
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e38 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a62e38 9891600 9891600
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e38 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a62e38 'int' 3
3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63138 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a63138 9896278 9896278
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fb0 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a62fb0 989f090 989f090
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e70 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62e70 9899718 9899718
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e70 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f78 (CallExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CallExpr 9a62f78 988b238 988b238
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f68 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a62f68 96ef610 96ef610
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f30 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62f30 9895358 9895358
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f30 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
fast_pow[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f68 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
fast_pow[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fa0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a62fa0 96a0c50 96a0c50
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ebc (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62ebc 9750618 9750618
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ebc (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
____localvar____5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fa0 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
____localvar____5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f18 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a62f18 98947a8 98947a8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f08 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a62f08 99d38c0 99d38c0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ed4 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62ed4 9896248 9896248
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ed4 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f08 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
`-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ef0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a62ef0 989a980 989a980
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ef0 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a62ef0 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f18 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a62f18 'int' '/'
|-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
`-IntegerLiteral 0x9a62ef0 'int' 2
____localvar____6 / 2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f78 (CallExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CallExpr, start transform
CallExpr 0x9a62f78 'double'
|-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
| `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
`-BinaryOperator 0x9a62f18 'int' '/'
  |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
  | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  `-IntegerLiteral 0x9a62ef0 'int' 2
fast_pow(____localvar____5, ____localvar____6 / 2)[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fb0 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a62fb0 'double' lvalue '='
|-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
`-CallExpr 0x9a62f78 'double'
  |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
  | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  `-BinaryOperator 0x9a62f18 'int' '/'
    |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
    | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    `-IntegerLiteral 0x9a62ef0 'int' 2
____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2)[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63110 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IfStmt 9a63110 9896548 9896548
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63038 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a63038 98b2878 98b2878
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a63008 988b5a8 988b5a8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ff8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a62ff8 979fc40 979fc40
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fc8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a62fc8 96f8310 96f8310
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fc8 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ff8 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
`-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fe0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a62fe0 97448b8 97448b8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fe0 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a62fe0 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63020 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a63020 9894768 9894768
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63020 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a63020 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63038 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a63038 '_Bool' '=='
|-BinaryOperator 0x9a63008 'int' '%'
| |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| `-IntegerLiteral 0x9a62fe0 'int' 2
`-IntegerLiteral 0x9a63020 'int' 0
____localvar____6 % 2 == 0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63098 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a63098 96ab2b8 96ab2b8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63080 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a63080 988a5b8 988a5b8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63050 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a63050 9899a80 9899a80
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63050 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63068 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a63068 966c788 966c788
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63068 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a63068 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63080 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a63080 'int' lvalue '='
|-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-IntegerLiteral 0x9a63068 'int' 2
____localvar____8 = 2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63098 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a63098
`-BinaryOperator 0x9a63080 'int' lvalue '='
  |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  `-IntegerLiteral 0x9a63068 'int' 2
{
    ____localvar____8 = 2;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630f8 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a630f8 96d0be0 96d0be0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630e0 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a630e0 988c488 988c488
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630ac (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a630ac 96f9be0 96f9be0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630ac (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630c8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a630c8 969ea88 969ea88
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630c8 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a630c8 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630e0 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a630e0 'int' lvalue '='
|-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-IntegerLiteral 0x9a630c8 'int' 1
____localvar____8 = 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630f8 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a630f8
`-BinaryOperator 0x9a630e0 'int' lvalue '='
  |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  `-IntegerLiteral 0x9a630c8 'int' 1
{
    ____localvar____8 = 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63110 (IfStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IfStmt, start transform
IfStmt 0x9a63110
|-<<<NULL>>>
|-BinaryOperator 0x9a63038 '_Bool' '=='
| |-BinaryOperator 0x9a63008 'int' '%'
| | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| | `-IntegerLiteral 0x9a62fe0 'int' 2
| `-IntegerLiteral 0x9a63020 'int' 0
|-CompoundStmt 0x9a63098
| `-BinaryOperator 0x9a63080 'int' lvalue '='
|   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   `-IntegerLiteral 0x9a63068 'int' 2
`-CompoundStmt 0x9a630f8
  `-BinaryOperator 0x9a630e0 'int' lvalue '='
    |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    `-IntegerLiteral 0x9a630c8 'int' 1
if (____localvar____6 % 2 == 0) {
    ____localvar____8 = 2;
} else {
    ____localvar____8 = 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63130 (BreakStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BreakStmt 9a63130 9a27c08 9a27c08
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63130 (BreakStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BreakStmt, start transform
BreakStmt 0x9a63130
break;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63138 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a63138
|-BinaryOperator 0x9a62fb0 'double' lvalue '='
| |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| `-CallExpr 0x9a62f78 'double'
|   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
|   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
|   `-BinaryOperator 0x9a62f18 'int' '/'
|     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
|     `-IntegerLiteral 0x9a62ef0 'int' 2
|-IfStmt 0x9a63110
| |-<<<NULL>>>
| |-BinaryOperator 0x9a63038 '_Bool' '=='
| | |-BinaryOperator 0x9a63008 'int' '%'
| | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
| | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| | | `-IntegerLiteral 0x9a62fe0 'int' 2
| | `-IntegerLiteral 0x9a63020 'int' 0
| |-CompoundStmt 0x9a63098
| | `-BinaryOperator 0x9a63080 'int' lvalue '='
| |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| |   `-IntegerLiteral 0x9a63068 'int' 2
| `-CompoundStmt 0x9a630f8
|   `-BinaryOperator 0x9a630e0 'int' lvalue '='
|     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|     `-IntegerLiteral 0x9a630c8 'int' 1
`-BreakStmt 0x9a63130
{
    ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
    if (____localvar____6 % 2 == 0) {
        ____localvar____8 = 2;
    } else {
        ____localvar____8 = 1;
    }
    break;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e50 (CaseStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CaseStmt, start transform
CaseStmt 0x9a62e50
|-IntegerLiteral 0x9a62e38 'int' 3
|-<<<NULL>>>
`-CompoundStmt 0x9a63138
  |-BinaryOperator 0x9a62fb0 'double' lvalue '='
  | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | `-CallExpr 0x9a62f78 'double'
  |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
  |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
  |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  |   `-BinaryOperator 0x9a62f18 'int' '/'
  |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
  |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  |     `-IntegerLiteral 0x9a62ef0 'int' 2
  |-IfStmt 0x9a63110
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a63038 '_Bool' '=='
  | | |-BinaryOperator 0x9a63008 'int' '%'
  | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
  | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  | | | `-IntegerLiteral 0x9a62fe0 'int' 2
  | | `-IntegerLiteral 0x9a63020 'int' 0
  | |-CompoundStmt 0x9a63098
  | | `-BinaryOperator 0x9a63080 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | |   `-IntegerLiteral 0x9a63068 'int' 2
  | `-CompoundStmt 0x9a630f8
  |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
  |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  |     `-IntegerLiteral 0x9a630c8 'int' 1
  `-BreakStmt 0x9a63130
case 3:
{
    ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
    if (____localvar____6 % 2 == 0) {
        ____localvar____8 = 2;
    } else {
        ____localvar____8 = 1;
    }
    break;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63170 (CaseStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CaseStmt 9a63170 96b8470 96b8470
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63158 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a63158 98944a8 98944a8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63158 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a63158 'int' 4
4[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631c8 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a631c8 969ab70 969ab70
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631b8 (ReturnStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ReturnStmt 9a631b8 9781820 9781820
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631a8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a631a8 9744050 9744050
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63190 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a63190 9782c80 9782c80
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63190 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a63190 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631a8 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
`-IntegerLiteral 0x9a63190 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631b8 (ReturnStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ReturnStmt, start transform
ReturnStmt 0x9a631b8
`-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
  `-IntegerLiteral 0x9a63190 'int' 1
return 1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631c8 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a631c8
`-ReturnStmt 0x9a631b8
  `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
    `-IntegerLiteral 0x9a63190 'int' 1
{
    return 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63170 (CaseStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CaseStmt, start transform
CaseStmt 0x9a63170
|-IntegerLiteral 0x9a63158 'int' 4
|-<<<NULL>>>
`-CompoundStmt 0x9a631c8
  `-ReturnStmt 0x9a631b8
    `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
      `-IntegerLiteral 0x9a63190 'int' 1
case 4:
{
    return 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631f8 (CaseStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CaseStmt 9a631f8 973fbb8 973fbb8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631e0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a631e0 9684f10 9684f10
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631e0 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a631e0 'int' 5
5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63358 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a63358 96d8998 96d8998
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63330 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IfStmt 9a63330 9685448 9685448
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63258 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a63258 96d04e0 96d04e0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63248 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a63248 989f768 989f768
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63218 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a63218 98a32d0 98a32d0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63218 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63248 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
`-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63230 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a63230 988f900 988f900
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63230 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a63230 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63258 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a63258 '_Bool' '=='
|-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
`-IntegerLiteral 0x9a63230 'int' 0
____localvar____6 == 0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632b8 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a632b8 9686670 9686670
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632a0 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a632a0 99ce2b0 99ce2b0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63270 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a63270 96e5298 96e5298
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63270 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63288 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a63288 988a0b8 988a0b8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63288 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a63288 'int' 4
4[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632a0 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a632a0 'int' lvalue '='
|-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-IntegerLiteral 0x9a63288 'int' 4
____localvar____8 = 4[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632b8 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a632b8
`-BinaryOperator 0x9a632a0 'int' lvalue '='
  |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  `-IntegerLiteral 0x9a63288 'int' 4
{
    ____localvar____8 = 4;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63318 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a63318 986c1e0 986c1e0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63300 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a63300 989b408 989b408
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632cc (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a632cc 988a648 988a648
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632cc (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632e8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a632e8 966c4d8 966c4d8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632e8 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a632e8 'int' 3
3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63300 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a63300 'int' lvalue '='
|-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-IntegerLiteral 0x9a632e8 'int' 3
____localvar____8 = 3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63318 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a63318
`-BinaryOperator 0x9a63300 'int' lvalue '='
  |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  `-IntegerLiteral 0x9a632e8 'int' 3
{
    ____localvar____8 = 3;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63330 (IfStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IfStmt, start transform
IfStmt 0x9a63330
|-<<<NULL>>>
|-BinaryOperator 0x9a63258 '_Bool' '=='
| |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| `-IntegerLiteral 0x9a63230 'int' 0
|-CompoundStmt 0x9a632b8
| `-BinaryOperator 0x9a632a0 'int' lvalue '='
|   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   `-IntegerLiteral 0x9a63288 'int' 4
`-CompoundStmt 0x9a63318
  `-BinaryOperator 0x9a63300 'int' lvalue '='
    |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    `-IntegerLiteral 0x9a632e8 'int' 3
if (____localvar____6 == 0) {
    ____localvar____8 = 4;
} else {
    ____localvar____8 = 3;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63350 (BreakStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BreakStmt 9a63350 966c4e8 966c4e8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63350 (BreakStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BreakStmt, start transform
BreakStmt 0x9a63350
break;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63358 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a63358
|-IfStmt 0x9a63330
| |-<<<NULL>>>
| |-BinaryOperator 0x9a63258 '_Bool' '=='
| | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| | `-IntegerLiteral 0x9a63230 'int' 0
| |-CompoundStmt 0x9a632b8
| | `-BinaryOperator 0x9a632a0 'int' lvalue '='
| |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| |   `-IntegerLiteral 0x9a63288 'int' 4
| `-CompoundStmt 0x9a63318
|   `-BinaryOperator 0x9a63300 'int' lvalue '='
|     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|     `-IntegerLiteral 0x9a632e8 'int' 3
`-BreakStmt 0x9a63350
{
    if (____localvar____6 == 0) {
        ____localvar____8 = 4;
    } else {
        ____localvar____8 = 3;
    }
    break;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631f8 (CaseStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CaseStmt, start transform
CaseStmt 0x9a631f8
|-IntegerLiteral 0x9a631e0 'int' 5
|-<<<NULL>>>
`-CompoundStmt 0x9a63358
  |-IfStmt 0x9a63330
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a63258 '_Bool' '=='
  | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  | | `-IntegerLiteral 0x9a63230 'int' 0
  | |-CompoundStmt 0x9a632b8
  | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | |   `-IntegerLiteral 0x9a63288 'int' 4
  | `-CompoundStmt 0x9a63318
  |   `-BinaryOperator 0x9a63300 'int' lvalue '='
  |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  |     `-IntegerLiteral 0x9a632e8 'int' 3
  `-BreakStmt 0x9a63350
case 5:
{
    if (____localvar____6 == 0) {
        ____localvar____8 = 4;
    } else {
        ____localvar____8 = 3;
    }
    break;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63370 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a63370
|-CaseStmt 0x9a62c80
| |-IntegerLiteral 0x9a62c68 'int' 1
| |-<<<NULL>>>
| `-CompoundStmt 0x9a62d58
|   `-ReturnStmt 0x9a62d48
|     `-BinaryOperator 0x9a62d30 'double' '*'
|       |-BinaryOperator 0x9a62cf0 'double' '*'
|       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
|       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
|       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
|         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
|-CaseStmt 0x9a62d88
| |-IntegerLiteral 0x9a62d70 'int' 2
| |-<<<NULL>>>
| `-CompoundStmt 0x9a62e20
|   `-ReturnStmt 0x9a62e10
|     `-BinaryOperator 0x9a62df8 'double' '*'
|       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
|       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
|         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|-CaseStmt 0x9a62e50
| |-IntegerLiteral 0x9a62e38 'int' 3
| |-<<<NULL>>>
| `-CompoundStmt 0x9a63138
|   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
|   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|   | `-CallExpr 0x9a62f78 'double'
|   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
|   |   `-BinaryOperator 0x9a62f18 'int' '/'
|   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
|   |     `-IntegerLiteral 0x9a62ef0 'int' 2
|   |-IfStmt 0x9a63110
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x9a63038 '_Bool' '=='
|   | | |-BinaryOperator 0x9a63008 'int' '%'
|   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
|   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
|   | | `-IntegerLiteral 0x9a63020 'int' 0
|   | |-CompoundStmt 0x9a63098
|   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
|   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   | |   `-IntegerLiteral 0x9a63068 'int' 2
|   | `-CompoundStmt 0x9a630f8
|   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
|   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   |     `-IntegerLiteral 0x9a630c8 'int' 1
|   `-BreakStmt 0x9a63130
|-CaseStmt 0x9a63170
| |-IntegerLiteral 0x9a63158 'int' 4
| |-<<<NULL>>>
| `-CompoundStmt 0x9a631c8
|   `-ReturnStmt 0x9a631b8
|     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
|       `-IntegerLiteral 0x9a63190 'int' 1
`-CaseStmt 0x9a631f8
  |-IntegerLiteral 0x9a631e0 'int' 5
  |-<<<NULL>>>
  `-CompoundStmt 0x9a63358
    |-IfStmt 0x9a63330
    | |-<<<NULL>>>
    | |-BinaryOperator 0x9a63258 '_Bool' '=='
    | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    | | `-IntegerLiteral 0x9a63230 'int' 0
    | |-CompoundStmt 0x9a632b8
    | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
    | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | |   `-IntegerLiteral 0x9a63288 'int' 4
    | `-CompoundStmt 0x9a63318
    |   `-BinaryOperator 0x9a63300 'int' lvalue '='
    |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    |     `-IntegerLiteral 0x9a632e8 'int' 3
    `-BreakStmt 0x9a63350
{
  case 1:
    {
        return ____localvar____7 * ____localvar____7 * ____localvar____5;
    }
  case 2:
    {
        return ____localvar____7 * ____localvar____7;
    }
  case 3:
    {
        ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
        if (____localvar____6 % 2 == 0) {
            ____localvar____8 = 2;
        } else {
            ____localvar____8 = 1;
        }
        break;
    }
  case 4:
    {
        return 1;
    }
  case 5:
    {
        if (____localvar____6 == 0) {
            ____localvar____8 = 4;
        } else {
            ____localvar____8 = 3;
        }
        break;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c48 (SwitchStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt SwitchStmt, start transform
SwitchStmt 0x9a62c48
|-<<<NULL>>>
|-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-CompoundStmt 0x9a63370
  |-CaseStmt 0x9a62c80
  | |-IntegerLiteral 0x9a62c68 'int' 1
  | |-<<<NULL>>>
  | `-CompoundStmt 0x9a62d58
  |   `-ReturnStmt 0x9a62d48
  |     `-BinaryOperator 0x9a62d30 'double' '*'
  |       |-BinaryOperator 0x9a62cf0 'double' '*'
  |       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
  |       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  |       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
  |       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  |       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
  |         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  |-CaseStmt 0x9a62d88
  | |-IntegerLiteral 0x9a62d70 'int' 2
  | |-<<<NULL>>>
  | `-CompoundStmt 0x9a62e20
  |   `-ReturnStmt 0x9a62e10
  |     `-BinaryOperator 0x9a62df8 'double' '*'
  |       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
  |       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  |       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
  |         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  |-CaseStmt 0x9a62e50
  | |-IntegerLiteral 0x9a62e38 'int' 3
  | |-<<<NULL>>>
  | `-CompoundStmt 0x9a63138
  |   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
  |   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  |   | `-CallExpr 0x9a62f78 'double'
  |   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
  |   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  |   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
  |   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  |   |   `-BinaryOperator 0x9a62f18 'int' '/'
  |   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
  |   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  |   |     `-IntegerLiteral 0x9a62ef0 'int' 2
  |   |-IfStmt 0x9a63110
  |   | |-<<<NULL>>>
  |   | |-BinaryOperator 0x9a63038 '_Bool' '=='
  |   | | |-BinaryOperator 0x9a63008 'int' '%'
  |   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
  |   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  |   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
  |   | | `-IntegerLiteral 0x9a63020 'int' 0
  |   | |-CompoundStmt 0x9a63098
  |   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
  |   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  |   | |   `-IntegerLiteral 0x9a63068 'int' 2
  |   | `-CompoundStmt 0x9a630f8
  |   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
  |   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  |   |     `-IntegerLiteral 0x9a630c8 'int' 1
  |   `-BreakStmt 0x9a63130
  |-CaseStmt 0x9a63170
  | |-IntegerLiteral 0x9a63158 'int' 4
  | |-<<<NULL>>>
  | `-CompoundStmt 0x9a631c8
  |   `-ReturnStmt 0x9a631b8
  |     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
  |       `-IntegerLiteral 0x9a63190 'int' 1
  `-CaseStmt 0x9a631f8
    |-IntegerLiteral 0x9a631e0 'int' 5
    |-<<<NULL>>>
    `-CompoundStmt 0x9a63358
      |-IfStmt 0x9a63330
      | |-<<<NULL>>>
      | |-BinaryOperator 0x9a63258 '_Bool' '=='
      | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
      | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
      | | `-IntegerLiteral 0x9a63230 'int' 0
      | |-CompoundStmt 0x9a632b8
      | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
      | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | |   `-IntegerLiteral 0x9a63288 'int' 4
      | `-CompoundStmt 0x9a63318
      |   `-BinaryOperator 0x9a63300 'int' lvalue '='
      |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      |     `-IntegerLiteral 0x9a632e8 'int' 3
      `-BreakStmt 0x9a63350
switch (____localvar____8) {
  case 1:
    {
        return ____localvar____7 * ____localvar____7 * ____localvar____5;
    }
  case 2:
    {
        return ____localvar____7 * ____localvar____7;
    }
  case 3:
    {
        ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
        if (____localvar____6 % 2 == 0) {
            ____localvar____8 = 2;
        } else {
            ____localvar____8 = 1;
        }
        break;
    }
  case 4:
    {
        return 1;
    }
  case 5:
    {
        if (____localvar____6 == 0) {
            ____localvar____8 = 4;
        } else {
            ____localvar____8 = 3;
        }
        break;
    }
}
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 322] switch to if trans
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 327] LABEL_SWITCH
[DEBUG][alg/Algorithm.cpp - line 36] info 159798144: ____label____0 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 333] create cond var
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 344] get switch sub ptr
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 349] create if 
[DEBUG][alg/Algorithm.cpp - line 36] info 159798220: ____label____1 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 359] iterator case/default
[DEBUG][alg/Algorithm.cpp - line 36] info 159798256: ____label____2 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 372] record case: (973fbb8) 9a631f8 bfd6dc54 9a64bc0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 375] case stmt reached 9a631f8
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 387] set else if
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 399] case stmt end
[DEBUG][alg/Algorithm.cpp - line 36] info 159798292: ____label____3 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 372] record case: (96b8470) 9a63170 bfd6dc54 9a64c50
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 375] case stmt reached 9a63170
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 387] set else if
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 399] case stmt end
[DEBUG][alg/Algorithm.cpp - line 36] info 159798328: ____label____4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 372] record case: (9886c48) 9a62e50 bfd6dc54 9a64d00
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 375] case stmt reached 9a62e50
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 387] set else if
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 399] case stmt end
[DEBUG][alg/Algorithm.cpp - line 36] info 159798364: ____label____5 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 372] record case: (99d4078) 9a62d88 bfd6dc54 9a64db0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 375] case stmt reached 9a62d88
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 387] set else if
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 399] case stmt end
[DEBUG][alg/Algorithm.cpp - line 36] info 159798400: ____label____6 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 372] record case: (96a4700) 9a62c80 bfd6dc54 9a64e60
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 375] case stmt reached 9a62c80
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 387] set else if
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 399] case stmt end
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 409] add last else goto
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 420] transform break
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BreakStmt (bfd6df4c) 9a63350 bfd6db64 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 438] break reached
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 442] break end
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a632e8 bfd6d7c4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a632cc bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a63300 bfd6d814 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a63318 bfd6dac4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a63288 bfd6d7c4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a63270 bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a632a0 bfd6d814 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a632b8 bfd6dac4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a63230 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a63218 bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a63248 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a63258 bfd6d8b4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IfStmt (bfd6df4c) 9a63330 bfd6db64 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a63358 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a631e0 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CaseStmt (bfd6df4c) 9a631f8 bfd6dc54 9a64bc0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 444] SwitchCase reached 9a631f8
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 451] switchCase ended
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a63190 bfd6da24 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a631a8 bfd6dac4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ReturnStmt (bfd6df4c) 9a631b8 bfd6db64 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a631c8 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a63158 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CaseStmt (bfd6df4c) 9a63170 bfd6dc54 9a64c50
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 444] SwitchCase reached 9a63170
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 451] switchCase ended
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BreakStmt (bfd6df4c) 9a63130 bfd6db64 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 438] break reached
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 442] break end
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a630c8 bfd6d7c4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a630ac bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a630e0 bfd6d814 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a630f8 bfd6dac4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a63068 bfd6d7c4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a63050 bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a63080 bfd6d814 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a63098 bfd6dac4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a63020 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a62fe0 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a62fc8 bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a62ff8 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a63008 bfd6d8b4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a63038 bfd6d8b4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IfStmt (bfd6df4c) 9a63110 bfd6db64 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a62ef0 bfd6d604 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a62ed4 bfd6d4d4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a62f08 bfd6d604 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a62f18 bfd6d654 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a62ebc bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a62fa0 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a62f30 bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a62f68 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CallExpr (bfd6df4c) 9a62f78 bfd6d904 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a62e70 bfd6d874 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a62fb0 bfd6d954 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a63138 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a62e38 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CaseStmt (bfd6df4c) 9a62e50 bfd6dc54 9a64d00
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 444] SwitchCase reached 9a62e50
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 451] switchCase ended
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a62dc0 bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a62de8 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a62da8 bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a62dd8 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a62df8 bfd6d8b4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ReturnStmt (bfd6df4c) 9a62e10 bfd6db64 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a62e20 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a62d70 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CaseStmt (bfd6df4c) 9a62d88 bfd6dc54 9a64db0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 444] SwitchCase reached 9a62d88
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 451] switchCase ended
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a62d08 bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a62d20 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a62cb8 bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a62ce0 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a62ca0 bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a62cd0 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a62cf0 bfd6d8b4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt BinaryOperator (bfd6df4c) 9a62d30 bfd6d8b4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ReturnStmt (bfd6df4c) 9a62d48 bfd6db64 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a62d58 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a62c68 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CaseStmt (bfd6df4c) 9a62c80 bfd6dc54 9a64e60
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 444] SwitchCase reached 9a62c80
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 451] switchCase ended
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a63370 bfd6df04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a62c20 bfd6ddd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a62c38 bfd6df04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 459] set new switch body
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 479] done
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 482] free memory
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63398 (WhileStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt WhileStmt, start transform
WhileStmt 0x9a63398
|-<<<NULL>>>
|-BinaryOperator 0x9a62c08 '_Bool' '!='
| |-ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| `-IntegerLiteral 0x9a62be0 'int' 0
`-LabelStmt 0x9a64ab0 '____label____0'
  `-CompoundStmt 0x9a64f10
    |-DeclStmt 0x9a64b20
    | `-VarDecl 0x9a64ae0 ____localvar____9 'int'
    |   `-ParenExpr 0x9a64ac0 'int'
    |     `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    |-IfStmt 0x9a64b30
    | |-<<<NULL>>>
    | |-BinaryOperator 0x9a64bf8 '_Bool' '=='
    | | |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | | `-IntegerLiteral 0x9a631e0 'int' 5
    | |-GotoStmt 0x9a64c10 '____label____2' 0x9a64b90
    | `-IfStmt 0x9a64cb0
    |   |-<<<NULL>>>
    |   |-BinaryOperator 0x9a64c88 '_Bool' '=='
    |   | |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
    |   | | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    |   | `-IntegerLiteral 0x9a63158 'int' 4
    |   |-GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
    |   `-IfStmt 0x9a64d60
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x9a64d38 '_Bool' '=='
    |     | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    |     | `-IntegerLiteral 0x9a62e38 'int' 3
    |     |-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
    |     `-IfStmt 0x9a64e10
    |       |-<<<NULL>>>
    |       |-BinaryOperator 0x9a64de8 '_Bool' '=='
    |       | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
    |       | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    |       | `-IntegerLiteral 0x9a62d70 'int' 2
    |       |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
    |       `-IfStmt 0x9a64ec0
    |         |-<<<NULL>>>
    |         |-BinaryOperator 0x9a64e98 '_Bool' '=='
    |         | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
    |         | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    |         | `-IntegerLiteral 0x9a62c68 'int' 1
    |         |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
    |         `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
    |-CompoundStmt 0x9a63370
    | |-LabelStmt 0x9a64e60 '____label____6'
    | | `-CompoundStmt 0x9a62d58
    | |   `-ReturnStmt 0x9a62d48
    | |     `-BinaryOperator 0x9a62d30 'double' '*'
    | |       |-BinaryOperator 0x9a62cf0 'double' '*'
    | |       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
    | |       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | |       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
    | |       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | |       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
    | |         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
    | |-LabelStmt 0x9a64db0 '____label____5'
    | | `-CompoundStmt 0x9a62e20
    | |   `-ReturnStmt 0x9a62e10
    | |     `-BinaryOperator 0x9a62df8 'double' '*'
    | |       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
    | |       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | |       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
    | |         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | |-LabelStmt 0x9a64d00 '____label____4'
    | | `-CompoundStmt 0x9a63138
    | |   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
    | |   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | |   | `-CallExpr 0x9a62f78 'double'
    | |   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
    | |   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
    | |   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
    | |   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
    | |   |   `-BinaryOperator 0x9a62f18 'int' '/'
    | |   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
    | |   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    | |   |     `-IntegerLiteral 0x9a62ef0 'int' 2
    | |   |-IfStmt 0x9a63110
    | |   | |-<<<NULL>>>
    | |   | |-BinaryOperator 0x9a63038 '_Bool' '=='
    | |   | | |-BinaryOperator 0x9a63008 'int' '%'
    | |   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
    | |   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    | |   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
    | |   | | `-IntegerLiteral 0x9a63020 'int' 0
    | |   | |-CompoundStmt 0x9a63098
    | |   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
    | |   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | |   | |   `-IntegerLiteral 0x9a63068 'int' 2
    | |   | `-CompoundStmt 0x9a630f8
    | |   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
    | |   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | |   |     `-IntegerLiteral 0x9a630c8 'int' 1
    | |   `-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
    | |-LabelStmt 0x9a64c50 '____label____3'
    | | `-CompoundStmt 0x9a631c8
    | |   `-ReturnStmt 0x9a631b8
    | |     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
    | |       `-IntegerLiteral 0x9a63190 'int' 1
    | `-LabelStmt 0x9a64bc0 '____label____2'
    |   `-CompoundStmt 0x9a63358
    |     |-IfStmt 0x9a63330
    |     | |-<<<NULL>>>
    |     | |-BinaryOperator 0x9a63258 '_Bool' '=='
    |     | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
    |     | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    |     | | `-IntegerLiteral 0x9a63230 'int' 0
    |     | |-CompoundStmt 0x9a632b8
    |     | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
    |     | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    |     | |   `-IntegerLiteral 0x9a63288 'int' 4
    |     | `-CompoundStmt 0x9a63318
    |     |   `-BinaryOperator 0x9a63300 'int' lvalue '='
    |     |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    |     |     `-IntegerLiteral 0x9a632e8 'int' 3
    |     `-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
    `-LabelStmt 0x9a64b80 '____label____1'
      `-NullStmt 0x9a64b70
while (____localvar____8 != 0)
  ____label____0:
    {
        int ____localvar____9 = (____localvar____8);
        if (____localvar____9 == 5)
            goto ____label____2;
        else if (____localvar____9 == 4)
            goto ____label____3;
        else if (____localvar____9 == 3)
            goto ____label____4;
        else if (____localvar____9 == 2)
            goto ____label____5;
        else if (____localvar____9 == 1)
            goto ____label____6;
        else
            goto ____label____1;
        {
          ____label____6:
            {
                return ____localvar____7 * ____localvar____7 * ____localvar____5;
            }
          ____label____5:
            {
                return ____localvar____7 * ____localvar____7;
            }
          ____label____4:
            {
                ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
                if (____localvar____6 % 2 == 0) {
                    ____localvar____8 = 2;
                } else {
                    ____localvar____8 = 1;
                }
                goto ____label____1;
            }
          ____label____3:
            {
                return 1;
            }
          ____label____2:
            {
                if (____localvar____6 == 0) {
                    ____localvar____8 = 4;
                } else {
                    ____localvar____8 = 3;
                }
                goto ____label____1;
            }
        }
      ____label____1:
        ;
    }
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 146] while to if trans
[DEBUG][alg/Algorithm.cpp - line 36] info 159798436: ____label____7 0
[DEBUG][alg/Algorithm.cpp - line 36] info 159798472: ____label____8 0
[DEBUG][alg/Algorithm.cpp - line 36] info 159798508: ____label____9 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt SwitchStmt (bfd6df7c) 9a62c48 bfd6dfa4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfd6df7c) 9a62be0 bfd6dd44 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfd6df7c) 9a62bc8 bfd6dc14 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ImplicitCastExpr (bfd6df7c) 9a62bf8 bfd6dd44 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfd6df7c) 9a62c08 bfd6dd94 0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a633b0 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a633b0
|-DeclStmt 0x9a62b50
| `-VarDecl 0x9a62b20 ____localvar____7 'double'
|-DeclStmt 0x9a62bb8
| `-VarDecl 0x9a62b70 ____localvar____8 'int'
|   `-IntegerLiteral 0x9a62ba0 'int' 5
`-LabelStmt 0x9a64f60 '____label____7'
  `-CompoundStmt 0x9a65038
    |-IfStmt 0x9a65018
    | |-<<<NULL>>>
    | |-BinaryOperator 0x9a62c08 '_Bool' '!='
    | | |-ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | `-IntegerLiteral 0x9a62be0 'int' 0
    | |-CompoundStmt 0x9a65000
    | | |-LabelStmt 0x9a64ab0 '____label____0'
    | | | `-CompoundStmt 0x9a64f10
    | | |   |-DeclStmt 0x9a64b20
    | | |   | `-VarDecl 0x9a64ae0 ____localvar____9 'int'
    | | |   |   `-ParenExpr 0x9a64ac0 'int'
    | | |   |     `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
    | | |   |       `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | |   |-IfStmt 0x9a64b30
    | | |   | |-<<<NULL>>>
    | | |   | |-BinaryOperator 0x9a64bf8 '_Bool' '=='
    | | |   | | |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
    | | |   | | | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | | |   | | `-IntegerLiteral 0x9a631e0 'int' 5
    | | |   | |-GotoStmt 0x9a64c10 '____label____2' 0x9a64b90
    | | |   | `-IfStmt 0x9a64cb0
    | | |   |   |-<<<NULL>>>
    | | |   |   |-BinaryOperator 0x9a64c88 '_Bool' '=='
    | | |   |   | |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
    | | |   |   | | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | | |   |   | `-IntegerLiteral 0x9a63158 'int' 4
    | | |   |   |-GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
    | | |   |   `-IfStmt 0x9a64d60
    | | |   |     |-<<<NULL>>>
    | | |   |     |-BinaryOperator 0x9a64d38 '_Bool' '=='
    | | |   |     | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
    | | |   |     | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | | |   |     | `-IntegerLiteral 0x9a62e38 'int' 3
    | | |   |     |-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
    | | |   |     `-IfStmt 0x9a64e10
    | | |   |       |-<<<NULL>>>
    | | |   |       |-BinaryOperator 0x9a64de8 '_Bool' '=='
    | | |   |       | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
    | | |   |       | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | | |   |       | `-IntegerLiteral 0x9a62d70 'int' 2
    | | |   |       |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
    | | |   |       `-IfStmt 0x9a64ec0
    | | |   |         |-<<<NULL>>>
    | | |   |         |-BinaryOperator 0x9a64e98 '_Bool' '=='
    | | |   |         | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
    | | |   |         | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | | |   |         | `-IntegerLiteral 0x9a62c68 'int' 1
    | | |   |         |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
    | | |   |         `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
    | | |   |-CompoundStmt 0x9a63370
    | | |   | |-LabelStmt 0x9a64e60 '____label____6'
    | | |   | | `-CompoundStmt 0x9a62d58
    | | |   | |   `-ReturnStmt 0x9a62d48
    | | |   | |     `-BinaryOperator 0x9a62d30 'double' '*'
    | | |   | |       |-BinaryOperator 0x9a62cf0 'double' '*'
    | | |   | |       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
    | | |   | |       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | | |   | |       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
    | | |   | |       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | | |   | |       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
    | | |   | |         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
    | | |   | |-LabelStmt 0x9a64db0 '____label____5'
    | | |   | | `-CompoundStmt 0x9a62e20
    | | |   | |   `-ReturnStmt 0x9a62e10
    | | |   | |     `-BinaryOperator 0x9a62df8 'double' '*'
    | | |   | |       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
    | | |   | |       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | | |   | |       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
    | | |   | |         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | | |   | |-LabelStmt 0x9a64d00 '____label____4'
    | | |   | | `-CompoundStmt 0x9a63138
    | | |   | |   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
    | | |   | |   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | | |   | |   | `-CallExpr 0x9a62f78 'double'
    | | |   | |   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
    | | |   | |   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
    | | |   | |   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
    | | |   | |   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
    | | |   | |   |   `-BinaryOperator 0x9a62f18 'int' '/'
    | | |   | |   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
    | | |   | |   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    | | |   | |   |     `-IntegerLiteral 0x9a62ef0 'int' 2
    | | |   | |   |-IfStmt 0x9a63110
    | | |   | |   | |-<<<NULL>>>
    | | |   | |   | |-BinaryOperator 0x9a63038 '_Bool' '=='
    | | |   | |   | | |-BinaryOperator 0x9a63008 'int' '%'
    | | |   | |   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
    | | |   | |   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    | | |   | |   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
    | | |   | |   | | `-IntegerLiteral 0x9a63020 'int' 0
    | | |   | |   | |-CompoundStmt 0x9a63098
    | | |   | |   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
    | | |   | |   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | |   | |   | |   `-IntegerLiteral 0x9a63068 'int' 2
    | | |   | |   | `-CompoundStmt 0x9a630f8
    | | |   | |   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
    | | |   | |   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | |   | |   |     `-IntegerLiteral 0x9a630c8 'int' 1
    | | |   | |   `-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
    | | |   | |-LabelStmt 0x9a64c50 '____label____3'
    | | |   | | `-CompoundStmt 0x9a631c8
    | | |   | |   `-ReturnStmt 0x9a631b8
    | | |   | |     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
    | | |   | |       `-IntegerLiteral 0x9a63190 'int' 1
    | | |   | `-LabelStmt 0x9a64bc0 '____label____2'
    | | |   |   `-CompoundStmt 0x9a63358
    | | |   |     |-IfStmt 0x9a63330
    | | |   |     | |-<<<NULL>>>
    | | |   |     | |-BinaryOperator 0x9a63258 '_Bool' '=='
    | | |   |     | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
    | | |   |     | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    | | |   |     | | `-IntegerLiteral 0x9a63230 'int' 0
    | | |   |     | |-CompoundStmt 0x9a632b8
    | | |   |     | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
    | | |   |     | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | |   |     | |   `-IntegerLiteral 0x9a63288 'int' 4
    | | |   |     | `-CompoundStmt 0x9a63318
    | | |   |     |   `-BinaryOperator 0x9a63300 'int' lvalue '='
    | | |   |     |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | |   |     |     `-IntegerLiteral 0x9a632e8 'int' 3
    | | |   |     `-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
    | | |   `-LabelStmt 0x9a64b80 '____label____1'
    | | |     `-NullStmt 0x9a64b70
    | | `-LabelStmt 0x9a64fa0 '____label____8'
    | |   `-GotoStmt 0x9a64ff0 '____label____7' 0x9a64f30
    | `-<<<NULL>>>
    `-LabelStmt 0x9a64fe0 '____label____9'
      `-NullStmt 0x9a64fd0
{
    double ____localvar____7;
    int ____localvar____8 = 5;
  ____label____7:
    {
        if (____localvar____8 != 0) {
          ____label____0:
            {
                int ____localvar____9 = (____localvar____8);
                if (____localvar____9 == 5)
                    goto ____label____2;
                else if (____localvar____9 == 4)
                    goto ____label____3;
                else if (____localvar____9 == 3)
                    goto ____label____4;
                else if (____localvar____9 == 2)
                    goto ____label____5;
                else if (____localvar____9 == 1)
                    goto ____label____6;
                else
                    goto ____label____1;
                {
                  ____label____6:
                    {
                        return ____localvar____7 * ____localvar____7 * ____localvar____5;
                    }
                  ____label____5:
                    {
                        return ____localvar____7 * ____localvar____7;
                    }
                  ____label____4:
                    {
                        ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
                        if (____localvar____6 % 2 == 0) {
                            ____localvar____8 = 2;
                        } else {
                            ____localvar____8 = 1;
                        }
                        goto ____label____1;
                    }
                  ____label____3:
                    {
                        return 1;
                    }
                  ____label____2:
                    {
                        if (____localvar____6 == 0) {
                            ____localvar____8 = 4;
                        } else {
                            ____localvar____8 = 3;
                        }
                        goto ____label____1;
                    }
                }
              ____label____1:
                ;
            }
          ____label____8:
            goto ____label____7;
        }
      ____label____9:
        ;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62aa0 (Function)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 30] END StmtPretransformer
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 5] START LocalDeclMover
FunctionDecl 0x9a62aa0 <_gcd_ob.cpp:3:1, line:40:1> fast_pow 'double (double, int)'
|-ParmVarDecl 0x9a629e0 <line:3:17, col:24> ____localvar____5 'double'
|-ParmVarDecl 0x9a62a20 <col:43, col:47> ____localvar____6 'int'
`-CompoundStmt 0x9a633b0 <col:66, line:40:1>
  |-DeclStmt 0x9a62b50 <line:4:5, col:29>
  | `-VarDecl 0x9a62b20 <col:5, col:12> ____localvar____7 'double'
  |-DeclStmt 0x9a62bb8 <line:5:5, col:30>
  | `-VarDecl 0x9a62b70 <col:5, col:29> ____localvar____8 'int'
  |   `-IntegerLiteral 0x9a62ba0 <col:29> 'int' 5
  `-LabelStmt 0x9a64f60 <<invalid sloc>> '____label____7'
    `-CompoundStmt 0x9a65038 <<invalid sloc>>
      |-IfStmt 0x9a65018 <<invalid sloc>>
      | |-<<<NULL>>>
      | |-BinaryOperator 0x9a62c08 <line:6:12, col:33> '_Bool' '!='
      | | |-ImplicitCastExpr 0x9a62bf8 <col:12> 'int' <LValueToRValue>
      | | | `-DeclRefExpr 0x9a62bc8 <col:12> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | `-IntegerLiteral 0x9a62be0 <col:33> 'int' 0
      | |-CompoundStmt 0x9a65000 <<invalid sloc>>
      | | |-LabelStmt 0x9a64ab0 <<invalid sloc>> '____label____0'
      | | | `-CompoundStmt 0x9a64f10 <<invalid sloc>>
      | | |   |-DeclStmt 0x9a64b20 <<invalid sloc>>
      | | |   | `-VarDecl 0x9a64ae0 <<invalid sloc>> ____localvar____9 'int'
      | | |   |   `-ParenExpr 0x9a64ac0 <<invalid sloc>> 'int'
      | | |   |     `-ImplicitCastExpr 0x9a62c38 <line:7:17> 'int' <LValueToRValue>
      | | |   |       `-DeclRefExpr 0x9a62c20 <col:17> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   |-IfStmt 0x9a64b30 <<invalid sloc>>
      | | |   | |-<<<NULL>>>
      | | |   | |-BinaryOperator 0x9a64bf8 <<invalid sloc>, line:30:16> '_Bool' '=='
      | | |   | | |-ImplicitCastExpr 0x9a64be8 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   | | | `-DeclRefExpr 0x9a64bd0 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   | | `-IntegerLiteral 0x9a631e0 <col:16> 'int' 5
      | | |   | |-GotoStmt 0x9a64c10 <<invalid sloc>> '____label____2' 0x9a64b90
      | | |   | `-IfStmt 0x9a64cb0 <<invalid sloc>>
      | | |   |   |-<<<NULL>>>
      | | |   |   |-BinaryOperator 0x9a64c88 <<invalid sloc>, line:26:16> '_Bool' '=='
      | | |   |   | |-ImplicitCastExpr 0x9a64c78 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |   | | `-DeclRefExpr 0x9a64c60 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |   | `-IntegerLiteral 0x9a63158 <col:16> 'int' 4
      | | |   |   |-GotoStmt 0x9a64ca0 <<invalid sloc>> '____label____3' 0x9a64c20
      | | |   |   `-IfStmt 0x9a64d60 <<invalid sloc>>
      | | |   |     |-<<<NULL>>>
      | | |   |     |-BinaryOperator 0x9a64d38 <<invalid sloc>, line:16:16> '_Bool' '=='
      | | |   |     | |-ImplicitCastExpr 0x9a64d28 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |     | | `-DeclRefExpr 0x9a64d10 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |     | `-IntegerLiteral 0x9a62e38 <col:16> 'int' 3
      | | |   |     |-GotoStmt 0x9a64d50 <<invalid sloc>> '____label____4' 0x9a64cd0
      | | |   |     `-IfStmt 0x9a64e10 <<invalid sloc>>
      | | |   |       |-<<<NULL>>>
      | | |   |       |-BinaryOperator 0x9a64de8 <<invalid sloc>, line:12:16> '_Bool' '=='
      | | |   |       | |-ImplicitCastExpr 0x9a64dd8 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |       | | `-DeclRefExpr 0x9a64dc0 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |       | `-IntegerLiteral 0x9a62d70 <col:16> 'int' 2
      | | |   |       |-GotoStmt 0x9a64e00 <<invalid sloc>> '____label____5' 0x9a64d80
      | | |   |       `-IfStmt 0x9a64ec0 <<invalid sloc>>
      | | |   |         |-<<<NULL>>>
      | | |   |         |-BinaryOperator 0x9a64e98 <<invalid sloc>, line:8:16> '_Bool' '=='
      | | |   |         | |-ImplicitCastExpr 0x9a64e88 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |         | | `-DeclRefExpr 0x9a64e70 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |         | `-IntegerLiteral 0x9a62c68 <col:16> 'int' 1
      | | |   |         |-GotoStmt 0x9a64eb0 <<invalid sloc>> '____label____6' 0x9a64e30
      | | |   |         `-GotoStmt 0x9a64ee0 <<invalid sloc>> '____label____1' 0x9a64b50
      | | |   |-CompoundStmt 0x9a63370 <line:7:36, line:39:9>
      | | |   | |-LabelStmt 0x9a64e60 <<invalid sloc>, line:11:13> '____label____6'
      | | |   | | `-CompoundStmt 0x9a62d58 <line:9:13, line:11:13>
      | | |   | |   `-ReturnStmt 0x9a62d48 <line:10:17, col:64>
      | | |   | |     `-BinaryOperator 0x9a62d30 <col:24, col:64> 'double' '*'
      | | |   | |       |-BinaryOperator 0x9a62cf0 <col:24, col:44> 'double' '*'
      | | |   | |       | |-ImplicitCastExpr 0x9a62cd0 <col:24> 'double' <LValueToRValue>
      | | |   | |       | | `-DeclRefExpr 0x9a62ca0 <col:24> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |       | `-ImplicitCastExpr 0x9a62ce0 <col:44> 'double' <LValueToRValue>
      | | |   | |       |   `-DeclRefExpr 0x9a62cb8 <col:44> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |       `-ImplicitCastExpr 0x9a62d20 <col:64> 'double' <LValueToRValue>
      | | |   | |         `-DeclRefExpr 0x9a62d08 <col:64> 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
      | | |   | |-LabelStmt 0x9a64db0 <<invalid sloc>, line:15:13> '____label____5'
      | | |   | | `-CompoundStmt 0x9a62e20 <line:13:13, line:15:13>
      | | |   | |   `-ReturnStmt 0x9a62e10 <line:14:17, col:44>
      | | |   | |     `-BinaryOperator 0x9a62df8 <col:24, col:44> 'double' '*'
      | | |   | |       |-ImplicitCastExpr 0x9a62dd8 <col:24> 'double' <LValueToRValue>
      | | |   | |       | `-DeclRefExpr 0x9a62da8 <col:24> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |       `-ImplicitCastExpr 0x9a62de8 <col:44> 'double' <LValueToRValue>
      | | |   | |         `-DeclRefExpr 0x9a62dc0 <col:44> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |-LabelStmt 0x9a64d00 <<invalid sloc>, line:25:13> '____label____4'
      | | |   | | `-CompoundStmt 0x9a63138 <line:17:13, line:25:13>
      | | |   | |   |-BinaryOperator 0x9a62fb0 <line:18:17, col:86> 'double' lvalue '='
      | | |   | |   | |-DeclRefExpr 0x9a62e70 <col:17> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |   | `-CallExpr 0x9a62f78 <col:37, col:86> 'double'
      | | |   | |   |   |-ImplicitCastExpr 0x9a62f68 <col:37> 'double (*)(double, int)' <FunctionToPointerDecay>
      | | |   | |   |   | `-DeclRefExpr 0x9a62f30 <col:37> 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
      | | |   | |   |   |-ImplicitCastExpr 0x9a62fa0 <col:46> 'double' <LValueToRValue>
      | | |   | |   |   | `-DeclRefExpr 0x9a62ebc <col:46> 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
      | | |   | |   |   `-BinaryOperator 0x9a62f18 <col:65, col:85> 'int' '/'
      | | |   | |   |     |-ImplicitCastExpr 0x9a62f08 <col:65> 'int' <LValueToRValue>
      | | |   | |   |     | `-DeclRefExpr 0x9a62ed4 <col:65> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
      | | |   | |   |     `-IntegerLiteral 0x9a62ef0 <col:85> 'int' 2
      | | |   | |   |-IfStmt 0x9a63110 <line:19:17, line:23:17>
      | | |   | |   | |-<<<NULL>>>
      | | |   | |   | |-BinaryOperator 0x9a63038 <line:19:21, col:46> '_Bool' '=='
      | | |   | |   | | |-BinaryOperator 0x9a63008 <col:21, col:41> 'int' '%'
      | | |   | |   | | | |-ImplicitCastExpr 0x9a62ff8 <col:21> 'int' <LValueToRValue>
      | | |   | |   | | | | `-DeclRefExpr 0x9a62fc8 <col:21> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
      | | |   | |   | | | `-IntegerLiteral 0x9a62fe0 <col:41> 'int' 2
      | | |   | |   | | `-IntegerLiteral 0x9a63020 <col:46> 'int' 0
      | | |   | |   | |-CompoundStmt 0x9a63098 <col:49, line:21:17>
      | | |   | |   | | `-BinaryOperator 0x9a63080 <line:20:21, col:41> 'int' lvalue '='
      | | |   | |   | |   |-DeclRefExpr 0x9a63050 <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   | |   | |   `-IntegerLiteral 0x9a63068 <col:41> 'int' 2
      | | |   | |   | `-CompoundStmt 0x9a630f8 <line:21:24, line:23:17>
      | | |   | |   |   `-BinaryOperator 0x9a630e0 <line:22:21, col:41> 'int' lvalue '='
      | | |   | |   |     |-DeclRefExpr 0x9a630ac <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   | |   |     `-IntegerLiteral 0x9a630c8 <col:41> 'int' 1
      | | |   | |   `-GotoStmt 0x9a64f00 <<invalid sloc>> '____label____1' 0x9a64b50
      | | |   | |-LabelStmt 0x9a64c50 <<invalid sloc>, line:29:13> '____label____3'
      | | |   | | `-CompoundStmt 0x9a631c8 <line:27:13, line:29:13>
      | | |   | |   `-ReturnStmt 0x9a631b8 <line:28:17, col:24>
      | | |   | |     `-ImplicitCastExpr 0x9a631a8 <col:24> 'double' <IntegralToFloating>
      | | |   | |       `-IntegerLiteral 0x9a63190 <col:24> 'int' 1
      | | |   | `-LabelStmt 0x9a64bc0 <<invalid sloc>, line:38:13> '____label____2'
      | | |   |   `-CompoundStmt 0x9a63358 <line:31:13, line:38:13>
      | | |   |     |-IfStmt 0x9a63330 <line:32:17, line:36:17>
      | | |   |     | |-<<<NULL>>>
      | | |   |     | |-BinaryOperator 0x9a63258 <line:32:21, col:42> '_Bool' '=='
      | | |   |     | | |-ImplicitCastExpr 0x9a63248 <col:21> 'int' <LValueToRValue>
      | | |   |     | | | `-DeclRefExpr 0x9a63218 <col:21> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
      | | |   |     | | `-IntegerLiteral 0x9a63230 <col:42> 'int' 0
      | | |   |     | |-CompoundStmt 0x9a632b8 <col:45, line:34:17>
      | | |   |     | | `-BinaryOperator 0x9a632a0 <line:33:21, col:41> 'int' lvalue '='
      | | |   |     | |   |-DeclRefExpr 0x9a63270 <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   |     | |   `-IntegerLiteral 0x9a63288 <col:41> 'int' 4
      | | |   |     | `-CompoundStmt 0x9a63318 <line:34:24, line:36:17>
      | | |   |     |   `-BinaryOperator 0x9a63300 <line:35:21, col:41> 'int' lvalue '='
      | | |   |     |     |-DeclRefExpr 0x9a632cc <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   |     |     `-IntegerLiteral 0x9a632e8 <col:41> 'int' 3
      | | |   |     `-GotoStmt 0x9a64ef0 <<invalid sloc>> '____label____1' 0x9a64b50
      | | |   `-LabelStmt 0x9a64b80 <<invalid sloc>> '____label____1'
      | | |     `-NullStmt 0x9a64b70 <<invalid sloc>>
      | | `-LabelStmt 0x9a64fa0 <<invalid sloc>> '____label____8'
      | |   `-GotoStmt 0x9a64ff0 <<invalid sloc>> '____label____7' 0x9a64f30
      | `-<<<NULL>>>
      `-LabelStmt 0x9a64fe0 <<invalid sloc>> '____label____9'
        `-NullStmt 0x9a64fd0 <<invalid sloc>>
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62aa0 (Function)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a629e0 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a629e0 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62a20 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62a20 (ParmVar)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a633b0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a633b0 -> p 0 )
CompoundStmt 0x9a633b0
|-DeclStmt 0x9a62b50
| `-VarDecl 0x9a62b20 ____localvar____7 'double'
|-DeclStmt 0x9a62bb8
| `-VarDecl 0x9a62b70 ____localvar____8 'int'
|   `-IntegerLiteral 0x9a62ba0 'int' 5
`-LabelStmt 0x9a64f60 '____label____7'
  `-CompoundStmt 0x9a65038
    |-IfStmt 0x9a65018
    | |-<<<NULL>>>
    | |-BinaryOperator 0x9a62c08 '_Bool' '!='
    | | |-ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | `-IntegerLiteral 0x9a62be0 'int' 0
    | |-CompoundStmt 0x9a65000
    | | |-LabelStmt 0x9a64ab0 '____label____0'
    | | | `-CompoundStmt 0x9a64f10
    | | |   |-DeclStmt 0x9a64b20
    | | |   | `-VarDecl 0x9a64ae0 ____localvar____9 'int'
    | | |   |   `-ParenExpr 0x9a64ac0 'int'
    | | |   |     `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
    | | |   |       `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | |   |-IfStmt 0x9a64b30
    | | |   | |-<<<NULL>>>
    | | |   | |-BinaryOperator 0x9a64bf8 '_Bool' '=='
    | | |   | | |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
    | | |   | | | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | | |   | | `-IntegerLiteral 0x9a631e0 'int' 5
    | | |   | |-GotoStmt 0x9a64c10 '____label____2' 0x9a64b90
    | | |   | `-IfStmt 0x9a64cb0
    | | |   |   |-<<<NULL>>>
    | | |   |   |-BinaryOperator 0x9a64c88 '_Bool' '=='
    | | |   |   | |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
    | | |   |   | | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | | |   |   | `-IntegerLiteral 0x9a63158 'int' 4
    | | |   |   |-GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
    | | |   |   `-IfStmt 0x9a64d60
    | | |   |     |-<<<NULL>>>
    | | |   |     |-BinaryOperator 0x9a64d38 '_Bool' '=='
    | | |   |     | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
    | | |   |     | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | | |   |     | `-IntegerLiteral 0x9a62e38 'int' 3
    | | |   |     |-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
    | | |   |     `-IfStmt 0x9a64e10
    | | |   |       |-<<<NULL>>>
    | | |   |       |-BinaryOperator 0x9a64de8 '_Bool' '=='
    | | |   |       | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
    | | |   |       | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | | |   |       | `-IntegerLiteral 0x9a62d70 'int' 2
    | | |   |       |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
    | | |   |       `-IfStmt 0x9a64ec0
    | | |   |         |-<<<NULL>>>
    | | |   |         |-BinaryOperator 0x9a64e98 '_Bool' '=='
    | | |   |         | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
    | | |   |         | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | | |   |         | `-IntegerLiteral 0x9a62c68 'int' 1
    | | |   |         |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
    | | |   |         `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
    | | |   |-CompoundStmt 0x9a63370
    | | |   | |-LabelStmt 0x9a64e60 '____label____6'
    | | |   | | `-CompoundStmt 0x9a62d58
    | | |   | |   `-ReturnStmt 0x9a62d48
    | | |   | |     `-BinaryOperator 0x9a62d30 'double' '*'
    | | |   | |       |-BinaryOperator 0x9a62cf0 'double' '*'
    | | |   | |       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
    | | |   | |       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | | |   | |       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
    | | |   | |       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | | |   | |       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
    | | |   | |         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
    | | |   | |-LabelStmt 0x9a64db0 '____label____5'
    | | |   | | `-CompoundStmt 0x9a62e20
    | | |   | |   `-ReturnStmt 0x9a62e10
    | | |   | |     `-BinaryOperator 0x9a62df8 'double' '*'
    | | |   | |       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
    | | |   | |       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | | |   | |       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
    | | |   | |         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | | |   | |-LabelStmt 0x9a64d00 '____label____4'
    | | |   | | `-CompoundStmt 0x9a63138
    | | |   | |   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
    | | |   | |   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | | |   | |   | `-CallExpr 0x9a62f78 'double'
    | | |   | |   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
    | | |   | |   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
    | | |   | |   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
    | | |   | |   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
    | | |   | |   |   `-BinaryOperator 0x9a62f18 'int' '/'
    | | |   | |   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
    | | |   | |   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    | | |   | |   |     `-IntegerLiteral 0x9a62ef0 'int' 2
    | | |   | |   |-IfStmt 0x9a63110
    | | |   | |   | |-<<<NULL>>>
    | | |   | |   | |-BinaryOperator 0x9a63038 '_Bool' '=='
    | | |   | |   | | |-BinaryOperator 0x9a63008 'int' '%'
    | | |   | |   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
    | | |   | |   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    | | |   | |   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
    | | |   | |   | | `-IntegerLiteral 0x9a63020 'int' 0
    | | |   | |   | |-CompoundStmt 0x9a63098
    | | |   | |   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
    | | |   | |   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | |   | |   | |   `-IntegerLiteral 0x9a63068 'int' 2
    | | |   | |   | `-CompoundStmt 0x9a630f8
    | | |   | |   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
    | | |   | |   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | |   | |   |     `-IntegerLiteral 0x9a630c8 'int' 1
    | | |   | |   `-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
    | | |   | |-LabelStmt 0x9a64c50 '____label____3'
    | | |   | | `-CompoundStmt 0x9a631c8
    | | |   | |   `-ReturnStmt 0x9a631b8
    | | |   | |     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
    | | |   | |       `-IntegerLiteral 0x9a63190 'int' 1
    | | |   | `-LabelStmt 0x9a64bc0 '____label____2'
    | | |   |   `-CompoundStmt 0x9a63358
    | | |   |     |-IfStmt 0x9a63330
    | | |   |     | |-<<<NULL>>>
    | | |   |     | |-BinaryOperator 0x9a63258 '_Bool' '=='
    | | |   |     | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
    | | |   |     | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    | | |   |     | | `-IntegerLiteral 0x9a63230 'int' 0
    | | |   |     | |-CompoundStmt 0x9a632b8
    | | |   |     | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
    | | |   |     | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | |   |     | |   `-IntegerLiteral 0x9a63288 'int' 4
    | | |   |     | `-CompoundStmt 0x9a63318
    | | |   |     |   `-BinaryOperator 0x9a63300 'int' lvalue '='
    | | |   |     |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | | |   |     |     `-IntegerLiteral 0x9a632e8 'int' 3
    | | |   |     `-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
    | | |   `-LabelStmt 0x9a64b80 '____label____1'
    | | |     `-NullStmt 0x9a64b70
    | | `-LabelStmt 0x9a64fa0 '____label____8'
    | |   `-GotoStmt 0x9a64ff0 '____label____7' 0x9a64f30
    | `-<<<NULL>>>
    `-LabelStmt 0x9a64fe0 '____label____9'
      `-NullStmt 0x9a64fd0
{
    double ____localvar____7;
    int ____localvar____8 = 5;
  ____label____7:
    {
        if (____localvar____8 != 0) {
          ____label____0:
            {
                int ____localvar____9 = (____localvar____8);
                if (____localvar____9 == 5)
                    goto ____label____2;
                else if (____localvar____9 == 4)
                    goto ____label____3;
                else if (____localvar____9 == 3)
                    goto ____label____4;
                else if (____localvar____9 == 2)
                    goto ____label____5;
                else if (____localvar____9 == 1)
                    goto ____label____6;
                else
                    goto ____label____1;
                {
                  ____label____6:
                    {
                        return ____localvar____7 * ____localvar____7 * ____localvar____5;
                    }
                  ____label____5:
                    {
                        return ____localvar____7 * ____localvar____7;
                    }
                  ____label____4:
                    {
                        ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
                        if (____localvar____6 % 2 == 0) {
                            ____localvar____8 = 2;
                        } else {
                            ____localvar____8 = 1;
                        }
                        goto ____label____1;
                    }
                  ____label____3:
                    {
                        return 1;
                    }
                  ____label____2:
                    {
                        if (____localvar____6 == 0) {
                            ____localvar____8 = 4;
                        } else {
                            ____localvar____8 = 3;
                        }
                        goto ____label____1;
                    }
                }
              ____label____1:
                ;
            }
          ____label____8:
            goto ____label____7;
        }
      ____label____9:
        ;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62b50 (DeclStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclStmt ( 9a62b50 -> p 9a633b0 )
DeclStmt 0x9a62b50
`-VarDecl 0x9a62b20 ____localvar____7 'double'
double ____localvar____7;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62b20 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62b20 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62b50 (DeclStmt)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 177] WorkOnDeclStmt
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 229] Handle VarDecl ____localvar____7 9a62b20 | Ctx 9a62ac4(Function) -> p 968a6f4
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 254] QualType 
double identifier
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62bb8 (DeclStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclStmt ( 9a62bb8 -> p 9a633b0 )
DeclStmt 0x9a62bb8
`-VarDecl 0x9a62b70 ____localvar____8 'int'
  `-IntegerLiteral 0x9a62ba0 'int' 5
int ____localvar____8 = 5;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62b70 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ba0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a62ba0 -> p 9a62bb8 )
IntegerLiteral 0x9a62ba0 'int' 5
5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ba0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62b70 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62bb8 (DeclStmt)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 177] WorkOnDeclStmt
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 229] Handle VarDecl ____localvar____8 9a62b70 | Ctx 9a62ac4(Function) -> p 968a6f4
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 254] QualType 
int identifier
IntegerLiteral 0x9a62ba0 'int' 5
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 306] Expr type: lhs 968a760, rhs 968a760
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 309] retAssign
BinaryOperator 0x9a65098 'int' lvalue '='
|-DeclRefExpr 0x9a6507c 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-IntegerLiteral 0x9a62ba0 'int' 5
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64f60 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a64f60 -> p 9a633b0 )
LabelStmt 0x9a64f60 '____label____7'
`-CompoundStmt 0x9a65038
  |-IfStmt 0x9a65018
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a62c08 '_Bool' '!='
  | | |-ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | | `-IntegerLiteral 0x9a62be0 'int' 0
  | |-CompoundStmt 0x9a65000
  | | |-LabelStmt 0x9a64ab0 '____label____0'
  | | | `-CompoundStmt 0x9a64f10
  | | |   |-DeclStmt 0x9a64b20
  | | |   | `-VarDecl 0x9a64ae0 ____localvar____9 'int'
  | | |   |   `-ParenExpr 0x9a64ac0 'int'
  | | |   |     `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
  | | |   |       `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | | |   |-IfStmt 0x9a64b30
  | | |   | |-<<<NULL>>>
  | | |   | |-BinaryOperator 0x9a64bf8 '_Bool' '=='
  | | |   | | |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
  | | |   | | | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | | |   | | `-IntegerLiteral 0x9a631e0 'int' 5
  | | |   | |-GotoStmt 0x9a64c10 '____label____2' 0x9a64b90
  | | |   | `-IfStmt 0x9a64cb0
  | | |   |   |-<<<NULL>>>
  | | |   |   |-BinaryOperator 0x9a64c88 '_Bool' '=='
  | | |   |   | |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
  | | |   |   | | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | | |   |   | `-IntegerLiteral 0x9a63158 'int' 4
  | | |   |   |-GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
  | | |   |   `-IfStmt 0x9a64d60
  | | |   |     |-<<<NULL>>>
  | | |   |     |-BinaryOperator 0x9a64d38 '_Bool' '=='
  | | |   |     | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
  | | |   |     | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | | |   |     | `-IntegerLiteral 0x9a62e38 'int' 3
  | | |   |     |-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
  | | |   |     `-IfStmt 0x9a64e10
  | | |   |       |-<<<NULL>>>
  | | |   |       |-BinaryOperator 0x9a64de8 '_Bool' '=='
  | | |   |       | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
  | | |   |       | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | | |   |       | `-IntegerLiteral 0x9a62d70 'int' 2
  | | |   |       |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
  | | |   |       `-IfStmt 0x9a64ec0
  | | |   |         |-<<<NULL>>>
  | | |   |         |-BinaryOperator 0x9a64e98 '_Bool' '=='
  | | |   |         | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
  | | |   |         | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | | |   |         | `-IntegerLiteral 0x9a62c68 'int' 1
  | | |   |         |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
  | | |   |         `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
  | | |   |-CompoundStmt 0x9a63370
  | | |   | |-LabelStmt 0x9a64e60 '____label____6'
  | | |   | | `-CompoundStmt 0x9a62d58
  | | |   | |   `-ReturnStmt 0x9a62d48
  | | |   | |     `-BinaryOperator 0x9a62d30 'double' '*'
  | | |   | |       |-BinaryOperator 0x9a62cf0 'double' '*'
  | | |   | |       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
  | | |   | |       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | | |   | |       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
  | | |   | |       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | | |   | |       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
  | | |   | |         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  | | |   | |-LabelStmt 0x9a64db0 '____label____5'
  | | |   | | `-CompoundStmt 0x9a62e20
  | | |   | |   `-ReturnStmt 0x9a62e10
  | | |   | |     `-BinaryOperator 0x9a62df8 'double' '*'
  | | |   | |       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
  | | |   | |       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | | |   | |       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
  | | |   | |         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | | |   | |-LabelStmt 0x9a64d00 '____label____4'
  | | |   | | `-CompoundStmt 0x9a63138
  | | |   | |   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
  | | |   | |   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | | |   | |   | `-CallExpr 0x9a62f78 'double'
  | | |   | |   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
  | | |   | |   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  | | |   | |   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
  | | |   | |   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  | | |   | |   |   `-BinaryOperator 0x9a62f18 'int' '/'
  | | |   | |   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
  | | |   | |   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  | | |   | |   |     `-IntegerLiteral 0x9a62ef0 'int' 2
  | | |   | |   |-IfStmt 0x9a63110
  | | |   | |   | |-<<<NULL>>>
  | | |   | |   | |-BinaryOperator 0x9a63038 '_Bool' '=='
  | | |   | |   | | |-BinaryOperator 0x9a63008 'int' '%'
  | | |   | |   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
  | | |   | |   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  | | |   | |   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
  | | |   | |   | | `-IntegerLiteral 0x9a63020 'int' 0
  | | |   | |   | |-CompoundStmt 0x9a63098
  | | |   | |   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
  | | |   | |   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | | |   | |   | |   `-IntegerLiteral 0x9a63068 'int' 2
  | | |   | |   | `-CompoundStmt 0x9a630f8
  | | |   | |   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
  | | |   | |   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | | |   | |   |     `-IntegerLiteral 0x9a630c8 'int' 1
  | | |   | |   `-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
  | | |   | |-LabelStmt 0x9a64c50 '____label____3'
  | | |   | | `-CompoundStmt 0x9a631c8
  | | |   | |   `-ReturnStmt 0x9a631b8
  | | |   | |     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
  | | |   | |       `-IntegerLiteral 0x9a63190 'int' 1
  | | |   | `-LabelStmt 0x9a64bc0 '____label____2'
  | | |   |   `-CompoundStmt 0x9a63358
  | | |   |     |-IfStmt 0x9a63330
  | | |   |     | |-<<<NULL>>>
  | | |   |     | |-BinaryOperator 0x9a63258 '_Bool' '=='
  | | |   |     | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
  | | |   |     | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  | | |   |     | | `-IntegerLiteral 0x9a63230 'int' 0
  | | |   |     | |-CompoundStmt 0x9a632b8
  | | |   |     | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
  | | |   |     | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | | |   |     | |   `-IntegerLiteral 0x9a63288 'int' 4
  | | |   |     | `-CompoundStmt 0x9a63318
  | | |   |     |   `-BinaryOperator 0x9a63300 'int' lvalue '='
  | | |   |     |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | | |   |     |     `-IntegerLiteral 0x9a632e8 'int' 3
  | | |   |     `-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
  | | |   `-LabelStmt 0x9a64b80 '____label____1'
  | | |     `-NullStmt 0x9a64b70
  | | `-LabelStmt 0x9a64fa0 '____label____8'
  | |   `-GotoStmt 0x9a64ff0 '____label____7' 0x9a64f30
  | `-<<<NULL>>>
  `-LabelStmt 0x9a64fe0 '____label____9'
    `-NullStmt 0x9a64fd0
____label____7:
{
    if (____localvar____8 != 0) {
      ____label____0:
        {
            int ____localvar____9 = (____localvar____8);
            if (____localvar____9 == 5)
                goto ____label____2;
            else if (____localvar____9 == 4)
                goto ____label____3;
            else if (____localvar____9 == 3)
                goto ____label____4;
            else if (____localvar____9 == 2)
                goto ____label____5;
            else if (____localvar____9 == 1)
                goto ____label____6;
            else
                goto ____label____1;
            {
              ____label____6:
                {
                    return ____localvar____7 * ____localvar____7 * ____localvar____5;
                }
              ____label____5:
                {
                    return ____localvar____7 * ____localvar____7;
                }
              ____label____4:
                {
                    ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
                    if (____localvar____6 % 2 == 0) {
                        ____localvar____8 = 2;
                    } else {
                        ____localvar____8 = 1;
                    }
                    goto ____label____1;
                }
              ____label____3:
                {
                    return 1;
                }
              ____label____2:
                {
                    if (____localvar____6 == 0) {
                        ____localvar____8 = 4;
                    } else {
                        ____localvar____8 = 3;
                    }
                    goto ____label____1;
                }
            }
          ____label____1:
            ;
        }
      ____label____8:
        goto ____label____7;
    }
  ____label____9:
    ;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a65038 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a65038 -> p 9a64f60 )
CompoundStmt 0x9a65038
|-IfStmt 0x9a65018
| |-<<<NULL>>>
| |-BinaryOperator 0x9a62c08 '_Bool' '!='
| | |-ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| | `-IntegerLiteral 0x9a62be0 'int' 0
| |-CompoundStmt 0x9a65000
| | |-LabelStmt 0x9a64ab0 '____label____0'
| | | `-CompoundStmt 0x9a64f10
| | |   |-DeclStmt 0x9a64b20
| | |   | `-VarDecl 0x9a64ae0 ____localvar____9 'int'
| | |   |   `-ParenExpr 0x9a64ac0 'int'
| | |   |     `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
| | |   |       `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| | |   |-IfStmt 0x9a64b30
| | |   | |-<<<NULL>>>
| | |   | |-BinaryOperator 0x9a64bf8 '_Bool' '=='
| | |   | | |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
| | |   | | | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| | |   | | `-IntegerLiteral 0x9a631e0 'int' 5
| | |   | |-GotoStmt 0x9a64c10 '____label____2' 0x9a64b90
| | |   | `-IfStmt 0x9a64cb0
| | |   |   |-<<<NULL>>>
| | |   |   |-BinaryOperator 0x9a64c88 '_Bool' '=='
| | |   |   | |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
| | |   |   | | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| | |   |   | `-IntegerLiteral 0x9a63158 'int' 4
| | |   |   |-GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
| | |   |   `-IfStmt 0x9a64d60
| | |   |     |-<<<NULL>>>
| | |   |     |-BinaryOperator 0x9a64d38 '_Bool' '=='
| | |   |     | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
| | |   |     | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| | |   |     | `-IntegerLiteral 0x9a62e38 'int' 3
| | |   |     |-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
| | |   |     `-IfStmt 0x9a64e10
| | |   |       |-<<<NULL>>>
| | |   |       |-BinaryOperator 0x9a64de8 '_Bool' '=='
| | |   |       | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
| | |   |       | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| | |   |       | `-IntegerLiteral 0x9a62d70 'int' 2
| | |   |       |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
| | |   |       `-IfStmt 0x9a64ec0
| | |   |         |-<<<NULL>>>
| | |   |         |-BinaryOperator 0x9a64e98 '_Bool' '=='
| | |   |         | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
| | |   |         | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| | |   |         | `-IntegerLiteral 0x9a62c68 'int' 1
| | |   |         |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
| | |   |         `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
| | |   |-CompoundStmt 0x9a63370
| | |   | |-LabelStmt 0x9a64e60 '____label____6'
| | |   | | `-CompoundStmt 0x9a62d58
| | |   | |   `-ReturnStmt 0x9a62d48
| | |   | |     `-BinaryOperator 0x9a62d30 'double' '*'
| | |   | |       |-BinaryOperator 0x9a62cf0 'double' '*'
| | |   | |       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
| | |   | |       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| | |   | |       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
| | |   | |       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| | |   | |       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
| | |   | |         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
| | |   | |-LabelStmt 0x9a64db0 '____label____5'
| | |   | | `-CompoundStmt 0x9a62e20
| | |   | |   `-ReturnStmt 0x9a62e10
| | |   | |     `-BinaryOperator 0x9a62df8 'double' '*'
| | |   | |       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
| | |   | |       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| | |   | |       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
| | |   | |         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| | |   | |-LabelStmt 0x9a64d00 '____label____4'
| | |   | | `-CompoundStmt 0x9a63138
| | |   | |   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
| | |   | |   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| | |   | |   | `-CallExpr 0x9a62f78 'double'
| | |   | |   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
| | |   | |   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
| | |   | |   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
| | |   | |   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
| | |   | |   |   `-BinaryOperator 0x9a62f18 'int' '/'
| | |   | |   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
| | |   | |   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| | |   | |   |     `-IntegerLiteral 0x9a62ef0 'int' 2
| | |   | |   |-IfStmt 0x9a63110
| | |   | |   | |-<<<NULL>>>
| | |   | |   | |-BinaryOperator 0x9a63038 '_Bool' '=='
| | |   | |   | | |-BinaryOperator 0x9a63008 'int' '%'
| | |   | |   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
| | |   | |   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| | |   | |   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
| | |   | |   | | `-IntegerLiteral 0x9a63020 'int' 0
| | |   | |   | |-CompoundStmt 0x9a63098
| | |   | |   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
| | |   | |   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| | |   | |   | |   `-IntegerLiteral 0x9a63068 'int' 2
| | |   | |   | `-CompoundStmt 0x9a630f8
| | |   | |   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
| | |   | |   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| | |   | |   |     `-IntegerLiteral 0x9a630c8 'int' 1
| | |   | |   `-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
| | |   | |-LabelStmt 0x9a64c50 '____label____3'
| | |   | | `-CompoundStmt 0x9a631c8
| | |   | |   `-ReturnStmt 0x9a631b8
| | |   | |     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
| | |   | |       `-IntegerLiteral 0x9a63190 'int' 1
| | |   | `-LabelStmt 0x9a64bc0 '____label____2'
| | |   |   `-CompoundStmt 0x9a63358
| | |   |     |-IfStmt 0x9a63330
| | |   |     | |-<<<NULL>>>
| | |   |     | |-BinaryOperator 0x9a63258 '_Bool' '=='
| | |   |     | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
| | |   |     | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| | |   |     | | `-IntegerLiteral 0x9a63230 'int' 0
| | |   |     | |-CompoundStmt 0x9a632b8
| | |   |     | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
| | |   |     | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| | |   |     | |   `-IntegerLiteral 0x9a63288 'int' 4
| | |   |     | `-CompoundStmt 0x9a63318
| | |   |     |   `-BinaryOperator 0x9a63300 'int' lvalue '='
| | |   |     |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| | |   |     |     `-IntegerLiteral 0x9a632e8 'int' 3
| | |   |     `-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
| | |   `-LabelStmt 0x9a64b80 '____label____1'
| | |     `-NullStmt 0x9a64b70
| | `-LabelStmt 0x9a64fa0 '____label____8'
| |   `-GotoStmt 0x9a64ff0 '____label____7' 0x9a64f30
| `-<<<NULL>>>
`-LabelStmt 0x9a64fe0 '____label____9'
  `-NullStmt 0x9a64fd0
{
    if (____localvar____8 != 0) {
      ____label____0:
        {
            int ____localvar____9 = (____localvar____8);
            if (____localvar____9 == 5)
                goto ____label____2;
            else if (____localvar____9 == 4)
                goto ____label____3;
            else if (____localvar____9 == 3)
                goto ____label____4;
            else if (____localvar____9 == 2)
                goto ____label____5;
            else if (____localvar____9 == 1)
                goto ____label____6;
            else
                goto ____label____1;
            {
              ____label____6:
                {
                    return ____localvar____7 * ____localvar____7 * ____localvar____5;
                }
              ____label____5:
                {
                    return ____localvar____7 * ____localvar____7;
                }
              ____label____4:
                {
                    ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
                    if (____localvar____6 % 2 == 0) {
                        ____localvar____8 = 2;
                    } else {
                        ____localvar____8 = 1;
                    }
                    goto ____label____1;
                }
              ____label____3:
                {
                    return 1;
                }
              ____label____2:
                {
                    if (____localvar____6 == 0) {
                        ____localvar____8 = 4;
                    } else {
                        ____localvar____8 = 3;
                    }
                    goto ____label____1;
                }
            }
          ____label____1:
            ;
        }
      ____label____8:
        goto ____label____7;
    }
  ____label____9:
    ;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a65018 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 9a65018 -> p 9a65038 )
IfStmt 0x9a65018
|-<<<NULL>>>
|-BinaryOperator 0x9a62c08 '_Bool' '!='
| |-ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| `-IntegerLiteral 0x9a62be0 'int' 0
|-CompoundStmt 0x9a65000
| |-LabelStmt 0x9a64ab0 '____label____0'
| | `-CompoundStmt 0x9a64f10
| |   |-DeclStmt 0x9a64b20
| |   | `-VarDecl 0x9a64ae0 ____localvar____9 'int'
| |   |   `-ParenExpr 0x9a64ac0 'int'
| |   |     `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
| |   |       `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| |   |-IfStmt 0x9a64b30
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator 0x9a64bf8 '_Bool' '=='
| |   | | |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| |   | | `-IntegerLiteral 0x9a631e0 'int' 5
| |   | |-GotoStmt 0x9a64c10 '____label____2' 0x9a64b90
| |   | `-IfStmt 0x9a64cb0
| |   |   |-<<<NULL>>>
| |   |   |-BinaryOperator 0x9a64c88 '_Bool' '=='
| |   |   | |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
| |   |   | | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| |   |   | `-IntegerLiteral 0x9a63158 'int' 4
| |   |   |-GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
| |   |   `-IfStmt 0x9a64d60
| |   |     |-<<<NULL>>>
| |   |     |-BinaryOperator 0x9a64d38 '_Bool' '=='
| |   |     | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
| |   |     | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| |   |     | `-IntegerLiteral 0x9a62e38 'int' 3
| |   |     |-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
| |   |     `-IfStmt 0x9a64e10
| |   |       |-<<<NULL>>>
| |   |       |-BinaryOperator 0x9a64de8 '_Bool' '=='
| |   |       | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
| |   |       | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| |   |       | `-IntegerLiteral 0x9a62d70 'int' 2
| |   |       |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
| |   |       `-IfStmt 0x9a64ec0
| |   |         |-<<<NULL>>>
| |   |         |-BinaryOperator 0x9a64e98 '_Bool' '=='
| |   |         | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
| |   |         | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| |   |         | `-IntegerLiteral 0x9a62c68 'int' 1
| |   |         |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
| |   |         `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
| |   |-CompoundStmt 0x9a63370
| |   | |-LabelStmt 0x9a64e60 '____label____6'
| |   | | `-CompoundStmt 0x9a62d58
| |   | |   `-ReturnStmt 0x9a62d48
| |   | |     `-BinaryOperator 0x9a62d30 'double' '*'
| |   | |       |-BinaryOperator 0x9a62cf0 'double' '*'
| |   | |       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
| |   | |       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| |   | |       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
| |   | |       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| |   | |       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
| |   | |         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
| |   | |-LabelStmt 0x9a64db0 '____label____5'
| |   | | `-CompoundStmt 0x9a62e20
| |   | |   `-ReturnStmt 0x9a62e10
| |   | |     `-BinaryOperator 0x9a62df8 'double' '*'
| |   | |       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
| |   | |       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| |   | |       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
| |   | |         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| |   | |-LabelStmt 0x9a64d00 '____label____4'
| |   | | `-CompoundStmt 0x9a63138
| |   | |   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
| |   | |   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| |   | |   | `-CallExpr 0x9a62f78 'double'
| |   | |   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
| |   | |   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
| |   | |   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
| |   | |   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
| |   | |   |   `-BinaryOperator 0x9a62f18 'int' '/'
| |   | |   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
| |   | |   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| |   | |   |     `-IntegerLiteral 0x9a62ef0 'int' 2
| |   | |   |-IfStmt 0x9a63110
| |   | |   | |-<<<NULL>>>
| |   | |   | |-BinaryOperator 0x9a63038 '_Bool' '=='
| |   | |   | | |-BinaryOperator 0x9a63008 'int' '%'
| |   | |   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
| |   | |   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| |   | |   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
| |   | |   | | `-IntegerLiteral 0x9a63020 'int' 0
| |   | |   | |-CompoundStmt 0x9a63098
| |   | |   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
| |   | |   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| |   | |   | |   `-IntegerLiteral 0x9a63068 'int' 2
| |   | |   | `-CompoundStmt 0x9a630f8
| |   | |   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
| |   | |   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| |   | |   |     `-IntegerLiteral 0x9a630c8 'int' 1
| |   | |   `-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
| |   | |-LabelStmt 0x9a64c50 '____label____3'
| |   | | `-CompoundStmt 0x9a631c8
| |   | |   `-ReturnStmt 0x9a631b8
| |   | |     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
| |   | |       `-IntegerLiteral 0x9a63190 'int' 1
| |   | `-LabelStmt 0x9a64bc0 '____label____2'
| |   |   `-CompoundStmt 0x9a63358
| |   |     |-IfStmt 0x9a63330
| |   |     | |-<<<NULL>>>
| |   |     | |-BinaryOperator 0x9a63258 '_Bool' '=='
| |   |     | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
| |   |     | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| |   |     | | `-IntegerLiteral 0x9a63230 'int' 0
| |   |     | |-CompoundStmt 0x9a632b8
| |   |     | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
| |   |     | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| |   |     | |   `-IntegerLiteral 0x9a63288 'int' 4
| |   |     | `-CompoundStmt 0x9a63318
| |   |     |   `-BinaryOperator 0x9a63300 'int' lvalue '='
| |   |     |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| |   |     |     `-IntegerLiteral 0x9a632e8 'int' 3
| |   |     `-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
| |   `-LabelStmt 0x9a64b80 '____label____1'
| |     `-NullStmt 0x9a64b70
| `-LabelStmt 0x9a64fa0 '____label____8'
|   `-GotoStmt 0x9a64ff0 '____label____7' 0x9a64f30
`-<<<NULL>>>
if (____localvar____8 != 0) {
  ____label____0:
    {
        int ____localvar____9 = (____localvar____8);
        if (____localvar____9 == 5)
            goto ____label____2;
        else if (____localvar____9 == 4)
            goto ____label____3;
        else if (____localvar____9 == 3)
            goto ____label____4;
        else if (____localvar____9 == 2)
            goto ____label____5;
        else if (____localvar____9 == 1)
            goto ____label____6;
        else
            goto ____label____1;
        {
          ____label____6:
            {
                return ____localvar____7 * ____localvar____7 * ____localvar____5;
            }
          ____label____5:
            {
                return ____localvar____7 * ____localvar____7;
            }
          ____label____4:
            {
                ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
                if (____localvar____6 % 2 == 0) {
                    ____localvar____8 = 2;
                } else {
                    ____localvar____8 = 1;
                }
                goto ____label____1;
            }
          ____label____3:
            {
                return 1;
            }
          ____label____2:
            {
                if (____localvar____6 == 0) {
                    ____localvar____8 = 4;
                } else {
                    ____localvar____8 = 3;
                }
                goto ____label____1;
            }
        }
      ____label____1:
        ;
    }
  ____label____8:
    goto ____label____7;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c08 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a62c08 -> p 9a65018 )
BinaryOperator 0x9a62c08 '_Bool' '!='
|-ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-IntegerLiteral 0x9a62be0 'int' 0
____localvar____8 != 0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62bf8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a62bf8 -> p 9a62c08 )
ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
`-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62bc8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62bc8 -> p 9a62bf8 )
DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62bc8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62bf8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62be0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a62be0 -> p 9a62c08 )
IntegerLiteral 0x9a62be0 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62be0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c08 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a65000 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a65000 -> p 9a65018 )
CompoundStmt 0x9a65000
|-LabelStmt 0x9a64ab0 '____label____0'
| `-CompoundStmt 0x9a64f10
|   |-DeclStmt 0x9a64b20
|   | `-VarDecl 0x9a64ae0 ____localvar____9 'int'
|   |   `-ParenExpr 0x9a64ac0 'int'
|   |     `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   |-IfStmt 0x9a64b30
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x9a64bf8 '_Bool' '=='
|   | | |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
|   | | `-IntegerLiteral 0x9a631e0 'int' 5
|   | |-GotoStmt 0x9a64c10 '____label____2' 0x9a64b90
|   | `-IfStmt 0x9a64cb0
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x9a64c88 '_Bool' '=='
|   |   | |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
|   |   | `-IntegerLiteral 0x9a63158 'int' 4
|   |   |-GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
|   |   `-IfStmt 0x9a64d60
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x9a64d38 '_Bool' '=='
|   |     | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
|   |     | `-IntegerLiteral 0x9a62e38 'int' 3
|   |     |-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
|   |     `-IfStmt 0x9a64e10
|   |       |-<<<NULL>>>
|   |       |-BinaryOperator 0x9a64de8 '_Bool' '=='
|   |       | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
|   |       | `-IntegerLiteral 0x9a62d70 'int' 2
|   |       |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
|   |       `-IfStmt 0x9a64ec0
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x9a64e98 '_Bool' '=='
|   |         | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
|   |         | `-IntegerLiteral 0x9a62c68 'int' 1
|   |         |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
|   |         `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
|   |-CompoundStmt 0x9a63370
|   | |-LabelStmt 0x9a64e60 '____label____6'
|   | | `-CompoundStmt 0x9a62d58
|   | |   `-ReturnStmt 0x9a62d48
|   | |     `-BinaryOperator 0x9a62d30 'double' '*'
|   | |       |-BinaryOperator 0x9a62cf0 'double' '*'
|   | |       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
|   | |       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|   | |       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|   | |       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
|   | |         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
|   | |-LabelStmt 0x9a64db0 '____label____5'
|   | | `-CompoundStmt 0x9a62e20
|   | |   `-ReturnStmt 0x9a62e10
|   | |     `-BinaryOperator 0x9a62df8 'double' '*'
|   | |       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|   | |       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
|   | |         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|   | |-LabelStmt 0x9a64d00 '____label____4'
|   | | `-CompoundStmt 0x9a63138
|   | |   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
|   | |   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|   | |   | `-CallExpr 0x9a62f78 'double'
|   | |   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|   | |   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
|   | |   |   `-BinaryOperator 0x9a62f18 'int' '/'
|   | |   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
|   | |   |     `-IntegerLiteral 0x9a62ef0 'int' 2
|   | |   |-IfStmt 0x9a63110
|   | |   | |-<<<NULL>>>
|   | |   | |-BinaryOperator 0x9a63038 '_Bool' '=='
|   | |   | | |-BinaryOperator 0x9a63008 'int' '%'
|   | |   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
|   | |   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
|   | |   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
|   | |   | | `-IntegerLiteral 0x9a63020 'int' 0
|   | |   | |-CompoundStmt 0x9a63098
|   | |   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
|   | |   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   | |   | |   `-IntegerLiteral 0x9a63068 'int' 2
|   | |   | `-CompoundStmt 0x9a630f8
|   | |   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
|   | |   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   | |   |     `-IntegerLiteral 0x9a630c8 'int' 1
|   | |   `-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
|   | |-LabelStmt 0x9a64c50 '____label____3'
|   | | `-CompoundStmt 0x9a631c8
|   | |   `-ReturnStmt 0x9a631b8
|   | |     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
|   | |       `-IntegerLiteral 0x9a63190 'int' 1
|   | `-LabelStmt 0x9a64bc0 '____label____2'
|   |   `-CompoundStmt 0x9a63358
|   |     |-IfStmt 0x9a63330
|   |     | |-<<<NULL>>>
|   |     | |-BinaryOperator 0x9a63258 '_Bool' '=='
|   |     | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
|   |     | | `-IntegerLiteral 0x9a63230 'int' 0
|   |     | |-CompoundStmt 0x9a632b8
|   |     | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
|   |     | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   |     | |   `-IntegerLiteral 0x9a63288 'int' 4
|   |     | `-CompoundStmt 0x9a63318
|   |     |   `-BinaryOperator 0x9a63300 'int' lvalue '='
|   |     |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   |     |     `-IntegerLiteral 0x9a632e8 'int' 3
|   |     `-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
|   `-LabelStmt 0x9a64b80 '____label____1'
|     `-NullStmt 0x9a64b70
`-LabelStmt 0x9a64fa0 '____label____8'
  `-GotoStmt 0x9a64ff0 '____label____7' 0x9a64f30
{
  ____label____0:
    {
        int ____localvar____9 = (____localvar____8);
        if (____localvar____9 == 5)
            goto ____label____2;
        else if (____localvar____9 == 4)
            goto ____label____3;
        else if (____localvar____9 == 3)
            goto ____label____4;
        else if (____localvar____9 == 2)
            goto ____label____5;
        else if (____localvar____9 == 1)
            goto ____label____6;
        else
            goto ____label____1;
        {
          ____label____6:
            {
                return ____localvar____7 * ____localvar____7 * ____localvar____5;
            }
          ____label____5:
            {
                return ____localvar____7 * ____localvar____7;
            }
          ____label____4:
            {
                ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
                if (____localvar____6 % 2 == 0) {
                    ____localvar____8 = 2;
                } else {
                    ____localvar____8 = 1;
                }
                goto ____label____1;
            }
          ____label____3:
            {
                return 1;
            }
          ____label____2:
            {
                if (____localvar____6 == 0) {
                    ____localvar____8 = 4;
                } else {
                    ____localvar____8 = 3;
                }
                goto ____label____1;
            }
        }
      ____label____1:
        ;
    }
  ____label____8:
    goto ____label____7;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ab0 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a64ab0 -> p 9a65000 )
LabelStmt 0x9a64ab0 '____label____0'
`-CompoundStmt 0x9a64f10
  |-DeclStmt 0x9a64b20
  | `-VarDecl 0x9a64ae0 ____localvar____9 'int'
  |   `-ParenExpr 0x9a64ac0 'int'
  |     `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
  |       `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  |-IfStmt 0x9a64b30
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a64bf8 '_Bool' '=='
  | | |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | | `-IntegerLiteral 0x9a631e0 'int' 5
  | |-GotoStmt 0x9a64c10 '____label____2' 0x9a64b90
  | `-IfStmt 0x9a64cb0
  |   |-<<<NULL>>>
  |   |-BinaryOperator 0x9a64c88 '_Bool' '=='
  |   | |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
  |   | | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  |   | `-IntegerLiteral 0x9a63158 'int' 4
  |   |-GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
  |   `-IfStmt 0x9a64d60
  |     |-<<<NULL>>>
  |     |-BinaryOperator 0x9a64d38 '_Bool' '=='
  |     | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
  |     | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  |     | `-IntegerLiteral 0x9a62e38 'int' 3
  |     |-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
  |     `-IfStmt 0x9a64e10
  |       |-<<<NULL>>>
  |       |-BinaryOperator 0x9a64de8 '_Bool' '=='
  |       | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
  |       | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  |       | `-IntegerLiteral 0x9a62d70 'int' 2
  |       |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
  |       `-IfStmt 0x9a64ec0
  |         |-<<<NULL>>>
  |         |-BinaryOperator 0x9a64e98 '_Bool' '=='
  |         | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
  |         | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  |         | `-IntegerLiteral 0x9a62c68 'int' 1
  |         |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
  |         `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
  |-CompoundStmt 0x9a63370
  | |-LabelStmt 0x9a64e60 '____label____6'
  | | `-CompoundStmt 0x9a62d58
  | |   `-ReturnStmt 0x9a62d48
  | |     `-BinaryOperator 0x9a62d30 'double' '*'
  | |       |-BinaryOperator 0x9a62cf0 'double' '*'
  | |       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
  | |       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | |       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
  | |       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | |       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
  | |         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  | |-LabelStmt 0x9a64db0 '____label____5'
  | | `-CompoundStmt 0x9a62e20
  | |   `-ReturnStmt 0x9a62e10
  | |     `-BinaryOperator 0x9a62df8 'double' '*'
  | |       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
  | |       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | |       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
  | |         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | |-LabelStmt 0x9a64d00 '____label____4'
  | | `-CompoundStmt 0x9a63138
  | |   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
  | |   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | |   | `-CallExpr 0x9a62f78 'double'
  | |   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
  | |   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  | |   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
  | |   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  | |   |   `-BinaryOperator 0x9a62f18 'int' '/'
  | |   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
  | |   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  | |   |     `-IntegerLiteral 0x9a62ef0 'int' 2
  | |   |-IfStmt 0x9a63110
  | |   | |-<<<NULL>>>
  | |   | |-BinaryOperator 0x9a63038 '_Bool' '=='
  | |   | | |-BinaryOperator 0x9a63008 'int' '%'
  | |   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
  | |   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  | |   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
  | |   | | `-IntegerLiteral 0x9a63020 'int' 0
  | |   | |-CompoundStmt 0x9a63098
  | |   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
  | |   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | |   | |   `-IntegerLiteral 0x9a63068 'int' 2
  | |   | `-CompoundStmt 0x9a630f8
  | |   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
  | |   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | |   |     `-IntegerLiteral 0x9a630c8 'int' 1
  | |   `-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
  | |-LabelStmt 0x9a64c50 '____label____3'
  | | `-CompoundStmt 0x9a631c8
  | |   `-ReturnStmt 0x9a631b8
  | |     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
  | |       `-IntegerLiteral 0x9a63190 'int' 1
  | `-LabelStmt 0x9a64bc0 '____label____2'
  |   `-CompoundStmt 0x9a63358
  |     |-IfStmt 0x9a63330
  |     | |-<<<NULL>>>
  |     | |-BinaryOperator 0x9a63258 '_Bool' '=='
  |     | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
  |     | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  |     | | `-IntegerLiteral 0x9a63230 'int' 0
  |     | |-CompoundStmt 0x9a632b8
  |     | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
  |     | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  |     | |   `-IntegerLiteral 0x9a63288 'int' 4
  |     | `-CompoundStmt 0x9a63318
  |     |   `-BinaryOperator 0x9a63300 'int' lvalue '='
  |     |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  |     |     `-IntegerLiteral 0x9a632e8 'int' 3
  |     `-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
  `-LabelStmt 0x9a64b80 '____label____1'
    `-NullStmt 0x9a64b70
____label____0:
{
    int ____localvar____9 = (____localvar____8);
    if (____localvar____9 == 5)
        goto ____label____2;
    else if (____localvar____9 == 4)
        goto ____label____3;
    else if (____localvar____9 == 3)
        goto ____label____4;
    else if (____localvar____9 == 2)
        goto ____label____5;
    else if (____localvar____9 == 1)
        goto ____label____6;
    else
        goto ____label____1;
    {
      ____label____6:
        {
            return ____localvar____7 * ____localvar____7 * ____localvar____5;
        }
      ____label____5:
        {
            return ____localvar____7 * ____localvar____7;
        }
      ____label____4:
        {
            ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
            if (____localvar____6 % 2 == 0) {
                ____localvar____8 = 2;
            } else {
                ____localvar____8 = 1;
            }
            goto ____label____1;
        }
      ____label____3:
        {
            return 1;
        }
      ____label____2:
        {
            if (____localvar____6 == 0) {
                ____localvar____8 = 4;
            } else {
                ____localvar____8 = 3;
            }
            goto ____label____1;
        }
    }
  ____label____1:
    ;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64f10 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a64f10 -> p 9a64ab0 )
CompoundStmt 0x9a64f10
|-DeclStmt 0x9a64b20
| `-VarDecl 0x9a64ae0 ____localvar____9 'int'
|   `-ParenExpr 0x9a64ac0 'int'
|     `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
|       `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|-IfStmt 0x9a64b30
| |-<<<NULL>>>
| |-BinaryOperator 0x9a64bf8 '_Bool' '=='
| | |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| | `-IntegerLiteral 0x9a631e0 'int' 5
| |-GotoStmt 0x9a64c10 '____label____2' 0x9a64b90
| `-IfStmt 0x9a64cb0
|   |-<<<NULL>>>
|   |-BinaryOperator 0x9a64c88 '_Bool' '=='
|   | |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
|   | `-IntegerLiteral 0x9a63158 'int' 4
|   |-GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
|   `-IfStmt 0x9a64d60
|     |-<<<NULL>>>
|     |-BinaryOperator 0x9a64d38 '_Bool' '=='
|     | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
|     | `-IntegerLiteral 0x9a62e38 'int' 3
|     |-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
|     `-IfStmt 0x9a64e10
|       |-<<<NULL>>>
|       |-BinaryOperator 0x9a64de8 '_Bool' '=='
|       | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
|       | `-IntegerLiteral 0x9a62d70 'int' 2
|       |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
|       `-IfStmt 0x9a64ec0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x9a64e98 '_Bool' '=='
|         | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
|         | `-IntegerLiteral 0x9a62c68 'int' 1
|         |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
|         `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
|-CompoundStmt 0x9a63370
| |-LabelStmt 0x9a64e60 '____label____6'
| | `-CompoundStmt 0x9a62d58
| |   `-ReturnStmt 0x9a62d48
| |     `-BinaryOperator 0x9a62d30 'double' '*'
| |       |-BinaryOperator 0x9a62cf0 'double' '*'
| |       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
| |       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| |       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
| |       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| |       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
| |         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
| |-LabelStmt 0x9a64db0 '____label____5'
| | `-CompoundStmt 0x9a62e20
| |   `-ReturnStmt 0x9a62e10
| |     `-BinaryOperator 0x9a62df8 'double' '*'
| |       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
| |       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| |       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
| |         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| |-LabelStmt 0x9a64d00 '____label____4'
| | `-CompoundStmt 0x9a63138
| |   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
| |   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| |   | `-CallExpr 0x9a62f78 'double'
| |   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
| |   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
| |   |   `-BinaryOperator 0x9a62f18 'int' '/'
| |   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
| |   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| |   |     `-IntegerLiteral 0x9a62ef0 'int' 2
| |   |-IfStmt 0x9a63110
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator 0x9a63038 '_Bool' '=='
| |   | | |-BinaryOperator 0x9a63008 'int' '%'
| |   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
| |   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| |   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
| |   | | `-IntegerLiteral 0x9a63020 'int' 0
| |   | |-CompoundStmt 0x9a63098
| |   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
| |   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| |   | |   `-IntegerLiteral 0x9a63068 'int' 2
| |   | `-CompoundStmt 0x9a630f8
| |   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
| |   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| |   |     `-IntegerLiteral 0x9a630c8 'int' 1
| |   `-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
| |-LabelStmt 0x9a64c50 '____label____3'
| | `-CompoundStmt 0x9a631c8
| |   `-ReturnStmt 0x9a631b8
| |     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
| |       `-IntegerLiteral 0x9a63190 'int' 1
| `-LabelStmt 0x9a64bc0 '____label____2'
|   `-CompoundStmt 0x9a63358
|     |-IfStmt 0x9a63330
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x9a63258 '_Bool' '=='
|     | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
|     | | `-IntegerLiteral 0x9a63230 'int' 0
|     | |-CompoundStmt 0x9a632b8
|     | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
|     | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|     | |   `-IntegerLiteral 0x9a63288 'int' 4
|     | `-CompoundStmt 0x9a63318
|     |   `-BinaryOperator 0x9a63300 'int' lvalue '='
|     |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|     |     `-IntegerLiteral 0x9a632e8 'int' 3
|     `-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
`-LabelStmt 0x9a64b80 '____label____1'
  `-NullStmt 0x9a64b70
{
    int ____localvar____9 = (____localvar____8);
    if (____localvar____9 == 5)
        goto ____label____2;
    else if (____localvar____9 == 4)
        goto ____label____3;
    else if (____localvar____9 == 3)
        goto ____label____4;
    else if (____localvar____9 == 2)
        goto ____label____5;
    else if (____localvar____9 == 1)
        goto ____label____6;
    else
        goto ____label____1;
    {
      ____label____6:
        {
            return ____localvar____7 * ____localvar____7 * ____localvar____5;
        }
      ____label____5:
        {
            return ____localvar____7 * ____localvar____7;
        }
      ____label____4:
        {
            ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
            if (____localvar____6 % 2 == 0) {
                ____localvar____8 = 2;
            } else {
                ____localvar____8 = 1;
            }
            goto ____label____1;
        }
      ____label____3:
        {
            return 1;
        }
      ____label____2:
        {
            if (____localvar____6 == 0) {
                ____localvar____8 = 4;
            } else {
                ____localvar____8 = 3;
            }
            goto ____label____1;
        }
    }
  ____label____1:
    ;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64b20 (DeclStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclStmt ( 9a64b20 -> p 9a64f10 )
DeclStmt 0x9a64b20
`-VarDecl 0x9a64ae0 ____localvar____9 'int'
  `-ParenExpr 0x9a64ac0 'int'
    `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
      `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
int ____localvar____9 = (____localvar____8);
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a64ae0 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ac0 (ParenExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ParenExpr ( 9a64ac0 -> p 9a64b20 )
ParenExpr 0x9a64ac0 'int'
`-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
  `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
(____localvar____8)[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c38 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a62c38 -> p 9a64ac0 )
ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
`-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c20 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62c20 -> p 9a62c38 )
DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c20 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c38 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ac0 (ParenExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a64ae0 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64b20 (DeclStmt)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 177] WorkOnDeclStmt
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 229] Handle VarDecl ____localvar____9 9a64ae0 | Ctx 968a6f4(TranslationUnit) -> p 0
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 254] QualType 
int identifier
ParenExpr 0x9a64ac0 'int'
`-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
  `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 306] Expr type: lhs 968a760, rhs 968a760
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 309] retAssign
BinaryOperator 0x9a650d8 'int' lvalue '='
|-DeclRefExpr 0x9a650c0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
`-ParenExpr 0x9a64ac0 'int'
  `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
    `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64b30 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 9a64b30 -> p 9a64f10 )
IfStmt 0x9a64b30
|-<<<NULL>>>
|-BinaryOperator 0x9a64bf8 '_Bool' '=='
| |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| `-IntegerLiteral 0x9a631e0 'int' 5
|-GotoStmt 0x9a64c10 '____label____2' 0x9a64b90
`-IfStmt 0x9a64cb0
  |-<<<NULL>>>
  |-BinaryOperator 0x9a64c88 '_Bool' '=='
  | |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | `-IntegerLiteral 0x9a63158 'int' 4
  |-GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
  `-IfStmt 0x9a64d60
    |-<<<NULL>>>
    |-BinaryOperator 0x9a64d38 '_Bool' '=='
    | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | `-IntegerLiteral 0x9a62e38 'int' 3
    |-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
    `-IfStmt 0x9a64e10
      |-<<<NULL>>>
      |-BinaryOperator 0x9a64de8 '_Bool' '=='
      | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | `-IntegerLiteral 0x9a62d70 'int' 2
      |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
      `-IfStmt 0x9a64ec0
        |-<<<NULL>>>
        |-BinaryOperator 0x9a64e98 '_Bool' '=='
        | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
        | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
        | `-IntegerLiteral 0x9a62c68 'int' 1
        |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
        `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
if (____localvar____9 == 5)
    goto ____label____2;
else if (____localvar____9 == 4)
    goto ____label____3;
else if (____localvar____9 == 3)
    goto ____label____4;
else if (____localvar____9 == 2)
    goto ____label____5;
else if (____localvar____9 == 1)
    goto ____label____6;
else
    goto ____label____1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64bf8 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a64bf8 -> p 9a64b30 )
BinaryOperator 0x9a64bf8 '_Bool' '=='
|-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
`-IntegerLiteral 0x9a631e0 'int' 5
____localvar____9 == 5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64be8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a64be8 -> p 9a64bf8 )
ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
`-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
____localvar____9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64bd0 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a64bd0 -> p 9a64be8 )
DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
____localvar____9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64bd0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64be8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631e0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a631e0 -> p 9a64bf8 )
IntegerLiteral 0x9a631e0 'int' 5
5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631e0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64bf8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64c10 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a64c10 -> p 9a64b30 )
GotoStmt 0x9a64c10 '____label____2' 0x9a64b90
goto ____label____2;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64c10 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64cb0 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 9a64cb0 -> p 9a64b30 )
IfStmt 0x9a64cb0
|-<<<NULL>>>
|-BinaryOperator 0x9a64c88 '_Bool' '=='
| |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| `-IntegerLiteral 0x9a63158 'int' 4
|-GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
`-IfStmt 0x9a64d60
  |-<<<NULL>>>
  |-BinaryOperator 0x9a64d38 '_Bool' '=='
  | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | `-IntegerLiteral 0x9a62e38 'int' 3
  |-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
  `-IfStmt 0x9a64e10
    |-<<<NULL>>>
    |-BinaryOperator 0x9a64de8 '_Bool' '=='
    | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | `-IntegerLiteral 0x9a62d70 'int' 2
    |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
    `-IfStmt 0x9a64ec0
      |-<<<NULL>>>
      |-BinaryOperator 0x9a64e98 '_Bool' '=='
      | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | `-IntegerLiteral 0x9a62c68 'int' 1
      |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
      `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
if (____localvar____9 == 4)
    goto ____label____3;
else if (____localvar____9 == 3)
    goto ____label____4;
else if (____localvar____9 == 2)
    goto ____label____5;
else if (____localvar____9 == 1)
    goto ____label____6;
else
    goto ____label____1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64c88 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a64c88 -> p 9a64cb0 )
BinaryOperator 0x9a64c88 '_Bool' '=='
|-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
`-IntegerLiteral 0x9a63158 'int' 4
____localvar____9 == 4[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64c78 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a64c78 -> p 9a64c88 )
ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
`-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
____localvar____9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64c60 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a64c60 -> p 9a64c78 )
DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
____localvar____9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64c60 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64c78 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63158 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a63158 -> p 9a64c88 )
IntegerLiteral 0x9a63158 'int' 4
4[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63158 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64c88 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ca0 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a64ca0 -> p 9a64cb0 )
GotoStmt 0x9a64ca0 '____label____3' 0x9a64c20
goto ____label____3;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ca0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d60 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 9a64d60 -> p 9a64cb0 )
IfStmt 0x9a64d60
|-<<<NULL>>>
|-BinaryOperator 0x9a64d38 '_Bool' '=='
| |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| `-IntegerLiteral 0x9a62e38 'int' 3
|-GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
`-IfStmt 0x9a64e10
  |-<<<NULL>>>
  |-BinaryOperator 0x9a64de8 '_Bool' '=='
  | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | `-IntegerLiteral 0x9a62d70 'int' 2
  |-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
  `-IfStmt 0x9a64ec0
    |-<<<NULL>>>
    |-BinaryOperator 0x9a64e98 '_Bool' '=='
    | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
    | `-IntegerLiteral 0x9a62c68 'int' 1
    |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
    `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
if (____localvar____9 == 3)
    goto ____label____4;
else if (____localvar____9 == 2)
    goto ____label____5;
else if (____localvar____9 == 1)
    goto ____label____6;
else
    goto ____label____1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d38 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a64d38 -> p 9a64d60 )
BinaryOperator 0x9a64d38 '_Bool' '=='
|-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
`-IntegerLiteral 0x9a62e38 'int' 3
____localvar____9 == 3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d28 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a64d28 -> p 9a64d38 )
ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
`-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
____localvar____9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d10 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a64d10 -> p 9a64d28 )
DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
____localvar____9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d10 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d28 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e38 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a62e38 -> p 9a64d38 )
IntegerLiteral 0x9a62e38 'int' 3
3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e38 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d38 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d50 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a64d50 -> p 9a64d60 )
GotoStmt 0x9a64d50 '____label____4' 0x9a64cd0
goto ____label____4;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d50 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e10 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 9a64e10 -> p 9a64d60 )
IfStmt 0x9a64e10
|-<<<NULL>>>
|-BinaryOperator 0x9a64de8 '_Bool' '=='
| |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| `-IntegerLiteral 0x9a62d70 'int' 2
|-GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
`-IfStmt 0x9a64ec0
  |-<<<NULL>>>
  |-BinaryOperator 0x9a64e98 '_Bool' '=='
  | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | `-IntegerLiteral 0x9a62c68 'int' 1
  |-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
  `-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
if (____localvar____9 == 2)
    goto ____label____5;
else if (____localvar____9 == 1)
    goto ____label____6;
else
    goto ____label____1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64de8 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a64de8 -> p 9a64e10 )
BinaryOperator 0x9a64de8 '_Bool' '=='
|-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
`-IntegerLiteral 0x9a62d70 'int' 2
____localvar____9 == 2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64dd8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a64dd8 -> p 9a64de8 )
ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
`-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
____localvar____9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64dc0 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a64dc0 -> p 9a64dd8 )
DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
____localvar____9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64dc0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64dd8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d70 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a62d70 -> p 9a64de8 )
IntegerLiteral 0x9a62d70 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d70 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64de8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e00 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a64e00 -> p 9a64e10 )
GotoStmt 0x9a64e00 '____label____5' 0x9a64d80
goto ____label____5;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e00 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ec0 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 9a64ec0 -> p 9a64e10 )
IfStmt 0x9a64ec0
|-<<<NULL>>>
|-BinaryOperator 0x9a64e98 '_Bool' '=='
| |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| `-IntegerLiteral 0x9a62c68 'int' 1
|-GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
`-GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
if (____localvar____9 == 1)
    goto ____label____6;
else
    goto ____label____1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e98 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a64e98 -> p 9a64ec0 )
BinaryOperator 0x9a64e98 '_Bool' '=='
|-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
`-IntegerLiteral 0x9a62c68 'int' 1
____localvar____9 == 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e88 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a64e88 -> p 9a64e98 )
ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
`-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
____localvar____9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e70 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a64e70 -> p 9a64e88 )
DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
____localvar____9[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e70 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e88 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c68 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a62c68 -> p 9a64e98 )
IntegerLiteral 0x9a62c68 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c68 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e98 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64eb0 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a64eb0 -> p 9a64ec0 )
GotoStmt 0x9a64eb0 '____label____6' 0x9a64e30
goto ____label____6;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64eb0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ee0 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a64ee0 -> p 9a64ec0 )
GotoStmt 0x9a64ee0 '____label____1' 0x9a64b50
goto ____label____1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ee0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ec0 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e10 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d60 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64cb0 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64b30 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63370 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a63370 -> p 9a64f10 )
CompoundStmt 0x9a63370
|-LabelStmt 0x9a64e60 '____label____6'
| `-CompoundStmt 0x9a62d58
|   `-ReturnStmt 0x9a62d48
|     `-BinaryOperator 0x9a62d30 'double' '*'
|       |-BinaryOperator 0x9a62cf0 'double' '*'
|       | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
|       | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|       | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
|       |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|       `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
|         `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
|-LabelStmt 0x9a64db0 '____label____5'
| `-CompoundStmt 0x9a62e20
|   `-ReturnStmt 0x9a62e10
|     `-BinaryOperator 0x9a62df8 'double' '*'
|       |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
|       | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|       `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
|         `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|-LabelStmt 0x9a64d00 '____label____4'
| `-CompoundStmt 0x9a63138
|   |-BinaryOperator 0x9a62fb0 'double' lvalue '='
|   | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
|   | `-CallExpr 0x9a62f78 'double'
|   |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|   |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
|   |   `-BinaryOperator 0x9a62f18 'int' '/'
|   |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
|   |     `-IntegerLiteral 0x9a62ef0 'int' 2
|   |-IfStmt 0x9a63110
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x9a63038 '_Bool' '=='
|   | | |-BinaryOperator 0x9a63008 'int' '%'
|   | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
|   | | | `-IntegerLiteral 0x9a62fe0 'int' 2
|   | | `-IntegerLiteral 0x9a63020 'int' 0
|   | |-CompoundStmt 0x9a63098
|   | | `-BinaryOperator 0x9a63080 'int' lvalue '='
|   | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   | |   `-IntegerLiteral 0x9a63068 'int' 2
|   | `-CompoundStmt 0x9a630f8
|   |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
|   |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   |     `-IntegerLiteral 0x9a630c8 'int' 1
|   `-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
|-LabelStmt 0x9a64c50 '____label____3'
| `-CompoundStmt 0x9a631c8
|   `-ReturnStmt 0x9a631b8
|     `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
|       `-IntegerLiteral 0x9a63190 'int' 1
`-LabelStmt 0x9a64bc0 '____label____2'
  `-CompoundStmt 0x9a63358
    |-IfStmt 0x9a63330
    | |-<<<NULL>>>
    | |-BinaryOperator 0x9a63258 '_Bool' '=='
    | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    | | `-IntegerLiteral 0x9a63230 'int' 0
    | |-CompoundStmt 0x9a632b8
    | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
    | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    | |   `-IntegerLiteral 0x9a63288 'int' 4
    | `-CompoundStmt 0x9a63318
    |   `-BinaryOperator 0x9a63300 'int' lvalue '='
    |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    |     `-IntegerLiteral 0x9a632e8 'int' 3
    `-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
{
  ____label____6:
    {
        return ____localvar____7 * ____localvar____7 * ____localvar____5;
    }
  ____label____5:
    {
        return ____localvar____7 * ____localvar____7;
    }
  ____label____4:
    {
        ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
        if (____localvar____6 % 2 == 0) {
            ____localvar____8 = 2;
        } else {
            ____localvar____8 = 1;
        }
        goto ____label____1;
    }
  ____label____3:
    {
        return 1;
    }
  ____label____2:
    {
        if (____localvar____6 == 0) {
            ____localvar____8 = 4;
        } else {
            ____localvar____8 = 3;
        }
        goto ____label____1;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e60 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a64e60 -> p 9a63370 )
LabelStmt 0x9a64e60 '____label____6'
`-CompoundStmt 0x9a62d58
  `-ReturnStmt 0x9a62d48
    `-BinaryOperator 0x9a62d30 'double' '*'
      |-BinaryOperator 0x9a62cf0 'double' '*'
      | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
      | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
      |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
        `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
____label____6:
{
    return ____localvar____7 * ____localvar____7 * ____localvar____5;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d58 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a62d58 -> p 9a64e60 )
CompoundStmt 0x9a62d58
`-ReturnStmt 0x9a62d48
  `-BinaryOperator 0x9a62d30 'double' '*'
    |-BinaryOperator 0x9a62cf0 'double' '*'
    | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
    | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
    |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
      `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
{
    return ____localvar____7 * ____localvar____7 * ____localvar____5;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d48 (ReturnStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ReturnStmt ( 9a62d48 -> p 9a62d58 )
ReturnStmt 0x9a62d48
`-BinaryOperator 0x9a62d30 'double' '*'
  |-BinaryOperator 0x9a62cf0 'double' '*'
  | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
  | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
  |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
    `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
return ____localvar____7 * ____localvar____7 * ____localvar____5;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d30 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a62d30 -> p 9a62d48 )
BinaryOperator 0x9a62d30 'double' '*'
|-BinaryOperator 0x9a62cf0 'double' '*'
| |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
| | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
|   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
`-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
  `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
____localvar____7 * ____localvar____7 * ____localvar____5[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a62cf0 -> p 9a62d30 )
BinaryOperator 0x9a62cf0 'double' '*'
|-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
| `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
`-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
  `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7 * ____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62cd0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a62cd0 -> p 9a62cf0 )
ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ca0 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62ca0 -> p 9a62cd0 )
DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ca0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62cd0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ce0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a62ce0 -> p 9a62cf0 )
ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62cb8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62cb8 -> p 9a62ce0 )
DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62cb8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ce0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d20 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a62d20 -> p 9a62d30 )
ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
____localvar____5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d08 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62d08 -> p 9a62d20 )
DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
____localvar____5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d08 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d20 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d30 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d48 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d58 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e60 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64db0 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a64db0 -> p 9a63370 )
LabelStmt 0x9a64db0 '____label____5'
`-CompoundStmt 0x9a62e20
  `-ReturnStmt 0x9a62e10
    `-BinaryOperator 0x9a62df8 'double' '*'
      |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
      | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
        `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____label____5:
{
    return ____localvar____7 * ____localvar____7;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e20 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a62e20 -> p 9a64db0 )
CompoundStmt 0x9a62e20
`-ReturnStmt 0x9a62e10
  `-BinaryOperator 0x9a62df8 'double' '*'
    |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
    | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
    `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
      `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
{
    return ____localvar____7 * ____localvar____7;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e10 (ReturnStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ReturnStmt ( 9a62e10 -> p 9a62e20 )
ReturnStmt 0x9a62e10
`-BinaryOperator 0x9a62df8 'double' '*'
  |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
  | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
    `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
return ____localvar____7 * ____localvar____7;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62df8 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a62df8 -> p 9a62e10 )
BinaryOperator 0x9a62df8 'double' '*'
|-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
| `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
`-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
  `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7 * ____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62dd8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a62dd8 -> p 9a62df8 )
ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62da8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62da8 -> p 9a62dd8 )
DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62da8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62dd8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62de8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a62de8 -> p 9a62df8 )
ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62dc0 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62dc0 -> p 9a62de8 )
DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62dc0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62de8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62df8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e10 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e20 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64db0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d00 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a64d00 -> p 9a63370 )
LabelStmt 0x9a64d00 '____label____4'
`-CompoundStmt 0x9a63138
  |-BinaryOperator 0x9a62fb0 'double' lvalue '='
  | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | `-CallExpr 0x9a62f78 'double'
  |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
  |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
  |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  |   `-BinaryOperator 0x9a62f18 'int' '/'
  |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
  |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  |     `-IntegerLiteral 0x9a62ef0 'int' 2
  |-IfStmt 0x9a63110
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a63038 '_Bool' '=='
  | | |-BinaryOperator 0x9a63008 'int' '%'
  | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
  | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  | | | `-IntegerLiteral 0x9a62fe0 'int' 2
  | | `-IntegerLiteral 0x9a63020 'int' 0
  | |-CompoundStmt 0x9a63098
  | | `-BinaryOperator 0x9a63080 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | |   `-IntegerLiteral 0x9a63068 'int' 2
  | `-CompoundStmt 0x9a630f8
  |   `-BinaryOperator 0x9a630e0 'int' lvalue '='
  |     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  |     `-IntegerLiteral 0x9a630c8 'int' 1
  `-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
____label____4:
{
    ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
    if (____localvar____6 % 2 == 0) {
        ____localvar____8 = 2;
    } else {
        ____localvar____8 = 1;
    }
    goto ____label____1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63138 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a63138 -> p 9a64d00 )
CompoundStmt 0x9a63138
|-BinaryOperator 0x9a62fb0 'double' lvalue '='
| |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
| `-CallExpr 0x9a62f78 'double'
|   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
|   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
|   `-BinaryOperator 0x9a62f18 'int' '/'
|     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
|     `-IntegerLiteral 0x9a62ef0 'int' 2
|-IfStmt 0x9a63110
| |-<<<NULL>>>
| |-BinaryOperator 0x9a63038 '_Bool' '=='
| | |-BinaryOperator 0x9a63008 'int' '%'
| | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
| | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| | | `-IntegerLiteral 0x9a62fe0 'int' 2
| | `-IntegerLiteral 0x9a63020 'int' 0
| |-CompoundStmt 0x9a63098
| | `-BinaryOperator 0x9a63080 'int' lvalue '='
| |   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| |   `-IntegerLiteral 0x9a63068 'int' 2
| `-CompoundStmt 0x9a630f8
|   `-BinaryOperator 0x9a630e0 'int' lvalue '='
|     |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|     `-IntegerLiteral 0x9a630c8 'int' 1
`-GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
{
    ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
    if (____localvar____6 % 2 == 0) {
        ____localvar____8 = 2;
    } else {
        ____localvar____8 = 1;
    }
    goto ____label____1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fb0 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a62fb0 -> p 9a63138 )
BinaryOperator 0x9a62fb0 'double' lvalue '='
|-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
`-CallExpr 0x9a62f78 'double'
  |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
  | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  `-BinaryOperator 0x9a62f18 'int' '/'
    |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
    | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
    `-IntegerLiteral 0x9a62ef0 'int' 2
____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2)[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e70 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62e70 -> p 9a62fb0 )
DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
____localvar____7[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e70 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f78 (CallExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CallExpr ( 9a62f78 -> p 9a62fb0 )
CallExpr 0x9a62f78 'double'
|-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
| `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
`-BinaryOperator 0x9a62f18 'int' '/'
  |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
  | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  `-IntegerLiteral 0x9a62ef0 'int' 2
fast_pow(____localvar____5, ____localvar____6 / 2)[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f68 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a62f68 -> p 9a62f78 )
ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
fast_pow[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f30 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62f30 -> p 9a62f68 )
DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
fast_pow[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f30 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f68 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fa0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a62fa0 -> p 9a62f78 )
ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
`-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
____localvar____5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ebc (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62ebc -> p 9a62fa0 )
DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
____localvar____5[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ebc (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fa0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f18 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a62f18 -> p 9a62f78 )
BinaryOperator 0x9a62f18 'int' '/'
|-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
`-IntegerLiteral 0x9a62ef0 'int' 2
____localvar____6 / 2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f08 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a62f08 -> p 9a62f18 )
ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
`-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ed4 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62ed4 -> p 9a62f08 )
DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ed4 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f08 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ef0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a62ef0 -> p 9a62f18 )
IntegerLiteral 0x9a62ef0 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ef0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f18 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f78 (CallExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fb0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63110 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 9a63110 -> p 9a63138 )
IfStmt 0x9a63110
|-<<<NULL>>>
|-BinaryOperator 0x9a63038 '_Bool' '=='
| |-BinaryOperator 0x9a63008 'int' '%'
| | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| | `-IntegerLiteral 0x9a62fe0 'int' 2
| `-IntegerLiteral 0x9a63020 'int' 0
|-CompoundStmt 0x9a63098
| `-BinaryOperator 0x9a63080 'int' lvalue '='
|   |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   `-IntegerLiteral 0x9a63068 'int' 2
`-CompoundStmt 0x9a630f8
  `-BinaryOperator 0x9a630e0 'int' lvalue '='
    |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    `-IntegerLiteral 0x9a630c8 'int' 1
if (____localvar____6 % 2 == 0) {
    ____localvar____8 = 2;
} else {
    ____localvar____8 = 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63038 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a63038 -> p 9a63110 )
BinaryOperator 0x9a63038 '_Bool' '=='
|-BinaryOperator 0x9a63008 'int' '%'
| |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| `-IntegerLiteral 0x9a62fe0 'int' 2
`-IntegerLiteral 0x9a63020 'int' 0
____localvar____6 % 2 == 0[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a63008 -> p 9a63038 )
BinaryOperator 0x9a63008 'int' '%'
|-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
`-IntegerLiteral 0x9a62fe0 'int' 2
____localvar____6 % 2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ff8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a62ff8 -> p 9a63008 )
ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
`-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fc8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a62fc8 -> p 9a62ff8 )
DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fc8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ff8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fe0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a62fe0 -> p 9a63008 )
IntegerLiteral 0x9a62fe0 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fe0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63020 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a63020 -> p 9a63038 )
IntegerLiteral 0x9a63020 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63020 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63038 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63098 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a63098 -> p 9a63110 )
CompoundStmt 0x9a63098
`-BinaryOperator 0x9a63080 'int' lvalue '='
  |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  `-IntegerLiteral 0x9a63068 'int' 2
{
    ____localvar____8 = 2;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63080 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a63080 -> p 9a63098 )
BinaryOperator 0x9a63080 'int' lvalue '='
|-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-IntegerLiteral 0x9a63068 'int' 2
____localvar____8 = 2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63050 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a63050 -> p 9a63080 )
DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63050 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63068 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a63068 -> p 9a63080 )
IntegerLiteral 0x9a63068 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63068 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63080 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63098 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630f8 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a630f8 -> p 9a63110 )
CompoundStmt 0x9a630f8
`-BinaryOperator 0x9a630e0 'int' lvalue '='
  |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  `-IntegerLiteral 0x9a630c8 'int' 1
{
    ____localvar____8 = 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630e0 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a630e0 -> p 9a630f8 )
BinaryOperator 0x9a630e0 'int' lvalue '='
|-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-IntegerLiteral 0x9a630c8 'int' 1
____localvar____8 = 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630ac (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a630ac -> p 9a630e0 )
DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630ac (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630c8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a630c8 -> p 9a630e0 )
IntegerLiteral 0x9a630c8 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630c8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630e0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630f8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63110 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64f00 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a64f00 -> p 9a63138 )
GotoStmt 0x9a64f00 '____label____1' 0x9a64b50
goto ____label____1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64f00 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63138 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d00 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64c50 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a64c50 -> p 9a63370 )
LabelStmt 0x9a64c50 '____label____3'
`-CompoundStmt 0x9a631c8
  `-ReturnStmt 0x9a631b8
    `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
      `-IntegerLiteral 0x9a63190 'int' 1
____label____3:
{
    return 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631c8 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a631c8 -> p 9a64c50 )
CompoundStmt 0x9a631c8
`-ReturnStmt 0x9a631b8
  `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
    `-IntegerLiteral 0x9a63190 'int' 1
{
    return 1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631b8 (ReturnStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ReturnStmt ( 9a631b8 -> p 9a631c8 )
ReturnStmt 0x9a631b8
`-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
  `-IntegerLiteral 0x9a63190 'int' 1
return 1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631a8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a631a8 -> p 9a631b8 )
ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
`-IntegerLiteral 0x9a63190 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63190 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a63190 -> p 9a631a8 )
IntegerLiteral 0x9a63190 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63190 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631a8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631b8 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631c8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64c50 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64bc0 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a64bc0 -> p 9a63370 )
LabelStmt 0x9a64bc0 '____label____2'
`-CompoundStmt 0x9a63358
  |-IfStmt 0x9a63330
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a63258 '_Bool' '=='
  | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  | | `-IntegerLiteral 0x9a63230 'int' 0
  | |-CompoundStmt 0x9a632b8
  | | `-BinaryOperator 0x9a632a0 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | |   `-IntegerLiteral 0x9a63288 'int' 4
  | `-CompoundStmt 0x9a63318
  |   `-BinaryOperator 0x9a63300 'int' lvalue '='
  |     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  |     `-IntegerLiteral 0x9a632e8 'int' 3
  `-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
____label____2:
{
    if (____localvar____6 == 0) {
        ____localvar____8 = 4;
    } else {
        ____localvar____8 = 3;
    }
    goto ____label____1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63358 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a63358 -> p 9a64bc0 )
CompoundStmt 0x9a63358
|-IfStmt 0x9a63330
| |-<<<NULL>>>
| |-BinaryOperator 0x9a63258 '_Bool' '=='
| | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| | `-IntegerLiteral 0x9a63230 'int' 0
| |-CompoundStmt 0x9a632b8
| | `-BinaryOperator 0x9a632a0 'int' lvalue '='
| |   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| |   `-IntegerLiteral 0x9a63288 'int' 4
| `-CompoundStmt 0x9a63318
|   `-BinaryOperator 0x9a63300 'int' lvalue '='
|     |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|     `-IntegerLiteral 0x9a632e8 'int' 3
`-GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
{
    if (____localvar____6 == 0) {
        ____localvar____8 = 4;
    } else {
        ____localvar____8 = 3;
    }
    goto ____label____1;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63330 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 9a63330 -> p 9a63358 )
IfStmt 0x9a63330
|-<<<NULL>>>
|-BinaryOperator 0x9a63258 '_Bool' '=='
| |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| `-IntegerLiteral 0x9a63230 'int' 0
|-CompoundStmt 0x9a632b8
| `-BinaryOperator 0x9a632a0 'int' lvalue '='
|   |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
|   `-IntegerLiteral 0x9a63288 'int' 4
`-CompoundStmt 0x9a63318
  `-BinaryOperator 0x9a63300 'int' lvalue '='
    |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
    `-IntegerLiteral 0x9a632e8 'int' 3
if (____localvar____6 == 0) {
    ____localvar____8 = 4;
} else {
    ____localvar____8 = 3;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63258 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a63258 -> p 9a63330 )
BinaryOperator 0x9a63258 '_Bool' '=='
|-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
`-IntegerLiteral 0x9a63230 'int' 0
____localvar____6 == 0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63248 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a63248 -> p 9a63258 )
ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
`-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63218 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a63218 -> p 9a63248 )
DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
____localvar____6[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63218 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63248 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63230 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a63230 -> p 9a63258 )
IntegerLiteral 0x9a63230 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63230 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63258 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632b8 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a632b8 -> p 9a63330 )
CompoundStmt 0x9a632b8
`-BinaryOperator 0x9a632a0 'int' lvalue '='
  |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  `-IntegerLiteral 0x9a63288 'int' 4
{
    ____localvar____8 = 4;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632a0 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a632a0 -> p 9a632b8 )
BinaryOperator 0x9a632a0 'int' lvalue '='
|-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-IntegerLiteral 0x9a63288 'int' 4
____localvar____8 = 4[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63270 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a63270 -> p 9a632a0 )
DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63270 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63288 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a63288 -> p 9a632a0 )
IntegerLiteral 0x9a63288 'int' 4
4[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63288 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632a0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632b8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63318 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a63318 -> p 9a63330 )
CompoundStmt 0x9a63318
`-BinaryOperator 0x9a63300 'int' lvalue '='
  |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  `-IntegerLiteral 0x9a632e8 'int' 3
{
    ____localvar____8 = 3;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63300 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a63300 -> p 9a63318 )
BinaryOperator 0x9a63300 'int' lvalue '='
|-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
`-IntegerLiteral 0x9a632e8 'int' 3
____localvar____8 = 3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632cc (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a632cc -> p 9a63300 )
DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
____localvar____8[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632cc (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632e8 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a632e8 -> p 9a63300 )
IntegerLiteral 0x9a632e8 'int' 3
3[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632e8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63300 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63318 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63330 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ef0 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a64ef0 -> p 9a63358 )
GotoStmt 0x9a64ef0 '____label____1' 0x9a64b50
goto ____label____1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ef0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63358 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64bc0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63370 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64b80 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a64b80 -> p 9a64f10 )
LabelStmt 0x9a64b80 '____label____1'
`-NullStmt 0x9a64b70
____label____1:
;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64b70 (NullStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt NullStmt ( 9a64b70 -> p 9a64b80 )
NullStmt 0x9a64b70
;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64b70 (NullStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64b80 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64f10 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ab0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64fa0 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a64fa0 -> p 9a65000 )
LabelStmt 0x9a64fa0 '____label____8'
`-GotoStmt 0x9a64ff0 '____label____7' 0x9a64f30
____label____8:
goto ____label____7;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ff0 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a64ff0 -> p 9a64fa0 )
GotoStmt 0x9a64ff0 '____label____7' 0x9a64f30
goto ____label____7;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ff0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64fa0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a65000 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a65018 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64fe0 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a64fe0 -> p 9a65038 )
LabelStmt 0x9a64fe0 '____label____9'
`-NullStmt 0x9a64fd0
____label____9:
;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64fd0 (NullStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt NullStmt ( 9a64fd0 -> p 9a64fe0 )
NullStmt 0x9a64fd0
;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64fd0 (NullStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64fe0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a65038 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64f60 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a633b0 (CompoundStmt)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 109] root stmt type CompoundStmt 9a633b0 | children size 3
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62aa0 (Function)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 27] END LocalDeclMover
FunctionDecl 0x9a62aa0 <_gcd_ob.cpp:3:1, line:40:1> fast_pow 'double (double, int)'
|-ParmVarDecl 0x9a629e0 <line:3:17, col:24> ____localvar____5 'double'
|-ParmVarDecl 0x9a62a20 <col:43, col:47> ____localvar____6 'int'
`-CompoundStmt 0x9a633b0 <col:66, line:40:1>
  |-DeclStmt 0x9a65060 <<invalid sloc>>
  | `-VarDecl 0x9a62b20 <line:4:5, col:12> ____localvar____7 'double'
  |-DeclStmt 0x9a650b0 <<invalid sloc>>
  | `-VarDecl 0x9a62b70 <line:5:5, col:9> ____localvar____8 'int'
  |-DeclStmt 0x9a650f0 <<invalid sloc>>
  | `-VarDecl 0x9a64ae0 <<invalid sloc>> ____localvar____9 'int'
  |-BinaryOperator 0x9a65098 <<invalid sloc>, col:29> 'int' lvalue '='
  | |-DeclRefExpr 0x9a6507c <<invalid sloc>> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | `-IntegerLiteral 0x9a62ba0 <col:29> 'int' 5
  `-LabelStmt 0x9a64f60 <<invalid sloc>> '____label____7'
    `-CompoundStmt 0x9a65038 <<invalid sloc>>
      |-IfStmt 0x9a65018 <<invalid sloc>>
      | |-<<<NULL>>>
      | |-BinaryOperator 0x9a62c08 <line:6:12, col:33> '_Bool' '!='
      | | |-ImplicitCastExpr 0x9a62bf8 <col:12> 'int' <LValueToRValue>
      | | | `-DeclRefExpr 0x9a62bc8 <col:12> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | `-IntegerLiteral 0x9a62be0 <col:33> 'int' 0
      | |-CompoundStmt 0x9a65000 <<invalid sloc>>
      | | |-LabelStmt 0x9a64ab0 <<invalid sloc>> '____label____0'
      | | | `-CompoundStmt 0x9a64f10 <<invalid sloc>>
      | | |   |-BinaryOperator 0x9a650d8 <<invalid sloc>> 'int' lvalue '='
      | | |   | |-DeclRefExpr 0x9a650c0 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   | `-ParenExpr 0x9a64ac0 <<invalid sloc>> 'int'
      | | |   |   `-ImplicitCastExpr 0x9a62c38 <line:7:17> 'int' <LValueToRValue>
      | | |   |     `-DeclRefExpr 0x9a62c20 <col:17> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   |-IfStmt 0x9a64b30 <<invalid sloc>>
      | | |   | |-<<<NULL>>>
      | | |   | |-BinaryOperator 0x9a64bf8 <<invalid sloc>, line:30:16> '_Bool' '=='
      | | |   | | |-ImplicitCastExpr 0x9a64be8 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   | | | `-DeclRefExpr 0x9a64bd0 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   | | `-IntegerLiteral 0x9a631e0 <col:16> 'int' 5
      | | |   | |-GotoStmt 0x9a64c10 <<invalid sloc>> '____label____2' 0x9a64b90
      | | |   | `-IfStmt 0x9a64cb0 <<invalid sloc>>
      | | |   |   |-<<<NULL>>>
      | | |   |   |-BinaryOperator 0x9a64c88 <<invalid sloc>, line:26:16> '_Bool' '=='
      | | |   |   | |-ImplicitCastExpr 0x9a64c78 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |   | | `-DeclRefExpr 0x9a64c60 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |   | `-IntegerLiteral 0x9a63158 <col:16> 'int' 4
      | | |   |   |-GotoStmt 0x9a64ca0 <<invalid sloc>> '____label____3' 0x9a64c20
      | | |   |   `-IfStmt 0x9a64d60 <<invalid sloc>>
      | | |   |     |-<<<NULL>>>
      | | |   |     |-BinaryOperator 0x9a64d38 <<invalid sloc>, line:16:16> '_Bool' '=='
      | | |   |     | |-ImplicitCastExpr 0x9a64d28 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |     | | `-DeclRefExpr 0x9a64d10 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |     | `-IntegerLiteral 0x9a62e38 <col:16> 'int' 3
      | | |   |     |-GotoStmt 0x9a64d50 <<invalid sloc>> '____label____4' 0x9a64cd0
      | | |   |     `-IfStmt 0x9a64e10 <<invalid sloc>>
      | | |   |       |-<<<NULL>>>
      | | |   |       |-BinaryOperator 0x9a64de8 <<invalid sloc>, line:12:16> '_Bool' '=='
      | | |   |       | |-ImplicitCastExpr 0x9a64dd8 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |       | | `-DeclRefExpr 0x9a64dc0 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |       | `-IntegerLiteral 0x9a62d70 <col:16> 'int' 2
      | | |   |       |-GotoStmt 0x9a64e00 <<invalid sloc>> '____label____5' 0x9a64d80
      | | |   |       `-IfStmt 0x9a64ec0 <<invalid sloc>>
      | | |   |         |-<<<NULL>>>
      | | |   |         |-BinaryOperator 0x9a64e98 <<invalid sloc>, line:8:16> '_Bool' '=='
      | | |   |         | |-ImplicitCastExpr 0x9a64e88 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |         | | `-DeclRefExpr 0x9a64e70 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |         | `-IntegerLiteral 0x9a62c68 <col:16> 'int' 1
      | | |   |         |-GotoStmt 0x9a64eb0 <<invalid sloc>> '____label____6' 0x9a64e30
      | | |   |         `-GotoStmt 0x9a64ee0 <<invalid sloc>> '____label____1' 0x9a64b50
      | | |   |-CompoundStmt 0x9a63370 <line:7:36, line:39:9>
      | | |   | |-LabelStmt 0x9a64e60 <<invalid sloc>, line:11:13> '____label____6'
      | | |   | | `-CompoundStmt 0x9a62d58 <line:9:13, line:11:13>
      | | |   | |   `-ReturnStmt 0x9a62d48 <line:10:17, col:64>
      | | |   | |     `-BinaryOperator 0x9a62d30 <col:24, col:64> 'double' '*'
      | | |   | |       |-BinaryOperator 0x9a62cf0 <col:24, col:44> 'double' '*'
      | | |   | |       | |-ImplicitCastExpr 0x9a62cd0 <col:24> 'double' <LValueToRValue>
      | | |   | |       | | `-DeclRefExpr 0x9a62ca0 <col:24> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |       | `-ImplicitCastExpr 0x9a62ce0 <col:44> 'double' <LValueToRValue>
      | | |   | |       |   `-DeclRefExpr 0x9a62cb8 <col:44> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |       `-ImplicitCastExpr 0x9a62d20 <col:64> 'double' <LValueToRValue>
      | | |   | |         `-DeclRefExpr 0x9a62d08 <col:64> 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
      | | |   | |-LabelStmt 0x9a64db0 <<invalid sloc>, line:15:13> '____label____5'
      | | |   | | `-CompoundStmt 0x9a62e20 <line:13:13, line:15:13>
      | | |   | |   `-ReturnStmt 0x9a62e10 <line:14:17, col:44>
      | | |   | |     `-BinaryOperator 0x9a62df8 <col:24, col:44> 'double' '*'
      | | |   | |       |-ImplicitCastExpr 0x9a62dd8 <col:24> 'double' <LValueToRValue>
      | | |   | |       | `-DeclRefExpr 0x9a62da8 <col:24> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |       `-ImplicitCastExpr 0x9a62de8 <col:44> 'double' <LValueToRValue>
      | | |   | |         `-DeclRefExpr 0x9a62dc0 <col:44> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |-LabelStmt 0x9a64d00 <<invalid sloc>, line:25:13> '____label____4'
      | | |   | | `-CompoundStmt 0x9a63138 <line:17:13, line:25:13>
      | | |   | |   |-BinaryOperator 0x9a62fb0 <line:18:17, col:86> 'double' lvalue '='
      | | |   | |   | |-DeclRefExpr 0x9a62e70 <col:17> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |   | `-CallExpr 0x9a62f78 <col:37, col:86> 'double'
      | | |   | |   |   |-ImplicitCastExpr 0x9a62f68 <col:37> 'double (*)(double, int)' <FunctionToPointerDecay>
      | | |   | |   |   | `-DeclRefExpr 0x9a62f30 <col:37> 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
      | | |   | |   |   |-ImplicitCastExpr 0x9a62fa0 <col:46> 'double' <LValueToRValue>
      | | |   | |   |   | `-DeclRefExpr 0x9a62ebc <col:46> 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
      | | |   | |   |   `-BinaryOperator 0x9a62f18 <col:65, col:85> 'int' '/'
      | | |   | |   |     |-ImplicitCastExpr 0x9a62f08 <col:65> 'int' <LValueToRValue>
      | | |   | |   |     | `-DeclRefExpr 0x9a62ed4 <col:65> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
      | | |   | |   |     `-IntegerLiteral 0x9a62ef0 <col:85> 'int' 2
      | | |   | |   |-IfStmt 0x9a63110 <line:19:17, line:23:17>
      | | |   | |   | |-<<<NULL>>>
      | | |   | |   | |-BinaryOperator 0x9a63038 <line:19:21, col:46> '_Bool' '=='
      | | |   | |   | | |-BinaryOperator 0x9a63008 <col:21, col:41> 'int' '%'
      | | |   | |   | | | |-ImplicitCastExpr 0x9a62ff8 <col:21> 'int' <LValueToRValue>
      | | |   | |   | | | | `-DeclRefExpr 0x9a62fc8 <col:21> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
      | | |   | |   | | | `-IntegerLiteral 0x9a62fe0 <col:41> 'int' 2
      | | |   | |   | | `-IntegerLiteral 0x9a63020 <col:46> 'int' 0
      | | |   | |   | |-CompoundStmt 0x9a63098 <col:49, line:21:17>
      | | |   | |   | | `-BinaryOperator 0x9a63080 <line:20:21, col:41> 'int' lvalue '='
      | | |   | |   | |   |-DeclRefExpr 0x9a63050 <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   | |   | |   `-IntegerLiteral 0x9a63068 <col:41> 'int' 2
      | | |   | |   | `-CompoundStmt 0x9a630f8 <line:21:24, line:23:17>
      | | |   | |   |   `-BinaryOperator 0x9a630e0 <line:22:21, col:41> 'int' lvalue '='
      | | |   | |   |     |-DeclRefExpr 0x9a630ac <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   | |   |     `-IntegerLiteral 0x9a630c8 <col:41> 'int' 1
      | | |   | |   `-GotoStmt 0x9a64f00 <<invalid sloc>> '____label____1' 0x9a64b50
      | | |   | |-LabelStmt 0x9a64c50 <<invalid sloc>, line:29:13> '____label____3'
      | | |   | | `-CompoundStmt 0x9a631c8 <line:27:13, line:29:13>
      | | |   | |   `-ReturnStmt 0x9a631b8 <line:28:17, col:24>
      | | |   | |     `-ImplicitCastExpr 0x9a631a8 <col:24> 'double' <IntegralToFloating>
      | | |   | |       `-IntegerLiteral 0x9a63190 <col:24> 'int' 1
      | | |   | `-LabelStmt 0x9a64bc0 <<invalid sloc>, line:38:13> '____label____2'
      | | |   |   `-CompoundStmt 0x9a63358 <line:31:13, line:38:13>
      | | |   |     |-IfStmt 0x9a63330 <line:32:17, line:36:17>
      | | |   |     | |-<<<NULL>>>
      | | |   |     | |-BinaryOperator 0x9a63258 <line:32:21, col:42> '_Bool' '=='
      | | |   |     | | |-ImplicitCastExpr 0x9a63248 <col:21> 'int' <LValueToRValue>
      | | |   |     | | | `-DeclRefExpr 0x9a63218 <col:21> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
      | | |   |     | | `-IntegerLiteral 0x9a63230 <col:42> 'int' 0
      | | |   |     | |-CompoundStmt 0x9a632b8 <col:45, line:34:17>
      | | |   |     | | `-BinaryOperator 0x9a632a0 <line:33:21, col:41> 'int' lvalue '='
      | | |   |     | |   |-DeclRefExpr 0x9a63270 <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   |     | |   `-IntegerLiteral 0x9a63288 <col:41> 'int' 4
      | | |   |     | `-CompoundStmt 0x9a63318 <line:34:24, line:36:17>
      | | |   |     |   `-BinaryOperator 0x9a63300 <line:35:21, col:41> 'int' lvalue '='
      | | |   |     |     |-DeclRefExpr 0x9a632cc <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   |     |     `-IntegerLiteral 0x9a632e8 <col:41> 'int' 3
      | | |   |     `-GotoStmt 0x9a64ef0 <<invalid sloc>> '____label____1' 0x9a64b50
      | | |   `-LabelStmt 0x9a64b80 <<invalid sloc>> '____label____1'
      | | |     `-NullStmt 0x9a64b70 <<invalid sloc>>
      | | `-LabelStmt 0x9a64fa0 <<invalid sloc>> '____label____8'
      | |   `-GotoStmt 0x9a64ff0 <<invalid sloc>> '____label____7' 0x9a64f30
      | `-<<<NULL>>>
      `-LabelStmt 0x9a64fe0 <<invalid sloc>> '____label____9'
        `-NullStmt 0x9a64fd0 <<invalid sloc>>
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 20] decl before flatten
FunctionDecl 0x9a62aa0 <_gcd_ob.cpp:3:1, line:40:1> fast_pow 'double (double, int)'
|-ParmVarDecl 0x9a629e0 <line:3:17, col:24> ____localvar____5 'double'
|-ParmVarDecl 0x9a62a20 <col:43, col:47> ____localvar____6 'int'
`-CompoundStmt 0x9a633b0 <col:66, line:40:1>
  |-DeclStmt 0x9a65060 <<invalid sloc>>
  | `-VarDecl 0x9a62b20 <line:4:5, col:12> ____localvar____7 'double'
  |-DeclStmt 0x9a650b0 <<invalid sloc>>
  | `-VarDecl 0x9a62b70 <line:5:5, col:9> ____localvar____8 'int'
  |-DeclStmt 0x9a650f0 <<invalid sloc>>
  | `-VarDecl 0x9a64ae0 <<invalid sloc>> ____localvar____9 'int'
  |-BinaryOperator 0x9a65098 <<invalid sloc>, col:29> 'int' lvalue '='
  | |-DeclRefExpr 0x9a6507c <<invalid sloc>> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | `-IntegerLiteral 0x9a62ba0 <col:29> 'int' 5
  `-LabelStmt 0x9a64f60 <<invalid sloc>> '____label____7'
    `-CompoundStmt 0x9a65038 <<invalid sloc>>
      |-IfStmt 0x9a65018 <<invalid sloc>>
      | |-<<<NULL>>>
      | |-BinaryOperator 0x9a62c08 <line:6:12, col:33> '_Bool' '!='
      | | |-ImplicitCastExpr 0x9a62bf8 <col:12> 'int' <LValueToRValue>
      | | | `-DeclRefExpr 0x9a62bc8 <col:12> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | `-IntegerLiteral 0x9a62be0 <col:33> 'int' 0
      | |-CompoundStmt 0x9a65000 <<invalid sloc>>
      | | |-LabelStmt 0x9a64ab0 <<invalid sloc>> '____label____0'
      | | | `-CompoundStmt 0x9a64f10 <<invalid sloc>>
      | | |   |-BinaryOperator 0x9a650d8 <<invalid sloc>> 'int' lvalue '='
      | | |   | |-DeclRefExpr 0x9a650c0 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   | `-ParenExpr 0x9a64ac0 <<invalid sloc>> 'int'
      | | |   |   `-ImplicitCastExpr 0x9a62c38 <line:7:17> 'int' <LValueToRValue>
      | | |   |     `-DeclRefExpr 0x9a62c20 <col:17> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   |-IfStmt 0x9a64b30 <<invalid sloc>>
      | | |   | |-<<<NULL>>>
      | | |   | |-BinaryOperator 0x9a64bf8 <<invalid sloc>, line:30:16> '_Bool' '=='
      | | |   | | |-ImplicitCastExpr 0x9a64be8 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   | | | `-DeclRefExpr 0x9a64bd0 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   | | `-IntegerLiteral 0x9a631e0 <col:16> 'int' 5
      | | |   | |-GotoStmt 0x9a64c10 <<invalid sloc>> '____label____2' 0x9a64b90
      | | |   | `-IfStmt 0x9a64cb0 <<invalid sloc>>
      | | |   |   |-<<<NULL>>>
      | | |   |   |-BinaryOperator 0x9a64c88 <<invalid sloc>, line:26:16> '_Bool' '=='
      | | |   |   | |-ImplicitCastExpr 0x9a64c78 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |   | | `-DeclRefExpr 0x9a64c60 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |   | `-IntegerLiteral 0x9a63158 <col:16> 'int' 4
      | | |   |   |-GotoStmt 0x9a64ca0 <<invalid sloc>> '____label____3' 0x9a64c20
      | | |   |   `-IfStmt 0x9a64d60 <<invalid sloc>>
      | | |   |     |-<<<NULL>>>
      | | |   |     |-BinaryOperator 0x9a64d38 <<invalid sloc>, line:16:16> '_Bool' '=='
      | | |   |     | |-ImplicitCastExpr 0x9a64d28 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |     | | `-DeclRefExpr 0x9a64d10 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |     | `-IntegerLiteral 0x9a62e38 <col:16> 'int' 3
      | | |   |     |-GotoStmt 0x9a64d50 <<invalid sloc>> '____label____4' 0x9a64cd0
      | | |   |     `-IfStmt 0x9a64e10 <<invalid sloc>>
      | | |   |       |-<<<NULL>>>
      | | |   |       |-BinaryOperator 0x9a64de8 <<invalid sloc>, line:12:16> '_Bool' '=='
      | | |   |       | |-ImplicitCastExpr 0x9a64dd8 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |       | | `-DeclRefExpr 0x9a64dc0 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |       | `-IntegerLiteral 0x9a62d70 <col:16> 'int' 2
      | | |   |       |-GotoStmt 0x9a64e00 <<invalid sloc>> '____label____5' 0x9a64d80
      | | |   |       `-IfStmt 0x9a64ec0 <<invalid sloc>>
      | | |   |         |-<<<NULL>>>
      | | |   |         |-BinaryOperator 0x9a64e98 <<invalid sloc>, line:8:16> '_Bool' '=='
      | | |   |         | |-ImplicitCastExpr 0x9a64e88 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   |         | | `-DeclRefExpr 0x9a64e70 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
      | | |   |         | `-IntegerLiteral 0x9a62c68 <col:16> 'int' 1
      | | |   |         |-GotoStmt 0x9a64eb0 <<invalid sloc>> '____label____6' 0x9a64e30
      | | |   |         `-GotoStmt 0x9a64ee0 <<invalid sloc>> '____label____1' 0x9a64b50
      | | |   |-CompoundStmt 0x9a63370 <line:7:36, line:39:9>
      | | |   | |-LabelStmt 0x9a64e60 <<invalid sloc>, line:11:13> '____label____6'
      | | |   | | `-CompoundStmt 0x9a62d58 <line:9:13, line:11:13>
      | | |   | |   `-ReturnStmt 0x9a62d48 <line:10:17, col:64>
      | | |   | |     `-BinaryOperator 0x9a62d30 <col:24, col:64> 'double' '*'
      | | |   | |       |-BinaryOperator 0x9a62cf0 <col:24, col:44> 'double' '*'
      | | |   | |       | |-ImplicitCastExpr 0x9a62cd0 <col:24> 'double' <LValueToRValue>
      | | |   | |       | | `-DeclRefExpr 0x9a62ca0 <col:24> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |       | `-ImplicitCastExpr 0x9a62ce0 <col:44> 'double' <LValueToRValue>
      | | |   | |       |   `-DeclRefExpr 0x9a62cb8 <col:44> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |       `-ImplicitCastExpr 0x9a62d20 <col:64> 'double' <LValueToRValue>
      | | |   | |         `-DeclRefExpr 0x9a62d08 <col:64> 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
      | | |   | |-LabelStmt 0x9a64db0 <<invalid sloc>, line:15:13> '____label____5'
      | | |   | | `-CompoundStmt 0x9a62e20 <line:13:13, line:15:13>
      | | |   | |   `-ReturnStmt 0x9a62e10 <line:14:17, col:44>
      | | |   | |     `-BinaryOperator 0x9a62df8 <col:24, col:44> 'double' '*'
      | | |   | |       |-ImplicitCastExpr 0x9a62dd8 <col:24> 'double' <LValueToRValue>
      | | |   | |       | `-DeclRefExpr 0x9a62da8 <col:24> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |       `-ImplicitCastExpr 0x9a62de8 <col:44> 'double' <LValueToRValue>
      | | |   | |         `-DeclRefExpr 0x9a62dc0 <col:44> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |-LabelStmt 0x9a64d00 <<invalid sloc>, line:25:13> '____label____4'
      | | |   | | `-CompoundStmt 0x9a63138 <line:17:13, line:25:13>
      | | |   | |   |-BinaryOperator 0x9a62fb0 <line:18:17, col:86> 'double' lvalue '='
      | | |   | |   | |-DeclRefExpr 0x9a62e70 <col:17> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
      | | |   | |   | `-CallExpr 0x9a62f78 <col:37, col:86> 'double'
      | | |   | |   |   |-ImplicitCastExpr 0x9a62f68 <col:37> 'double (*)(double, int)' <FunctionToPointerDecay>
      | | |   | |   |   | `-DeclRefExpr 0x9a62f30 <col:37> 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
      | | |   | |   |   |-ImplicitCastExpr 0x9a62fa0 <col:46> 'double' <LValueToRValue>
      | | |   | |   |   | `-DeclRefExpr 0x9a62ebc <col:46> 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
      | | |   | |   |   `-BinaryOperator 0x9a62f18 <col:65, col:85> 'int' '/'
      | | |   | |   |     |-ImplicitCastExpr 0x9a62f08 <col:65> 'int' <LValueToRValue>
      | | |   | |   |     | `-DeclRefExpr 0x9a62ed4 <col:65> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
      | | |   | |   |     `-IntegerLiteral 0x9a62ef0 <col:85> 'int' 2
      | | |   | |   |-IfStmt 0x9a63110 <line:19:17, line:23:17>
      | | |   | |   | |-<<<NULL>>>
      | | |   | |   | |-BinaryOperator 0x9a63038 <line:19:21, col:46> '_Bool' '=='
      | | |   | |   | | |-BinaryOperator 0x9a63008 <col:21, col:41> 'int' '%'
      | | |   | |   | | | |-ImplicitCastExpr 0x9a62ff8 <col:21> 'int' <LValueToRValue>
      | | |   | |   | | | | `-DeclRefExpr 0x9a62fc8 <col:21> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
      | | |   | |   | | | `-IntegerLiteral 0x9a62fe0 <col:41> 'int' 2
      | | |   | |   | | `-IntegerLiteral 0x9a63020 <col:46> 'int' 0
      | | |   | |   | |-CompoundStmt 0x9a63098 <col:49, line:21:17>
      | | |   | |   | | `-BinaryOperator 0x9a63080 <line:20:21, col:41> 'int' lvalue '='
      | | |   | |   | |   |-DeclRefExpr 0x9a63050 <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   | |   | |   `-IntegerLiteral 0x9a63068 <col:41> 'int' 2
      | | |   | |   | `-CompoundStmt 0x9a630f8 <line:21:24, line:23:17>
      | | |   | |   |   `-BinaryOperator 0x9a630e0 <line:22:21, col:41> 'int' lvalue '='
      | | |   | |   |     |-DeclRefExpr 0x9a630ac <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   | |   |     `-IntegerLiteral 0x9a630c8 <col:41> 'int' 1
      | | |   | |   `-GotoStmt 0x9a64f00 <<invalid sloc>> '____label____1' 0x9a64b50
      | | |   | |-LabelStmt 0x9a64c50 <<invalid sloc>, line:29:13> '____label____3'
      | | |   | | `-CompoundStmt 0x9a631c8 <line:27:13, line:29:13>
      | | |   | |   `-ReturnStmt 0x9a631b8 <line:28:17, col:24>
      | | |   | |     `-ImplicitCastExpr 0x9a631a8 <col:24> 'double' <IntegralToFloating>
      | | |   | |       `-IntegerLiteral 0x9a63190 <col:24> 'int' 1
      | | |   | `-LabelStmt 0x9a64bc0 <<invalid sloc>, line:38:13> '____label____2'
      | | |   |   `-CompoundStmt 0x9a63358 <line:31:13, line:38:13>
      | | |   |     |-IfStmt 0x9a63330 <line:32:17, line:36:17>
      | | |   |     | |-<<<NULL>>>
      | | |   |     | |-BinaryOperator 0x9a63258 <line:32:21, col:42> '_Bool' '=='
      | | |   |     | | |-ImplicitCastExpr 0x9a63248 <col:21> 'int' <LValueToRValue>
      | | |   |     | | | `-DeclRefExpr 0x9a63218 <col:21> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
      | | |   |     | | `-IntegerLiteral 0x9a63230 <col:42> 'int' 0
      | | |   |     | |-CompoundStmt 0x9a632b8 <col:45, line:34:17>
      | | |   |     | | `-BinaryOperator 0x9a632a0 <line:33:21, col:41> 'int' lvalue '='
      | | |   |     | |   |-DeclRefExpr 0x9a63270 <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   |     | |   `-IntegerLiteral 0x9a63288 <col:41> 'int' 4
      | | |   |     | `-CompoundStmt 0x9a63318 <line:34:24, line:36:17>
      | | |   |     |   `-BinaryOperator 0x9a63300 <line:35:21, col:41> 'int' lvalue '='
      | | |   |     |     |-DeclRefExpr 0x9a632cc <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
      | | |   |     |     `-IntegerLiteral 0x9a632e8 <col:41> 'int' 3
      | | |   |     `-GotoStmt 0x9a64ef0 <<invalid sloc>> '____label____1' 0x9a64b50
      | | |   `-LabelStmt 0x9a64b80 <<invalid sloc>> '____label____1'
      | | |     `-NullStmt 0x9a64b70 <<invalid sloc>>
      | | `-LabelStmt 0x9a64fa0 <<invalid sloc>> '____label____8'
      | |   `-GotoStmt 0x9a64ff0 <<invalid sloc>> '____label____7' 0x9a64f30
      | `-<<<NULL>>>
      `-LabelStmt 0x9a64fe0 <<invalid sloc>> '____label____9'
        `-NullStmt 0x9a64fd0 <<invalid sloc>>
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 26] cfg before flattening

 [B28 (ENTRY)]
   Succs (1): B27

 [B1]
  ____label____9:
   Preds (1): B26
   Succs (1): B0

 [B2]
  ____label____8:
   T: goto ____label____7;

   Preds (1): B3
   Succs (1): B26

 [B3]
  ____label____1:
   Preds (3): B4 B9 B15
   Succs (1): B2

 [B4]
   T: goto ____label____1;

   Preds (2): B5 B6
   Succs (1): B3

 [B5]
   1: ____localvar____8 = 3
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: ____localvar____8 = 4
   Preds (1): B7
   Succs (1): B4

 [B7]
  ____label____2:
   1: ____localvar____6 == 0
   T: if [B7.1]
   Preds (1): B24
   Succs (2): B6 B5

 [B8]
  ____label____3:
   1: return 1;
   Preds (1): B22
   Succs (1): B0

 [B9]
   T: goto ____label____1;

   Preds (2): B10 B11
   Succs (1): B3

 [B10]
   1: ____localvar____8 = 1
   Preds (1): B12
   Succs (1): B9

 [B11]
   1: ____localvar____8 = 2
   Preds (1): B12
   Succs (1): B9

 [B12]
  ____label____4:
   1: fast_pow(____localvar____5, ____localvar____6 / 2)
   2: ____localvar____7 = [B12.1]
   3: ____localvar____6 % 2 == 0
   T: if [B12.3]
   Preds (1): B20
   Succs (2): B11 B10

 [B13]
  ____label____5:
   1: return ____localvar____7 * ____localvar____7;
   Preds (1): B18
   Succs (1): B0

 [B14]
  ____label____6:
   1: return ____localvar____7 * ____localvar____7 * ____localvar____5;
   Preds (1): B16
   Succs (1): B0

 [B15]
   T: goto ____label____1;

   Preds (1): B17
   Succs (1): B3

 [B16]
   T: goto ____label____6;

   Preds (1): B17
   Succs (1): B14

 [B17]
   1: ____localvar____9 == 1
   T: if [B17.1]
   Preds (1): B19
   Succs (2): B16 B15

 [B18]
   T: goto ____label____5;

   Preds (1): B19
   Succs (1): B13

 [B19]
   1: ____localvar____9 == 2
   T: if [B19.1]
   Preds (1): B21
   Succs (2): B18 B17

 [B20]
   T: goto ____label____4;

   Preds (1): B21
   Succs (1): B12

 [B21]
   1: ____localvar____9 == 3
   T: if [B21.1]
   Preds (1): B23
   Succs (2): B20 B19

 [B22]
   T: goto ____label____3;

   Preds (1): B23
   Succs (1): B8

 [B23]
   1: ____localvar____9 == 4
   T: if [B23.1]
   Preds (1): B25
   Succs (2): B22 B21

 [B24]
   T: goto ____label____2;

   Preds (1): B25
   Succs (1): B7

 [B25]
  ____label____0:
   1: ____localvar____9 = (____localvar____8)
   2: ____localvar____9 == 5
   T: if [B25.2]
   Preds (1): B26
   Succs (2): B24 B23

 [B26]
  ____label____7:
   1: ____localvar____8 != 0
   T: if [B26.1]
   Preds (2): B27 B2
   Succs (2): B25 B1

 [B27]
   1: double ____localvar____7;
   2: int ____localvar____8;
   3: int ____localvar____9;
   4: ____localvar____8 = 5
   Preds (1): B28
   Succs (1): B26

 [B0 (EXIT)]
   Preds (4): B1 B8 B13 B14

Writing '/tmp/llvm_Z0XHV3/CFG.dot'...  done. 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a633b0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a65060 (DeclStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62b20 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62b20 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a65060 (DeclStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a650b0 (DeclStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a62b70 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a62b70 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a650b0 (DeclStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a650f0 (DeclStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a64ae0 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a64ae0 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a650f0 (DeclStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a65098 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a6507c (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a6507c (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ba0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ba0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a65098 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64f60 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a65038 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a65018 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c08 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62bf8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62bc8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62bc8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62bf8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62be0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62be0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c08 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a65000 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ab0 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64f10 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a650d8 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a650c0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a650c0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ac0 (ParenExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c38 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c20 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c20 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c38 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ac0 (ParenExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a650d8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64b30 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64bf8 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64be8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64bd0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64bd0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64be8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631e0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631e0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64bf8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64c10 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64c10 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64cb0 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64c88 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64c78 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64c60 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64c60 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64c78 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63158 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63158 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64c88 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ca0 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ca0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d60 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d38 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d28 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d10 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d10 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d28 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e38 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e38 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d38 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d50 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d50 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e10 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64de8 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64dd8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64dc0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64dc0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64dd8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d70 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d70 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64de8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e00 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e00 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ec0 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e98 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e88 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e70 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e70 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e88 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62c68 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62c68 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e98 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64eb0 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64eb0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ee0 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ee0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ec0 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e10 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d60 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64cb0 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64b30 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63370 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64e60 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d58 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d48 (ReturnStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d30 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62cd0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ca0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ca0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62cd0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ce0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62cb8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62cb8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ce0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d20 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62d08 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d08 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d20 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d30 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d48 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62d58 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64e60 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64db0 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e20 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e10 (ReturnStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62df8 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62dd8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62da8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62da8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62dd8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62de8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62dc0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62dc0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62de8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62df8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e10 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e20 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64db0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64d00 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63138 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fb0 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62e70 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62e70 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f78 (CallExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f68 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f30 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f30 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f68 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fa0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ebc (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ebc (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fa0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f18 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62f08 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ed4 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ed4 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f08 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ef0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ef0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f18 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62f78 (CallExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fb0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63110 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63038 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62ff8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fc8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fc8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62ff8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a62fe0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a62fe0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63020 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63020 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63038 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63098 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63080 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63050 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63050 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63068 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63068 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63080 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63098 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630f8 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630e0 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630ac (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630ac (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a630c8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630c8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630e0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a630f8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63110 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64f00 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64f00 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63138 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64d00 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64c50 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631c8 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631b8 (ReturnStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a631a8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63190 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63190 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631a8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631b8 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a631c8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64c50 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64bc0 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63358 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63330 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63258 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63248 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63218 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63218 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63248 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63230 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63230 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63258 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632b8 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632a0 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63270 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63270 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63288 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63288 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632a0 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632b8 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63318 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63300 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632cc (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632cc (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a632e8 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a632e8 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63300 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63318 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63330 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ef0 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ef0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63358 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64bc0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63370 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64b80 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64b70 (NullStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64b70 (NullStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64b80 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64f10 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ab0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64fa0 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64ff0 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64ff0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64fa0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a65000 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a65018 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64fe0 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64fd0 (NullStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64fd0 (NullStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64fe0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a65038 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64f60 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a633b0 (CompoundStmt)
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 1 -> 0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 2 -> 26
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 3 -> 2
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 4 -> 3
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 5 -> 4
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 6 -> 4
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 7 -> 6
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 7 -> 5
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 8 -> 0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 9 -> 3
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 10 -> 9
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 11 -> 9
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B12.1], Root is [B12.2]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 12 -> 11
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 12 -> 10
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 13 -> 0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 14 -> 0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 15 -> 3
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 16 -> 14
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 17 -> 16
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 17 -> 15
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 18 -> 13
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 19 -> 18
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 19 -> 17
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 20 -> 12
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 21 -> 20
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 21 -> 19
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 22 -> 8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 23 -> 22
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 23 -> 21
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 24 -> 7
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 25 -> 24
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 25 -> 23
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 26 -> 25
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 26 -> 1
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 27 -> 26
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 28 -> 27
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 39] CompoundStmt before flatten
{
    double ____localvar____7;
    int ____localvar____8;
    int ____localvar____9;
    ____localvar____8 = 5;
  ____label____7:
    {
        if (____localvar____8 != 0) {
          ____label____0:
            {
                ____localvar____9 = (____localvar____8);
                if (____localvar____9 == 5)
                    goto ____label____2;
                else if (____localvar____9 == 4)
                    goto ____label____3;
                else if (____localvar____9 == 3)
                    goto ____label____4;
                else if (____localvar____9 == 2)
                    goto ____label____5;
                else if (____localvar____9 == 1)
                    goto ____label____6;
                else
                    goto ____label____1;
                {
                  ____label____6:
                    {
                        return ____localvar____7 * ____localvar____7 * ____localvar____5;
                    }
                  ____label____5:
                    {
                        return ____localvar____7 * ____localvar____7;
                    }
                  ____label____4:
                    {
                        ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
                        if (____localvar____6 % 2 == 0) {
                            ____localvar____8 = 2;
                        } else {
                            ____localvar____8 = 1;
                        }
                        goto ____label____1;
                    }
                  ____label____3:
                    {
                        return 1;
                    }
                  ____label____2:
                    {
                        if (____localvar____6 == 0) {
                            ____localvar____8 = 4;
                        } else {
                            ____localvar____8 = 3;
                        }
                        goto ____label____1;
                    }
                }
              ____label____1:
                ;
            }
          ____label____8:
            goto ____label____7;
        }
      ____label____9:
        ;
    }
}
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 48] DeclStmt at the beginning met.
DeclStmt 0x9a65060
`-VarDecl 0x9a62b20 ____localvar____7 'double'
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 48] DeclStmt at the beginning met.
DeclStmt 0x9a650b0
`-VarDecl 0x9a62b70 ____localvar____8 'int'
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 48] DeclStmt at the beginning met.
DeclStmt 0x9a650f0
`-VarDecl 0x9a64ae0 ____localvar____9 'int'
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 1 9a6efac
<NULL>CaseStmt 0x9a65240
|-IntegerLiteral 0x9a65228 'int' 1
|-<<<NULL>>>
`-CompoundStmt 0x9a65278
  |-LabelStmt 0x9a64fe0 '____label____9'
  | `-NullStmt 0x9a65260
  `-BreakStmt 0x9a65270
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 2 9a6f010
<NULL>CaseStmt 0x9a652a8
|-IntegerLiteral 0x9a65290 'int' 2
|-<<<NULL>>>
`-CompoundStmt 0x9a65328
  |-LabelStmt 0x9a64fa0 '____label____8'
  | `-NullStmt 0x9a652c8
  |-BinaryOperator 0x9a65308 'int' lvalue '='
  | |-DeclRefExpr 0x9a652f0 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a652d8 'int' 26
  `-BreakStmt 0x9a65320
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 3 9a6f074
<NULL>CaseStmt 0x9a65360
|-IntegerLiteral 0x9a65348 'int' 3
|-<<<NULL>>>
`-CompoundStmt 0x9a653e0
  |-LabelStmt 0x9a64b80 '____label____1'
  | `-NullStmt 0x9a65380
  |-BinaryOperator 0x9a653c0 'int' lvalue '='
  | |-DeclRefExpr 0x9a653a8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a65390 'int' 2
  `-BreakStmt 0x9a653d8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 4 9a6f0d8
<NULL>CaseStmt 0x9a65418
|-IntegerLiteral 0x9a65400 'int' 4
|-<<<NULL>>>
`-CompoundStmt 0x9a65488
  |-BinaryOperator 0x9a65468 'int' lvalue '='
  | |-DeclRefExpr 0x9a65450 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a65438 'int' 3
  `-BreakStmt 0x9a65480
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 5 9a6f13c
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____8 = 3CaseStmt 0x9a654b8
|-IntegerLiteral 0x9a654a0 'int' 5
|-<<<NULL>>>
`-CompoundStmt 0x9a65528
  |-BinaryOperator 0x9a63300 'int' lvalue '='
  | |-DeclRefExpr 0x9a632cc 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | `-IntegerLiteral 0x9a632e8 'int' 3
  |-BinaryOperator 0x9a65508 'int' lvalue '='
  | |-DeclRefExpr 0x9a654f0 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a654d8 'int' 4
  `-BreakStmt 0x9a65520
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 6 9a6f1a0
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____8 = 4CaseStmt 0x9a65560
|-IntegerLiteral 0x9a65548 'int' 6
|-<<<NULL>>>
`-CompoundStmt 0x9a655d0
  |-BinaryOperator 0x9a632a0 'int' lvalue '='
  | |-DeclRefExpr 0x9a63270 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | `-IntegerLiteral 0x9a63288 'int' 4
  |-BinaryOperator 0x9a655b0 'int' lvalue '='
  | |-DeclRefExpr 0x9a65598 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a65580 'int' 4
  `-BreakStmt 0x9a655c8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 7 9a6f20c
____localvar____6 == 0[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____6 == 0[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 257] terminator cond stmt met: IfStmt
IfStmt 0x9a65638
|-<<<NULL>>>
|-BinaryOperator 0x9a63258 '_Bool' '=='
| |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| `-IntegerLiteral 0x9a63230 'int' 0
|-CompoundStmt 0x9a656e8
| `-BinaryOperator 0x9a65688 'int' lvalue '='
|   |-DeclRefExpr 0x9a65670 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
|   `-IntegerLiteral 0x9a65658 'int' 6
`-CompoundStmt 0x9a65700
  `-BinaryOperator 0x9a656d0 'int' lvalue '='
    |-DeclRefExpr 0x9a656b8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
    `-IntegerLiteral 0x9a656a0 'int' 5
CaseStmt 0x9a65608
|-IntegerLiteral 0x9a655f0 'int' 7
|-<<<NULL>>>
`-CompoundStmt 0x9a65768
  |-LabelStmt 0x9a64bc0 '____label____2'
  | `-NullStmt 0x9a65628
  |-IfStmt 0x9a65638
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a63258 '_Bool' '=='
  | | |-ImplicitCastExpr 0x9a63248 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a63218 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  | | `-IntegerLiteral 0x9a63230 'int' 0
  | |-CompoundStmt 0x9a656e8
  | | `-BinaryOperator 0x9a65688 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a65670 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | |   `-IntegerLiteral 0x9a65658 'int' 6
  | `-CompoundStmt 0x9a65700
  |   `-BinaryOperator 0x9a656d0 'int' lvalue '='
  |     |-DeclRefExpr 0x9a656b8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  |     `-IntegerLiteral 0x9a656a0 'int' 5
  |-BinaryOperator 0x9a65748 'int' lvalue '='
  | |-DeclRefExpr 0x9a65730 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a65718 'int' 6
  `-BreakStmt 0x9a65760
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 8 9a6f278
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
return 1;
CaseStmt 0x9a657a0
|-IntegerLiteral 0x9a65788 'int' 8
|-<<<NULL>>>
`-CompoundStmt 0x9a657d8
  |-LabelStmt 0x9a64c50 '____label____3'
  | `-NullStmt 0x9a657c0
  |-ReturnStmt 0x9a631b8
  | `-ImplicitCastExpr 0x9a631a8 'double' <IntegralToFloating>
  |   `-IntegerLiteral 0x9a63190 'int' 1
  `-BreakStmt 0x9a657d0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 9 9a6f2e4
<NULL>CaseStmt 0x9a65810
|-IntegerLiteral 0x9a657f8 'int' 9
|-<<<NULL>>>
`-CompoundStmt 0x9a65880
  |-BinaryOperator 0x9a65860 'int' lvalue '='
  | |-DeclRefExpr 0x9a65848 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a65830 'int' 3
  `-BreakStmt 0x9a65878
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 10 9a6f350
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____8 = 1CaseStmt 0x9a658b0
|-IntegerLiteral 0x9a65898 'int' 10
|-<<<NULL>>>
`-CompoundStmt 0x9a65920
  |-BinaryOperator 0x9a630e0 'int' lvalue '='
  | |-DeclRefExpr 0x9a630ac 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | `-IntegerLiteral 0x9a630c8 'int' 1
  |-BinaryOperator 0x9a65900 'int' lvalue '='
  | |-DeclRefExpr 0x9a658e8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a658d0 'int' 9
  `-BreakStmt 0x9a65918
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 11 9a6f404
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____8 = 2CaseStmt 0x9a65958
|-IntegerLiteral 0x9a65940 'int' 11
|-<<<NULL>>>
`-CompoundStmt 0x9a659c8
  |-BinaryOperator 0x9a63080 'int' lvalue '='
  | |-DeclRefExpr 0x9a63050 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | `-IntegerLiteral 0x9a63068 'int' 2
  |-BinaryOperator 0x9a659a8 'int' lvalue '='
  | |-DeclRefExpr 0x9a65990 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a65978 'int' 9
  `-BreakStmt 0x9a659c0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 12 9a6f470
____localvar____6 % 2 == 0[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2)[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #1
____localvar____6 % 2 == 0[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 257] terminator cond stmt met: IfStmt
IfStmt 0x9a65a30
|-<<<NULL>>>
|-BinaryOperator 0x9a63038 '_Bool' '=='
| |-BinaryOperator 0x9a63008 'int' '%'
| | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
| | `-IntegerLiteral 0x9a62fe0 'int' 2
| `-IntegerLiteral 0x9a63020 'int' 0
|-CompoundStmt 0x9a65ae0
| `-BinaryOperator 0x9a65a80 'int' lvalue '='
|   |-DeclRefExpr 0x9a65a68 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
|   `-IntegerLiteral 0x9a65a50 'int' 11
`-CompoundStmt 0x9a65af8
  `-BinaryOperator 0x9a65ac8 'int' lvalue '='
    |-DeclRefExpr 0x9a65ab0 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
    `-IntegerLiteral 0x9a65a98 'int' 10
CaseStmt 0x9a65a00
|-IntegerLiteral 0x9a659e8 'int' 12
|-<<<NULL>>>
`-CompoundStmt 0x9a65b60
  |-LabelStmt 0x9a64d00 '____label____4'
  | `-NullStmt 0x9a65a20
  |-BinaryOperator 0x9a62fb0 'double' lvalue '='
  | |-DeclRefExpr 0x9a62e70 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  | `-CallExpr 0x9a62f78 'double'
  |   |-ImplicitCastExpr 0x9a62f68 'double (*)(double, int)' <FunctionToPointerDecay>
  |   | `-DeclRefExpr 0x9a62f30 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  |   |-ImplicitCastExpr 0x9a62fa0 'double' <LValueToRValue>
  |   | `-DeclRefExpr 0x9a62ebc 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  |   `-BinaryOperator 0x9a62f18 'int' '/'
  |     |-ImplicitCastExpr 0x9a62f08 'int' <LValueToRValue>
  |     | `-DeclRefExpr 0x9a62ed4 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  |     `-IntegerLiteral 0x9a62ef0 'int' 2
  |-IfStmt 0x9a65a30
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a63038 '_Bool' '=='
  | | |-BinaryOperator 0x9a63008 'int' '%'
  | | | |-ImplicitCastExpr 0x9a62ff8 'int' <LValueToRValue>
  | | | | `-DeclRefExpr 0x9a62fc8 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
  | | | `-IntegerLiteral 0x9a62fe0 'int' 2
  | | `-IntegerLiteral 0x9a63020 'int' 0
  | |-CompoundStmt 0x9a65ae0
  | | `-BinaryOperator 0x9a65a80 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a65a68 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | |   `-IntegerLiteral 0x9a65a50 'int' 11
  | `-CompoundStmt 0x9a65af8
  |   `-BinaryOperator 0x9a65ac8 'int' lvalue '='
  |     |-DeclRefExpr 0x9a65ab0 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  |     `-IntegerLiteral 0x9a65a98 'int' 10
  |-BinaryOperator 0x9a65b40 'int' lvalue '='
  | |-DeclRefExpr 0x9a65b28 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a65b10 'int' 11
  `-BreakStmt 0x9a65b58
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 13 9a6f4dc
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
return ____localvar____7 * ____localvar____7;
CaseStmt 0x9a65ba0
|-IntegerLiteral 0x9a65b88 'int' 13
|-<<<NULL>>>
`-CompoundStmt 0x9a65bd8
  |-LabelStmt 0x9a64db0 '____label____5'
  | `-NullStmt 0x9a65bc0
  |-ReturnStmt 0x9a62e10
  | `-BinaryOperator 0x9a62df8 'double' '*'
  |   |-ImplicitCastExpr 0x9a62dd8 'double' <LValueToRValue>
  |   | `-DeclRefExpr 0x9a62da8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  |   `-ImplicitCastExpr 0x9a62de8 'double' <LValueToRValue>
  |     `-DeclRefExpr 0x9a62dc0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  `-BreakStmt 0x9a65bd0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 14 9a6f550
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
return ____localvar____7 * ____localvar____7 * ____localvar____5;
CaseStmt 0x9a65c10
|-IntegerLiteral 0x9a65bf8 'int' 14
|-<<<NULL>>>
`-CompoundStmt 0x9a65c48
  |-LabelStmt 0x9a64e60 '____label____6'
  | `-NullStmt 0x9a65c30
  |-ReturnStmt 0x9a62d48
  | `-BinaryOperator 0x9a62d30 'double' '*'
  |   |-BinaryOperator 0x9a62cf0 'double' '*'
  |   | |-ImplicitCastExpr 0x9a62cd0 'double' <LValueToRValue>
  |   | | `-DeclRefExpr 0x9a62ca0 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  |   | `-ImplicitCastExpr 0x9a62ce0 'double' <LValueToRValue>
  |   |   `-DeclRefExpr 0x9a62cb8 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
  |   `-ImplicitCastExpr 0x9a62d20 'double' <LValueToRValue>
  |     `-DeclRefExpr 0x9a62d08 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
  `-BreakStmt 0x9a65c40
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 15 9a6f5b4
<NULL>CaseStmt 0x9a65c80
|-IntegerLiteral 0x9a65c68 'int' 15
|-<<<NULL>>>
`-CompoundStmt 0x9a65cf0
  |-BinaryOperator 0x9a65cd0 'int' lvalue '='
  | |-DeclRefExpr 0x9a65cb8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a65ca0 'int' 3
  `-BreakStmt 0x9a65ce8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 16 9a6f628
<NULL>CaseStmt 0x9a65d20
|-IntegerLiteral 0x9a65d08 'int' 16
|-<<<NULL>>>
`-CompoundStmt 0x9a65d90
  |-BinaryOperator 0x9a65d70 'int' lvalue '='
  | |-DeclRefExpr 0x9a65d58 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a65d40 'int' 14
  `-BreakStmt 0x9a65d88
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 17 9a6f68c
____localvar____9 == 1[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____9 == 1[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 257] terminator cond stmt met: IfStmt
IfStmt 0x9a65de0
|-<<<NULL>>>
|-BinaryOperator 0x9a64e98 '_Bool' '=='
| |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| `-IntegerLiteral 0x9a62c68 'int' 1
|-CompoundStmt 0x9a65e90
| `-BinaryOperator 0x9a65e30 'int' lvalue '='
|   |-DeclRefExpr 0x9a65e18 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
|   `-IntegerLiteral 0x9a65e00 'int' 16
`-CompoundStmt 0x9a65ea8
  `-BinaryOperator 0x9a65e78 'int' lvalue '='
    |-DeclRefExpr 0x9a65e60 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
    `-IntegerLiteral 0x9a65e48 'int' 15
CaseStmt 0x9a65dc0
|-IntegerLiteral 0x9a65da8 'int' 17
|-<<<NULL>>>
`-CompoundStmt 0x9a65f10
  |-IfStmt 0x9a65de0
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a64e98 '_Bool' '=='
  | | |-ImplicitCastExpr 0x9a64e88 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a64e70 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | | `-IntegerLiteral 0x9a62c68 'int' 1
  | |-CompoundStmt 0x9a65e90
  | | `-BinaryOperator 0x9a65e30 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a65e18 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | |   `-IntegerLiteral 0x9a65e00 'int' 16
  | `-CompoundStmt 0x9a65ea8
  |   `-BinaryOperator 0x9a65e78 'int' lvalue '='
  |     |-DeclRefExpr 0x9a65e60 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  |     `-IntegerLiteral 0x9a65e48 'int' 15
  |-BinaryOperator 0x9a65ef0 'int' lvalue '='
  | |-DeclRefExpr 0x9a65ed8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a65ec0 'int' 16
  `-BreakStmt 0x9a65f08
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 18 9a6f6f8
<NULL>CaseStmt 0x9a65f48
|-IntegerLiteral 0x9a65f30 'int' 18
|-<<<NULL>>>
`-CompoundStmt 0x9a65fb8
  |-BinaryOperator 0x9a65f98 'int' lvalue '='
  | |-DeclRefExpr 0x9a65f80 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a65f68 'int' 13
  `-BreakStmt 0x9a65fb0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 19 9a6f75c
____localvar____9 == 2[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____9 == 2[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 257] terminator cond stmt met: IfStmt
IfStmt 0x9a66008
|-<<<NULL>>>
|-BinaryOperator 0x9a64de8 '_Bool' '=='
| |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| `-IntegerLiteral 0x9a62d70 'int' 2
|-CompoundStmt 0x9a660b8
| `-BinaryOperator 0x9a66058 'int' lvalue '='
|   |-DeclRefExpr 0x9a66040 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
|   `-IntegerLiteral 0x9a66028 'int' 18
`-CompoundStmt 0x9a660d0
  `-BinaryOperator 0x9a660a0 'int' lvalue '='
    |-DeclRefExpr 0x9a66088 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
    `-IntegerLiteral 0x9a66070 'int' 17
CaseStmt 0x9a65fe8
|-IntegerLiteral 0x9a65fd0 'int' 19
|-<<<NULL>>>
`-CompoundStmt 0x9a66138
  |-IfStmt 0x9a66008
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a64de8 '_Bool' '=='
  | | |-ImplicitCastExpr 0x9a64dd8 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a64dc0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | | `-IntegerLiteral 0x9a62d70 'int' 2
  | |-CompoundStmt 0x9a660b8
  | | `-BinaryOperator 0x9a66058 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a66040 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | |   `-IntegerLiteral 0x9a66028 'int' 18
  | `-CompoundStmt 0x9a660d0
  |   `-BinaryOperator 0x9a660a0 'int' lvalue '='
  |     |-DeclRefExpr 0x9a66088 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  |     `-IntegerLiteral 0x9a66070 'int' 17
  |-BinaryOperator 0x9a66118 'int' lvalue '='
  | |-DeclRefExpr 0x9a66100 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a660e8 'int' 18
  `-BreakStmt 0x9a66130
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 20 9a6f7c8
<NULL>CaseStmt 0x9a66170
|-IntegerLiteral 0x9a66158 'int' 20
|-<<<NULL>>>
`-CompoundStmt 0x9a661e0
  |-BinaryOperator 0x9a661c0 'int' lvalue '='
  | |-DeclRefExpr 0x9a661a8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a66190 'int' 12
  `-BreakStmt 0x9a661d8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 21 9a6f8cc
____localvar____9 == 3[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____9 == 3[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 257] terminator cond stmt met: IfStmt
IfStmt 0x9a66230
|-<<<NULL>>>
|-BinaryOperator 0x9a64d38 '_Bool' '=='
| |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| `-IntegerLiteral 0x9a62e38 'int' 3
|-CompoundStmt 0x9a662e0
| `-BinaryOperator 0x9a66280 'int' lvalue '='
|   |-DeclRefExpr 0x9a66268 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
|   `-IntegerLiteral 0x9a66250 'int' 20
`-CompoundStmt 0x9a662f8
  `-BinaryOperator 0x9a662c8 'int' lvalue '='
    |-DeclRefExpr 0x9a662b0 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
    `-IntegerLiteral 0x9a66298 'int' 19
CaseStmt 0x9a66210
|-IntegerLiteral 0x9a661f8 'int' 21
|-<<<NULL>>>
`-CompoundStmt 0x9a66360
  |-IfStmt 0x9a66230
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a64d38 '_Bool' '=='
  | | |-ImplicitCastExpr 0x9a64d28 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a64d10 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | | `-IntegerLiteral 0x9a62e38 'int' 3
  | |-CompoundStmt 0x9a662e0
  | | `-BinaryOperator 0x9a66280 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a66268 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | |   `-IntegerLiteral 0x9a66250 'int' 20
  | `-CompoundStmt 0x9a662f8
  |   `-BinaryOperator 0x9a662c8 'int' lvalue '='
  |     |-DeclRefExpr 0x9a662b0 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  |     `-IntegerLiteral 0x9a66298 'int' 19
  |-BinaryOperator 0x9a66340 'int' lvalue '='
  | |-DeclRefExpr 0x9a66328 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a66310 'int' 20
  `-BreakStmt 0x9a66358
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 22 9a6f938
<NULL>CaseStmt 0x9a66398
|-IntegerLiteral 0x9a66380 'int' 22
|-<<<NULL>>>
`-CompoundStmt 0x9a66408
  |-BinaryOperator 0x9a663e8 'int' lvalue '='
  | |-DeclRefExpr 0x9a663d0 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a663b8 'int' 8
  `-BreakStmt 0x9a66400
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 23 9a6f99c
____localvar____9 == 4[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____9 == 4[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 257] terminator cond stmt met: IfStmt
IfStmt 0x9a66458
|-<<<NULL>>>
|-BinaryOperator 0x9a64c88 '_Bool' '=='
| |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| `-IntegerLiteral 0x9a63158 'int' 4
|-CompoundStmt 0x9a66508
| `-BinaryOperator 0x9a664a8 'int' lvalue '='
|   |-DeclRefExpr 0x9a66490 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
|   `-IntegerLiteral 0x9a66478 'int' 22
`-CompoundStmt 0x9a66520
  `-BinaryOperator 0x9a664f0 'int' lvalue '='
    |-DeclRefExpr 0x9a664d8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
    `-IntegerLiteral 0x9a664c0 'int' 21
CaseStmt 0x9a66438
|-IntegerLiteral 0x9a66420 'int' 23
|-<<<NULL>>>
`-CompoundStmt 0x9a66588
  |-IfStmt 0x9a66458
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a64c88 '_Bool' '=='
  | | |-ImplicitCastExpr 0x9a64c78 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a64c60 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | | `-IntegerLiteral 0x9a63158 'int' 4
  | |-CompoundStmt 0x9a66508
  | | `-BinaryOperator 0x9a664a8 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a66490 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | |   `-IntegerLiteral 0x9a66478 'int' 22
  | `-CompoundStmt 0x9a66520
  |   `-BinaryOperator 0x9a664f0 'int' lvalue '='
  |     |-DeclRefExpr 0x9a664d8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  |     `-IntegerLiteral 0x9a664c0 'int' 21
  |-BinaryOperator 0x9a66568 'int' lvalue '='
  | |-DeclRefExpr 0x9a66550 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a66538 'int' 22
  `-BreakStmt 0x9a66580
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 24 9a6fa08
<NULL>CaseStmt 0x9a665c0
|-IntegerLiteral 0x9a665a8 'int' 24
|-<<<NULL>>>
`-CompoundStmt 0x9a66630
  |-BinaryOperator 0x9a66610 'int' lvalue '='
  | |-DeclRefExpr 0x9a665f8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a665e0 'int' 7
  `-BreakStmt 0x9a66628
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 25 9a6fa6c
____localvar____9 == 5[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____9 = (____localvar____8)[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #1
____localvar____9 == 5[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 257] terminator cond stmt met: IfStmt
IfStmt 0x9a66690
|-<<<NULL>>>
|-BinaryOperator 0x9a64bf8 '_Bool' '=='
| |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
| `-IntegerLiteral 0x9a631e0 'int' 5
|-CompoundStmt 0x9a66740
| `-BinaryOperator 0x9a666e0 'int' lvalue '='
|   |-DeclRefExpr 0x9a666c8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
|   `-IntegerLiteral 0x9a666b0 'int' 24
`-CompoundStmt 0x9a66758
  `-BinaryOperator 0x9a66728 'int' lvalue '='
    |-DeclRefExpr 0x9a66710 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
    `-IntegerLiteral 0x9a666f8 'int' 23
CaseStmt 0x9a66660
|-IntegerLiteral 0x9a66648 'int' 25
|-<<<NULL>>>
`-CompoundStmt 0x9a667c0
  |-LabelStmt 0x9a64ab0 '____label____0'
  | `-NullStmt 0x9a66680
  |-BinaryOperator 0x9a650d8 'int' lvalue '='
  | |-DeclRefExpr 0x9a650c0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | `-ParenExpr 0x9a64ac0 'int'
  |   `-ImplicitCastExpr 0x9a62c38 'int' <LValueToRValue>
  |     `-DeclRefExpr 0x9a62c20 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  |-IfStmt 0x9a66690
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a64bf8 '_Bool' '=='
  | | |-ImplicitCastExpr 0x9a64be8 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a64bd0 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
  | | `-IntegerLiteral 0x9a631e0 'int' 5
  | |-CompoundStmt 0x9a66740
  | | `-BinaryOperator 0x9a666e0 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a666c8 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | |   `-IntegerLiteral 0x9a666b0 'int' 24
  | `-CompoundStmt 0x9a66758
  |   `-BinaryOperator 0x9a66728 'int' lvalue '='
  |     |-DeclRefExpr 0x9a66710 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  |     `-IntegerLiteral 0x9a666f8 'int' 23
  |-BinaryOperator 0x9a667a0 'int' lvalue '='
  | |-DeclRefExpr 0x9a66788 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a66770 'int' 24
  `-BreakStmt 0x9a667b8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 26 9a6fad8
____localvar____8 != 0[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____8 != 0[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 257] terminator cond stmt met: IfStmt
IfStmt 0x9a66830
|-<<<NULL>>>
|-BinaryOperator 0x9a62c08 '_Bool' '!='
| |-ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
| `-IntegerLiteral 0x9a62be0 'int' 0
|-CompoundStmt 0x9a668e0
| `-BinaryOperator 0x9a66880 'int' lvalue '='
|   |-DeclRefExpr 0x9a66868 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
|   `-IntegerLiteral 0x9a66850 'int' 25
`-CompoundStmt 0x9a668f8
  `-BinaryOperator 0x9a668c8 'int' lvalue '='
    |-DeclRefExpr 0x9a668b0 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
    `-IntegerLiteral 0x9a66898 'int' 1
CaseStmt 0x9a66800
|-IntegerLiteral 0x9a667e8 'int' 26
|-<<<NULL>>>
`-CompoundStmt 0x9a66960
  |-LabelStmt 0x9a64f60 '____label____7'
  | `-NullStmt 0x9a66820
  |-IfStmt 0x9a66830
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a62c08 '_Bool' '!='
  | | |-ImplicitCastExpr 0x9a62bf8 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a62bc8 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | | `-IntegerLiteral 0x9a62be0 'int' 0
  | |-CompoundStmt 0x9a668e0
  | | `-BinaryOperator 0x9a66880 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a66868 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | |   `-IntegerLiteral 0x9a66850 'int' 25
  | `-CompoundStmt 0x9a668f8
  |   `-BinaryOperator 0x9a668c8 'int' lvalue '='
  |     |-DeclRefExpr 0x9a668b0 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  |     `-IntegerLiteral 0x9a66898 'int' 1
  |-BinaryOperator 0x9a66940 'int' lvalue '='
  | |-DeclRefExpr 0x9a66928 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a66910 'int' 25
  `-BreakStmt 0x9a66958
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 27 9a6fb44
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #1
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #2
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #3
____localvar____8 = 5CaseStmt 0x9a66998
|-IntegerLiteral 0x9a66980 'int' 27
|-<<<NULL>>>
`-CompoundStmt 0x9a66a08
  |-BinaryOperator 0x9a65098 'int' lvalue '='
  | |-DeclRefExpr 0x9a6507c 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
  | `-IntegerLiteral 0x9a62ba0 'int' 5
  |-BinaryOperator 0x9a669e8 'int' lvalue '='
  | |-DeclRefExpr 0x9a669d0 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
  | `-IntegerLiteral 0x9a669b8 'int' 26
  `-BreakStmt 0x9a66a00
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 85] New switch body create
switch (int ____localvar____10 = 27) {
  case 1:
    {
      ____label____9:
        ;
        break;
    }
  case 2:
    {
      ____label____8:
        ;
        ____localvar____10 = 26;
        break;
    }
  case 3:
    {
      ____label____1:
        ;
        ____localvar____10 = 2;
        break;
    }
  case 4:
    {
        ____localvar____10 = 3;
        break;
    }
  case 5:
    {
        ____localvar____8 = 3;
        ____localvar____10 = 4;
        break;
    }
  case 6:
    {
        ____localvar____8 = 4;
        ____localvar____10 = 4;
        break;
    }
  case 7:
    {
      ____label____2:
        ;
        if (____localvar____6 == 0) {
            ____localvar____10 = 6;
        } else {
            ____localvar____10 = 5;
        }
        ____localvar____10 = 6;
        break;
    }
  case 8:
    {
      ____label____3:
        ;
        return 1;
        break;
    }
  case 9:
    {
        ____localvar____10 = 3;
        break;
    }
  case 10:
    {
        ____localvar____8 = 1;
        ____localvar____10 = 9;
        break;
    }
  case 11:
    {
        ____localvar____8 = 2;
        ____localvar____10 = 9;
        break;
    }
  case 12:
    {
      ____label____4:
        ;
        ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
        if (____localvar____6 % 2 == 0) {
            ____localvar____10 = 11;
        } else {
            ____localvar____10 = 10;
        }
        ____localvar____10 = 11;
        break;
    }
  case 13:
    {
      ____label____5:
        ;
        return ____localvar____7 * ____localvar____7;
        break;
    }
  case 14:
    {
      ____label____6:
        ;
        return ____localvar____7 * ____localvar____7 * ____localvar____5;
        break;
    }
  case 15:
    {
        ____localvar____10 = 3;
        break;
    }
  case 16:
    {
        ____localvar____10 = 14;
        break;
    }
  case 17:
    {
        if (____localvar____9 == 1) {
            ____localvar____10 = 16;
        } else {
            ____localvar____10 = 15;
        }
        ____localvar____10 = 16;
        break;
    }
  case 18:
    {
        ____localvar____10 = 13;
        break;
    }
  case 19:
    {
        if (____localvar____9 == 2) {
            ____localvar____10 = 18;
        } else {
            ____localvar____10 = 17;
        }
        ____localvar____10 = 18;
        break;
    }
  case 20:
    {
        ____localvar____10 = 12;
        break;
    }
  case 21:
    {
        if (____localvar____9 == 3) {
            ____localvar____10 = 20;
        } else {
            ____localvar____10 = 19;
        }
        ____localvar____10 = 20;
        break;
    }
  case 22:
    {
        ____localvar____10 = 8;
        break;
    }
  case 23:
    {
        if (____localvar____9 == 4) {
            ____localvar____10 = 22;
        } else {
            ____localvar____10 = 21;
        }
        ____localvar____10 = 22;
        break;
    }
  case 24:
    {
        ____localvar____10 = 7;
        break;
    }
  case 25:
    {
      ____label____0:
        ;
        ____localvar____9 = (____localvar____8);
        if (____localvar____9 == 5) {
            ____localvar____10 = 24;
        } else {
            ____localvar____10 = 23;
        }
        ____localvar____10 = 24;
        break;
    }
  case 26:
    {
      ____label____7:
        ;
        if (____localvar____8 != 0) {
            ____localvar____10 = 25;
        } else {
            ____localvar____10 = 1;
        }
        ____localvar____10 = 25;
        break;
    }
  case 27:
    {
        ____localvar____8 = 5;
        ____localvar____10 = 26;
        break;
    }
}
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 89] New function body created.
{
    double ____localvar____7;
    int ____localvar____8;
    int ____localvar____9;
    int ____localvar____10 = 27;
    while (____localvar____10 != 0)
        switch (int ____localvar____10 = 27) {
          case 1:
            {
              ____label____9:
                ;
                break;
            }
          case 2:
            {
              ____label____8:
                ;
                ____localvar____10 = 26;
                break;
            }
          case 3:
            {
              ____label____1:
                ;
                ____localvar____10 = 2;
                break;
            }
          case 4:
            {
                ____localvar____10 = 3;
                break;
            }
          case 5:
            {
                ____localvar____8 = 3;
                ____localvar____10 = 4;
                break;
            }
          case 6:
            {
                ____localvar____8 = 4;
                ____localvar____10 = 4;
                break;
            }
          case 7:
            {
              ____label____2:
                ;
                if (____localvar____6 == 0) {
                    ____localvar____10 = 6;
                } else {
                    ____localvar____10 = 5;
                }
                ____localvar____10 = 6;
                break;
            }
          case 8:
            {
              ____label____3:
                ;
                return 1;
                break;
            }
          case 9:
            {
                ____localvar____10 = 3;
                break;
            }
          case 10:
            {
                ____localvar____8 = 1;
                ____localvar____10 = 9;
                break;
            }
          case 11:
            {
                ____localvar____8 = 2;
                ____localvar____10 = 9;
                break;
            }
          case 12:
            {
              ____label____4:
                ;
                ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
                if (____localvar____6 % 2 == 0) {
                    ____localvar____10 = 11;
                } else {
                    ____localvar____10 = 10;
                }
                ____localvar____10 = 11;
                break;
            }
          case 13:
            {
              ____label____5:
                ;
                return ____localvar____7 * ____localvar____7;
                break;
            }
          case 14:
            {
              ____label____6:
                ;
                return ____localvar____7 * ____localvar____7 * ____localvar____5;
                break;
            }
          case 15:
            {
                ____localvar____10 = 3;
                break;
            }
          case 16:
            {
                ____localvar____10 = 14;
                break;
            }
          case 17:
            {
                if (____localvar____9 == 1) {
                    ____localvar____10 = 16;
                } else {
                    ____localvar____10 = 15;
                }
                ____localvar____10 = 16;
                break;
            }
          case 18:
            {
                ____localvar____10 = 13;
                break;
            }
          case 19:
            {
                if (____localvar____9 == 2) {
                    ____localvar____10 = 18;
                } else {
                    ____localvar____10 = 17;
                }
                ____localvar____10 = 18;
                break;
            }
          case 20:
            {
                ____localvar____10 = 12;
                break;
            }
          case 21:
            {
                if (____localvar____9 == 3) {
                    ____localvar____10 = 20;
                } else {
                    ____localvar____10 = 19;
                }
                ____localvar____10 = 20;
                break;
            }
          case 22:
            {
                ____localvar____10 = 8;
                break;
            }
          case 23:
            {
                if (____localvar____9 == 4) {
                    ____localvar____10 = 22;
                } else {
                    ____localvar____10 = 21;
                }
                ____localvar____10 = 22;
                break;
            }
          case 24:
            {
                ____localvar____10 = 7;
                break;
            }
          case 25:
            {
              ____label____0:
                ;
                ____localvar____9 = (____localvar____8);
                if (____localvar____9 == 5) {
                    ____localvar____10 = 24;
                } else {
                    ____localvar____10 = 23;
                }
                ____localvar____10 = 24;
                break;
            }
          case 26:
            {
              ____label____7:
                ;
                if (____localvar____8 != 0) {
                    ____localvar____10 = 25;
                } else {
                    ____localvar____10 = 1;
                }
                ____localvar____10 = 25;
                break;
            }
          case 27:
            {
                ____localvar____8 = 5;
                ____localvar____10 = 26;
                break;
            }
        }
}
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 92] decl after flatten
FunctionDecl 0x9a62aa0 <_gcd_ob.cpp:3:1, line:40:1> fast_pow 'double (double, int)'
|-ParmVarDecl 0x9a629e0 <line:3:17, col:24> ____localvar____5 'double'
|-ParmVarDecl 0x9a62a20 <col:43, col:47> ____localvar____6 'int'
`-CompoundStmt 0x9a633b0 <col:66, line:40:1>
  |-DeclStmt 0x9a65060 <<invalid sloc>>
  | `-VarDecl 0x9a62b20 <line:4:5, col:12> ____localvar____7 'double'
  |-DeclStmt 0x9a650b0 <<invalid sloc>>
  | `-VarDecl 0x9a62b70 <line:5:5, col:9> ____localvar____8 'int'
  |-DeclStmt 0x9a650f0 <<invalid sloc>>
  | `-VarDecl 0x9a64ae0 <<invalid sloc>> ____localvar____9 'int'
  |-DeclStmt 0x9a65160 <<invalid sloc>>
  | `-VarDecl 0x9a65130 <<invalid sloc>> ____localvar____10 'int'
  |   `-IntegerLiteral 0x9a65118 <<invalid sloc>> 'int' 27
  `-WhileStmt 0x9a651c8 <<invalid sloc>>
    |-<<<NULL>>>
    |-BinaryOperator 0x9a651b0 <<invalid sloc>> '_Bool' '!='
    | |-ImplicitCastExpr 0x9a651a0 <<invalid sloc>> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x9a65188 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
    | `-IntegerLiteral 0x9a65170 <<invalid sloc>> 'int' 0
    `-SwitchStmt 0x9a651f8 <<invalid sloc>>
      |-DeclStmt 0x9a65218 <<invalid sloc>>
      | `-VarDecl 0x9a65130 <<invalid sloc>> ____localvar____10 'int'
      |   `-IntegerLiteral 0x9a65118 <<invalid sloc>> 'int' 27
      |-DeclRefExpr 0x9a651dc <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
      `-CompoundStmt 0x9a66a28 <<invalid sloc>>
        |-CaseStmt 0x9a65240 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65228 <<invalid sloc>> 'int' 1
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65278 <<invalid sloc>>
        |   |-LabelStmt 0x9a64fe0 <<invalid sloc>> '____label____9'
        |   | `-NullStmt 0x9a65260 <<invalid sloc>>
        |   `-BreakStmt 0x9a65270 <<invalid sloc>>
        |-CaseStmt 0x9a652a8 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65290 <<invalid sloc>> 'int' 2
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65328 <<invalid sloc>>
        |   |-LabelStmt 0x9a64fa0 <<invalid sloc>> '____label____8'
        |   | `-NullStmt 0x9a652c8 <<invalid sloc>>
        |   |-BinaryOperator 0x9a65308 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a652f0 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a652d8 <<invalid sloc>> 'int' 26
        |   `-BreakStmt 0x9a65320 <<invalid sloc>>
        |-CaseStmt 0x9a65360 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65348 <<invalid sloc>> 'int' 3
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a653e0 <<invalid sloc>>
        |   |-LabelStmt 0x9a64b80 <<invalid sloc>> '____label____1'
        |   | `-NullStmt 0x9a65380 <<invalid sloc>>
        |   |-BinaryOperator 0x9a653c0 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a653a8 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a65390 <<invalid sloc>> 'int' 2
        |   `-BreakStmt 0x9a653d8 <<invalid sloc>>
        |-CaseStmt 0x9a65418 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65400 <<invalid sloc>> 'int' 4
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65488 <<invalid sloc>>
        |   |-BinaryOperator 0x9a65468 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a65450 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a65438 <<invalid sloc>> 'int' 3
        |   `-BreakStmt 0x9a65480 <<invalid sloc>>
        |-CaseStmt 0x9a654b8 <<invalid sloc>>
        | |-IntegerLiteral 0x9a654a0 <<invalid sloc>> 'int' 5
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65528 <<invalid sloc>>
        |   |-BinaryOperator 0x9a63300 <line:35:21, col:41> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a632cc <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
        |   | `-IntegerLiteral 0x9a632e8 <col:41> 'int' 3
        |   |-BinaryOperator 0x9a65508 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a654f0 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a654d8 <<invalid sloc>> 'int' 4
        |   `-BreakStmt 0x9a65520 <<invalid sloc>>
        |-CaseStmt 0x9a65560 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65548 <<invalid sloc>> 'int' 6
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a655d0 <<invalid sloc>>
        |   |-BinaryOperator 0x9a632a0 <line:33:21, col:41> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a63270 <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
        |   | `-IntegerLiteral 0x9a63288 <col:41> 'int' 4
        |   |-BinaryOperator 0x9a655b0 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a65598 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a65580 <<invalid sloc>> 'int' 4
        |   `-BreakStmt 0x9a655c8 <<invalid sloc>>
        |-CaseStmt 0x9a65608 <<invalid sloc>>
        | |-IntegerLiteral 0x9a655f0 <<invalid sloc>> 'int' 7
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65768 <<invalid sloc>>
        |   |-LabelStmt 0x9a64bc0 <<invalid sloc>> '____label____2'
        |   | `-NullStmt 0x9a65628 <<invalid sloc>>
        |   |-IfStmt 0x9a65638 <<invalid sloc>>
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x9a63258 <line:32:21, col:42> '_Bool' '=='
        |   | | |-ImplicitCastExpr 0x9a63248 <col:21> 'int' <LValueToRValue>
        |   | | | `-DeclRefExpr 0x9a63218 <col:21> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
        |   | | `-IntegerLiteral 0x9a63230 <col:42> 'int' 0
        |   | |-CompoundStmt 0x9a656e8 <<invalid sloc>>
        |   | | `-BinaryOperator 0x9a65688 <<invalid sloc>> 'int' lvalue '='
        |   | |   |-DeclRefExpr 0x9a65670 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | |   `-IntegerLiteral 0x9a65658 <<invalid sloc>> 'int' 6
        |   | `-CompoundStmt 0x9a65700 <<invalid sloc>>
        |   |   `-BinaryOperator 0x9a656d0 <<invalid sloc>> 'int' lvalue '='
        |   |     |-DeclRefExpr 0x9a656b8 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   |     `-IntegerLiteral 0x9a656a0 <<invalid sloc>> 'int' 5
        |   |-BinaryOperator 0x9a65748 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a65730 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a65718 <<invalid sloc>> 'int' 6
        |   `-BreakStmt 0x9a65760 <<invalid sloc>>
        |-CaseStmt 0x9a657a0 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65788 <<invalid sloc>> 'int' 8
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a657d8 <<invalid sloc>>
        |   |-LabelStmt 0x9a64c50 <<invalid sloc>> '____label____3'
        |   | `-NullStmt 0x9a657c0 <<invalid sloc>>
        |   |-ReturnStmt 0x9a631b8 <line:28:17, col:24>
        |   | `-ImplicitCastExpr 0x9a631a8 <col:24> 'double' <IntegralToFloating>
        |   |   `-IntegerLiteral 0x9a63190 <col:24> 'int' 1
        |   `-BreakStmt 0x9a657d0 <<invalid sloc>>
        |-CaseStmt 0x9a65810 <<invalid sloc>>
        | |-IntegerLiteral 0x9a657f8 <<invalid sloc>> 'int' 9
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65880 <<invalid sloc>>
        |   |-BinaryOperator 0x9a65860 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a65848 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a65830 <<invalid sloc>> 'int' 3
        |   `-BreakStmt 0x9a65878 <<invalid sloc>>
        |-CaseStmt 0x9a658b0 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65898 <<invalid sloc>> 'int' 10
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65920 <<invalid sloc>>
        |   |-BinaryOperator 0x9a630e0 <line:22:21, col:41> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a630ac <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
        |   | `-IntegerLiteral 0x9a630c8 <col:41> 'int' 1
        |   |-BinaryOperator 0x9a65900 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a658e8 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a658d0 <<invalid sloc>> 'int' 9
        |   `-BreakStmt 0x9a65918 <<invalid sloc>>
        |-CaseStmt 0x9a65958 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65940 <<invalid sloc>> 'int' 11
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a659c8 <<invalid sloc>>
        |   |-BinaryOperator 0x9a63080 <line:20:21, col:41> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a63050 <col:21> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
        |   | `-IntegerLiteral 0x9a63068 <col:41> 'int' 2
        |   |-BinaryOperator 0x9a659a8 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a65990 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a65978 <<invalid sloc>> 'int' 9
        |   `-BreakStmt 0x9a659c0 <<invalid sloc>>
        |-CaseStmt 0x9a65a00 <<invalid sloc>>
        | |-IntegerLiteral 0x9a659e8 <<invalid sloc>> 'int' 12
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65b60 <<invalid sloc>>
        |   |-LabelStmt 0x9a64d00 <<invalid sloc>> '____label____4'
        |   | `-NullStmt 0x9a65a20 <<invalid sloc>>
        |   |-BinaryOperator 0x9a62fb0 <line:18:17, col:86> 'double' lvalue '='
        |   | |-DeclRefExpr 0x9a62e70 <col:17> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
        |   | `-CallExpr 0x9a62f78 <col:37, col:86> 'double'
        |   |   |-ImplicitCastExpr 0x9a62f68 <col:37> 'double (*)(double, int)' <FunctionToPointerDecay>
        |   |   | `-DeclRefExpr 0x9a62f30 <col:37> 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
        |   |   |-ImplicitCastExpr 0x9a62fa0 <col:46> 'double' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x9a62ebc <col:46> 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
        |   |   `-BinaryOperator 0x9a62f18 <col:65, col:85> 'int' '/'
        |   |     |-ImplicitCastExpr 0x9a62f08 <col:65> 'int' <LValueToRValue>
        |   |     | `-DeclRefExpr 0x9a62ed4 <col:65> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
        |   |     `-IntegerLiteral 0x9a62ef0 <col:85> 'int' 2
        |   |-IfStmt 0x9a65a30 <<invalid sloc>>
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x9a63038 <line:19:21, col:46> '_Bool' '=='
        |   | | |-BinaryOperator 0x9a63008 <col:21, col:41> 'int' '%'
        |   | | | |-ImplicitCastExpr 0x9a62ff8 <col:21> 'int' <LValueToRValue>
        |   | | | | `-DeclRefExpr 0x9a62fc8 <col:21> 'int' lvalue ParmVar 0x9a62a20 '____localvar____6' 'int'
        |   | | | `-IntegerLiteral 0x9a62fe0 <col:41> 'int' 2
        |   | | `-IntegerLiteral 0x9a63020 <col:46> 'int' 0
        |   | |-CompoundStmt 0x9a65ae0 <<invalid sloc>>
        |   | | `-BinaryOperator 0x9a65a80 <<invalid sloc>> 'int' lvalue '='
        |   | |   |-DeclRefExpr 0x9a65a68 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | |   `-IntegerLiteral 0x9a65a50 <<invalid sloc>> 'int' 11
        |   | `-CompoundStmt 0x9a65af8 <<invalid sloc>>
        |   |   `-BinaryOperator 0x9a65ac8 <<invalid sloc>> 'int' lvalue '='
        |   |     |-DeclRefExpr 0x9a65ab0 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   |     `-IntegerLiteral 0x9a65a98 <<invalid sloc>> 'int' 10
        |   |-BinaryOperator 0x9a65b40 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a65b28 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a65b10 <<invalid sloc>> 'int' 11
        |   `-BreakStmt 0x9a65b58 <<invalid sloc>>
        |-CaseStmt 0x9a65ba0 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65b88 <<invalid sloc>> 'int' 13
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65bd8 <<invalid sloc>>
        |   |-LabelStmt 0x9a64db0 <<invalid sloc>> '____label____5'
        |   | `-NullStmt 0x9a65bc0 <<invalid sloc>>
        |   |-ReturnStmt 0x9a62e10 <line:14:17, col:44>
        |   | `-BinaryOperator 0x9a62df8 <col:24, col:44> 'double' '*'
        |   |   |-ImplicitCastExpr 0x9a62dd8 <col:24> 'double' <LValueToRValue>
        |   |   | `-DeclRefExpr 0x9a62da8 <col:24> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
        |   |   `-ImplicitCastExpr 0x9a62de8 <col:44> 'double' <LValueToRValue>
        |   |     `-DeclRefExpr 0x9a62dc0 <col:44> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
        |   `-BreakStmt 0x9a65bd0 <<invalid sloc>>
        |-CaseStmt 0x9a65c10 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65bf8 <<invalid sloc>> 'int' 14
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65c48 <<invalid sloc>>
        |   |-LabelStmt 0x9a64e60 <<invalid sloc>> '____label____6'
        |   | `-NullStmt 0x9a65c30 <<invalid sloc>>
        |   |-ReturnStmt 0x9a62d48 <line:10:17, col:64>
        |   | `-BinaryOperator 0x9a62d30 <col:24, col:64> 'double' '*'
        |   |   |-BinaryOperator 0x9a62cf0 <col:24, col:44> 'double' '*'
        |   |   | |-ImplicitCastExpr 0x9a62cd0 <col:24> 'double' <LValueToRValue>
        |   |   | | `-DeclRefExpr 0x9a62ca0 <col:24> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
        |   |   | `-ImplicitCastExpr 0x9a62ce0 <col:44> 'double' <LValueToRValue>
        |   |   |   `-DeclRefExpr 0x9a62cb8 <col:44> 'double' lvalue Var 0x9a62b20 '____localvar____7' 'double'
        |   |   `-ImplicitCastExpr 0x9a62d20 <col:64> 'double' <LValueToRValue>
        |   |     `-DeclRefExpr 0x9a62d08 <col:64> 'double' lvalue ParmVar 0x9a629e0 '____localvar____5' 'double'
        |   `-BreakStmt 0x9a65c40 <<invalid sloc>>
        |-CaseStmt 0x9a65c80 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65c68 <<invalid sloc>> 'int' 15
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65cf0 <<invalid sloc>>
        |   |-BinaryOperator 0x9a65cd0 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a65cb8 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a65ca0 <<invalid sloc>> 'int' 3
        |   `-BreakStmt 0x9a65ce8 <<invalid sloc>>
        |-CaseStmt 0x9a65d20 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65d08 <<invalid sloc>> 'int' 16
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65d90 <<invalid sloc>>
        |   |-BinaryOperator 0x9a65d70 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a65d58 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a65d40 <<invalid sloc>> 'int' 14
        |   `-BreakStmt 0x9a65d88 <<invalid sloc>>
        |-CaseStmt 0x9a65dc0 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65da8 <<invalid sloc>> 'int' 17
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65f10 <<invalid sloc>>
        |   |-IfStmt 0x9a65de0 <<invalid sloc>>
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x9a64e98 <<invalid sloc>, line:8:16> '_Bool' '=='
        |   | | |-ImplicitCastExpr 0x9a64e88 <<invalid sloc>> 'int' <LValueToRValue>
        |   | | | `-DeclRefExpr 0x9a64e70 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
        |   | | `-IntegerLiteral 0x9a62c68 <col:16> 'int' 1
        |   | |-CompoundStmt 0x9a65e90 <<invalid sloc>>
        |   | | `-BinaryOperator 0x9a65e30 <<invalid sloc>> 'int' lvalue '='
        |   | |   |-DeclRefExpr 0x9a65e18 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | |   `-IntegerLiteral 0x9a65e00 <<invalid sloc>> 'int' 16
        |   | `-CompoundStmt 0x9a65ea8 <<invalid sloc>>
        |   |   `-BinaryOperator 0x9a65e78 <<invalid sloc>> 'int' lvalue '='
        |   |     |-DeclRefExpr 0x9a65e60 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   |     `-IntegerLiteral 0x9a65e48 <<invalid sloc>> 'int' 15
        |   |-BinaryOperator 0x9a65ef0 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a65ed8 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a65ec0 <<invalid sloc>> 'int' 16
        |   `-BreakStmt 0x9a65f08 <<invalid sloc>>
        |-CaseStmt 0x9a65f48 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65f30 <<invalid sloc>> 'int' 18
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a65fb8 <<invalid sloc>>
        |   |-BinaryOperator 0x9a65f98 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a65f80 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a65f68 <<invalid sloc>> 'int' 13
        |   `-BreakStmt 0x9a65fb0 <<invalid sloc>>
        |-CaseStmt 0x9a65fe8 <<invalid sloc>>
        | |-IntegerLiteral 0x9a65fd0 <<invalid sloc>> 'int' 19
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a66138 <<invalid sloc>>
        |   |-IfStmt 0x9a66008 <<invalid sloc>>
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x9a64de8 <<invalid sloc>, line:12:16> '_Bool' '=='
        |   | | |-ImplicitCastExpr 0x9a64dd8 <<invalid sloc>> 'int' <LValueToRValue>
        |   | | | `-DeclRefExpr 0x9a64dc0 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
        |   | | `-IntegerLiteral 0x9a62d70 <col:16> 'int' 2
        |   | |-CompoundStmt 0x9a660b8 <<invalid sloc>>
        |   | | `-BinaryOperator 0x9a66058 <<invalid sloc>> 'int' lvalue '='
        |   | |   |-DeclRefExpr 0x9a66040 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | |   `-IntegerLiteral 0x9a66028 <<invalid sloc>> 'int' 18
        |   | `-CompoundStmt 0x9a660d0 <<invalid sloc>>
        |   |   `-BinaryOperator 0x9a660a0 <<invalid sloc>> 'int' lvalue '='
        |   |     |-DeclRefExpr 0x9a66088 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   |     `-IntegerLiteral 0x9a66070 <<invalid sloc>> 'int' 17
        |   |-BinaryOperator 0x9a66118 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a66100 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a660e8 <<invalid sloc>> 'int' 18
        |   `-BreakStmt 0x9a66130 <<invalid sloc>>
        |-CaseStmt 0x9a66170 <<invalid sloc>>
        | |-IntegerLiteral 0x9a66158 <<invalid sloc>> 'int' 20
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a661e0 <<invalid sloc>>
        |   |-BinaryOperator 0x9a661c0 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a661a8 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a66190 <<invalid sloc>> 'int' 12
        |   `-BreakStmt 0x9a661d8 <<invalid sloc>>
        |-CaseStmt 0x9a66210 <<invalid sloc>>
        | |-IntegerLiteral 0x9a661f8 <<invalid sloc>> 'int' 21
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a66360 <<invalid sloc>>
        |   |-IfStmt 0x9a66230 <<invalid sloc>>
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x9a64d38 <<invalid sloc>, line:16:16> '_Bool' '=='
        |   | | |-ImplicitCastExpr 0x9a64d28 <<invalid sloc>> 'int' <LValueToRValue>
        |   | | | `-DeclRefExpr 0x9a64d10 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
        |   | | `-IntegerLiteral 0x9a62e38 <col:16> 'int' 3
        |   | |-CompoundStmt 0x9a662e0 <<invalid sloc>>
        |   | | `-BinaryOperator 0x9a66280 <<invalid sloc>> 'int' lvalue '='
        |   | |   |-DeclRefExpr 0x9a66268 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | |   `-IntegerLiteral 0x9a66250 <<invalid sloc>> 'int' 20
        |   | `-CompoundStmt 0x9a662f8 <<invalid sloc>>
        |   |   `-BinaryOperator 0x9a662c8 <<invalid sloc>> 'int' lvalue '='
        |   |     |-DeclRefExpr 0x9a662b0 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   |     `-IntegerLiteral 0x9a66298 <<invalid sloc>> 'int' 19
        |   |-BinaryOperator 0x9a66340 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a66328 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a66310 <<invalid sloc>> 'int' 20
        |   `-BreakStmt 0x9a66358 <<invalid sloc>>
        |-CaseStmt 0x9a66398 <<invalid sloc>>
        | |-IntegerLiteral 0x9a66380 <<invalid sloc>> 'int' 22
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a66408 <<invalid sloc>>
        |   |-BinaryOperator 0x9a663e8 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a663d0 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a663b8 <<invalid sloc>> 'int' 8
        |   `-BreakStmt 0x9a66400 <<invalid sloc>>
        |-CaseStmt 0x9a66438 <<invalid sloc>>
        | |-IntegerLiteral 0x9a66420 <<invalid sloc>> 'int' 23
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a66588 <<invalid sloc>>
        |   |-IfStmt 0x9a66458 <<invalid sloc>>
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x9a64c88 <<invalid sloc>, line:26:16> '_Bool' '=='
        |   | | |-ImplicitCastExpr 0x9a64c78 <<invalid sloc>> 'int' <LValueToRValue>
        |   | | | `-DeclRefExpr 0x9a64c60 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
        |   | | `-IntegerLiteral 0x9a63158 <col:16> 'int' 4
        |   | |-CompoundStmt 0x9a66508 <<invalid sloc>>
        |   | | `-BinaryOperator 0x9a664a8 <<invalid sloc>> 'int' lvalue '='
        |   | |   |-DeclRefExpr 0x9a66490 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | |   `-IntegerLiteral 0x9a66478 <<invalid sloc>> 'int' 22
        |   | `-CompoundStmt 0x9a66520 <<invalid sloc>>
        |   |   `-BinaryOperator 0x9a664f0 <<invalid sloc>> 'int' lvalue '='
        |   |     |-DeclRefExpr 0x9a664d8 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   |     `-IntegerLiteral 0x9a664c0 <<invalid sloc>> 'int' 21
        |   |-BinaryOperator 0x9a66568 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a66550 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a66538 <<invalid sloc>> 'int' 22
        |   `-BreakStmt 0x9a66580 <<invalid sloc>>
        |-CaseStmt 0x9a665c0 <<invalid sloc>>
        | |-IntegerLiteral 0x9a665a8 <<invalid sloc>> 'int' 24
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a66630 <<invalid sloc>>
        |   |-BinaryOperator 0x9a66610 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a665f8 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a665e0 <<invalid sloc>> 'int' 7
        |   `-BreakStmt 0x9a66628 <<invalid sloc>>
        |-CaseStmt 0x9a66660 <<invalid sloc>>
        | |-IntegerLiteral 0x9a66648 <<invalid sloc>> 'int' 25
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a667c0 <<invalid sloc>>
        |   |-LabelStmt 0x9a64ab0 <<invalid sloc>> '____label____0'
        |   | `-NullStmt 0x9a66680 <<invalid sloc>>
        |   |-BinaryOperator 0x9a650d8 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a650c0 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
        |   | `-ParenExpr 0x9a64ac0 <<invalid sloc>> 'int'
        |   |   `-ImplicitCastExpr 0x9a62c38 <line:7:17> 'int' <LValueToRValue>
        |   |     `-DeclRefExpr 0x9a62c20 <col:17> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
        |   |-IfStmt 0x9a66690 <<invalid sloc>>
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x9a64bf8 <<invalid sloc>, line:30:16> '_Bool' '=='
        |   | | |-ImplicitCastExpr 0x9a64be8 <<invalid sloc>> 'int' <LValueToRValue>
        |   | | | `-DeclRefExpr 0x9a64bd0 <<invalid sloc>> 'int' lvalue Var 0x9a64ae0 '____localvar____9' 'int'
        |   | | `-IntegerLiteral 0x9a631e0 <col:16> 'int' 5
        |   | |-CompoundStmt 0x9a66740 <<invalid sloc>>
        |   | | `-BinaryOperator 0x9a666e0 <<invalid sloc>> 'int' lvalue '='
        |   | |   |-DeclRefExpr 0x9a666c8 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | |   `-IntegerLiteral 0x9a666b0 <<invalid sloc>> 'int' 24
        |   | `-CompoundStmt 0x9a66758 <<invalid sloc>>
        |   |   `-BinaryOperator 0x9a66728 <<invalid sloc>> 'int' lvalue '='
        |   |     |-DeclRefExpr 0x9a66710 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   |     `-IntegerLiteral 0x9a666f8 <<invalid sloc>> 'int' 23
        |   |-BinaryOperator 0x9a667a0 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a66788 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a66770 <<invalid sloc>> 'int' 24
        |   `-BreakStmt 0x9a667b8 <<invalid sloc>>
        |-CaseStmt 0x9a66800 <<invalid sloc>>
        | |-IntegerLiteral 0x9a667e8 <<invalid sloc>> 'int' 26
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a66960 <<invalid sloc>>
        |   |-LabelStmt 0x9a64f60 <<invalid sloc>> '____label____7'
        |   | `-NullStmt 0x9a66820 <<invalid sloc>>
        |   |-IfStmt 0x9a66830 <<invalid sloc>>
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x9a62c08 <line:6:12, col:33> '_Bool' '!='
        |   | | |-ImplicitCastExpr 0x9a62bf8 <col:12> 'int' <LValueToRValue>
        |   | | | `-DeclRefExpr 0x9a62bc8 <col:12> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
        |   | | `-IntegerLiteral 0x9a62be0 <col:33> 'int' 0
        |   | |-CompoundStmt 0x9a668e0 <<invalid sloc>>
        |   | | `-BinaryOperator 0x9a66880 <<invalid sloc>> 'int' lvalue '='
        |   | |   |-DeclRefExpr 0x9a66868 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | |   `-IntegerLiteral 0x9a66850 <<invalid sloc>> 'int' 25
        |   | `-CompoundStmt 0x9a668f8 <<invalid sloc>>
        |   |   `-BinaryOperator 0x9a668c8 <<invalid sloc>> 'int' lvalue '='
        |   |     |-DeclRefExpr 0x9a668b0 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   |     `-IntegerLiteral 0x9a66898 <<invalid sloc>> 'int' 1
        |   |-BinaryOperator 0x9a66940 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a66928 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
        |   | `-IntegerLiteral 0x9a66910 <<invalid sloc>> 'int' 25
        |   `-BreakStmt 0x9a66958 <<invalid sloc>>
        `-CaseStmt 0x9a66998 <<invalid sloc>>
          |-IntegerLiteral 0x9a66980 <<invalid sloc>> 'int' 27
          |-<<<NULL>>>
          `-CompoundStmt 0x9a66a08 <<invalid sloc>>
            |-BinaryOperator 0x9a65098 <<invalid sloc>, line:5:29> 'int' lvalue '='
            | |-DeclRefExpr 0x9a6507c <<invalid sloc>> 'int' lvalue Var 0x9a62b70 '____localvar____8' 'int'
            | `-IntegerLiteral 0x9a62ba0 <col:29> 'int' 5
            |-BinaryOperator 0x9a669e8 <<invalid sloc>> 'int' lvalue '='
            | |-DeclRefExpr 0x9a669d0 <<invalid sloc>> 'int' lvalue Var 0x9a65130 '____localvar____10' 'int'
            | `-IntegerLiteral 0x9a669b8 <<invalid sloc>> 'int' 26
            `-BreakStmt 0x9a66a00 <<invalid sloc>>
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 23] TUDecl Function 9a633f0 | Ctx 968a6f4 -> p 968a6e0
[DEBUG][alg/FlattenCFG/FlattenCFGTransformer.cpp - line 48] enter FuncDecl
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 9] START VarRenamer
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a633f0 (Function)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: Function
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a640c0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634a8 (DeclStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a63460 (Var)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: Var
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 30]  ---- name = ____localvar____4 | type = int | desugared type = int | const = 0 | extern = 0 | POD = 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63490 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63490 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a63460 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634a8 (DeclStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a640a8 (WhileStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634f8 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634e8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634b8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634b8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634e8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634d0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634d0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634f8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63590 (SwitchStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a635b0 (DeclStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a63520 (Var)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 20] decl: Var
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 30]  ---- name = ____localvar____4 | type = int | desugared type = int | const = 0 | extern = 0 | POD = 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63550 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63550 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a63520 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a635b0 (DeclStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63580 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63568 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63568 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63580 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64090 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a635d8 (CaseStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a635c0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a635c0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64078 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64018 (CXXOperatorCallExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64008 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63fb8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63fb8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64008 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63bb8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63b68 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63b68 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63bb8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a6361c (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a6361c (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636d0 (CallExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636c0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636a8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636a8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636c0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636f8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63678 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63678 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636f8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63690 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63690 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636d0 (CallExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63fa8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63f80 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63f80 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63fa8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64018 (CXXOperatorCallExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64068 (ReturnStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64050 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64050 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64068 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64078 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a635d8 (CaseStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64090 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63590 (SwitchStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a640a8 (WhileStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a640c0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a633f0 (Function)
[DEBUG][alg/FlattenCFG/VarRenamer.cpp - line 11] END VarRenamer
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 6] START StmtPretransformer
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a633f0 (Function)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 9a633f0(Function) Ctx 968a6f4
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a640c0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a640c0 96a4700 96a4700
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634a8 (DeclStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclStmt 9a634a8 97423f0 97423f0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a63460 (Var)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 9a63460(Var) Ctx 9a63414
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63490 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a63490 9743f90 9743f90
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63490 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a63490 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a63460 (Var)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634a8 (DeclStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclStmt, start transform
DeclStmt 0x9a634a8
`-VarDecl 0x9a63460 ____localvar____11 'int'
  `-IntegerLiteral 0x9a63490 'int' 1
int ____localvar____11 = 1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a640a8 (WhileStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt WhileStmt 9a640a8 96a0c78 96a0c78
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634f8 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt BinaryOperator 9a634f8 96bcc88 96bcc88
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634e8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a634e8 97b5e10 97b5e10
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634b8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a634b8 966c618 966c618
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634b8 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
____localvar____11[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634e8 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
`-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
____localvar____11[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634d0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a634d0 96e3df8 96e3df8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634d0 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a634d0 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634f8 (BinaryOperator)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt BinaryOperator, start transform
BinaryOperator 0x9a634f8 '_Bool' '!='
|-ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
`-IntegerLiteral 0x9a634d0 'int' 0
____localvar____11 != 0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63590 (SwitchStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt SwitchStmt 9a63590 966c8d8 966c8d8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a635b0 (DeclStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclStmt 9a635b0 98a3348 98a3348
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a63520 (Var)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 37] visitDecl 9a63520(Var) Ctx 9a63414
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63550 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a63550 988c0a0 988c0a0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63550 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a63550 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a63520 (Var)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a635b0 (DeclStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclStmt, start transform
DeclStmt 0x9a635b0
`-VarDecl 0x9a63520 ____localvar____12 'int'
  `-IntegerLiteral 0x9a63550 'int' 1
int ____localvar____12 = 1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63580 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a63580 9843498 9843498
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63568 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a63568 99d4078 99d4078
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63568 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a63568 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
____localvar____12[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63580 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a63580 'int' <LValueToRValue>
`-DeclRefExpr 0x9a63568 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
____localvar____12[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64090 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a64090 987f150 987f150
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a635d8 (CaseStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CaseStmt 9a635d8 96e5360 96e5360
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a635c0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a635c0 9886b60 9886b60
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a635c0 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a635c0 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64078 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CompoundStmt 9a64078 9896e10 9896e10
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64018 (CXXOperatorCallExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CXXOperatorCallExpr 9a64018 9725c78 9725c78
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64008 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a64008 98a2b38 98a2b38
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63fb8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a63fb8 96ef668 96ef668
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63fb8 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
operator<<[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64008 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
`-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
operator<<[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CXXOperatorCallExpr 9a63bc8 96d07a8 96d07a8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63bb8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a63bb8 9886c48 9886c48
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63b68 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a63b68 9891600 9891600
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63b68 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
operator<<[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63bb8 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
`-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
operator<<[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a6361c (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a6361c 9896278 9896278
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a6361c (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
std::cout[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636d0 (CallExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt CallExpr 9a636d0 989f090 989f090
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636c0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a636c0 9899718 9899718
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636a8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a636a8 988b238 988b238
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636a8 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
fast_pow[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636c0 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
fast_pow[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636f8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a636f8 96ef610 96ef610
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63678 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a63678 9895358 9895358
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63678 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a63678 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636f8 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
`-IntegerLiteral 0x9a63678 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63690 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a63690 96a0c50 96a0c50
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63690 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a63690 'int' 17
17[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636d0 (CallExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CallExpr, start transform
CallExpr 0x9a636d0 'double'
|-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
| `-IntegerLiteral 0x9a63678 'int' 2
`-IntegerLiteral 0x9a63690 'int' 17
fast_pow(2, 17)[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63fa8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ImplicitCastExpr 9a63fa8 9750618 9750618
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63f80 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt DeclRefExpr 9a63f80 98947a8 98947a8
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63f80 (DeclRefExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt DeclRefExpr, start transform
DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
std::endl[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63fa8 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ImplicitCastExpr, start transform
ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
`-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
std::endl[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64018 (CXXOperatorCallExpr)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CXXOperatorCallExpr, start transform
CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
|-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
| `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
|-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
| |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
| |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
| `-CallExpr 0x9a636d0 'double'
|   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
|   | `-IntegerLiteral 0x9a63678 'int' 2
|   `-IntegerLiteral 0x9a63690 'int' 17
`-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
std::cout << fast_pow(2, 17) << std::endl[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64068 (ReturnStmt) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt ReturnStmt 9a64068 99d38c0 99d38c0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64050 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 62] push stmt IntegerLiteral 9a64050 9896248 9896248
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64050 (IntegerLiteral)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt IntegerLiteral, start transform
IntegerLiteral 0x9a64050 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64068 (ReturnStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt ReturnStmt, start transform
ReturnStmt 0x9a64068
`-IntegerLiteral 0x9a64050 'int' 0
return 0;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64078 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a64078
|-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
| |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
| |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
| | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
| | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
| | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
| | `-CallExpr 0x9a636d0 'double'
| |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
| |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
| |   | `-IntegerLiteral 0x9a63678 'int' 2
| |   `-IntegerLiteral 0x9a63690 'int' 17
| `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
|   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
`-ReturnStmt 0x9a64068
  `-IntegerLiteral 0x9a64050 'int' 0
{
    std::cout << fast_pow(2, 17) << std::endl;
    return 0;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a635d8 (CaseStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CaseStmt, start transform
CaseStmt 0x9a635d8
|-IntegerLiteral 0x9a635c0 'int' 1
|-<<<NULL>>>
`-CompoundStmt 0x9a64078
  |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
  | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
  | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
  | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
  | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
  | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
  | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
  | | `-CallExpr 0x9a636d0 'double'
  | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
  | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
  | |   | `-IntegerLiteral 0x9a63678 'int' 2
  | |   `-IntegerLiteral 0x9a63690 'int' 17
  | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
  |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
  `-ReturnStmt 0x9a64068
    `-IntegerLiteral 0x9a64050 'int' 0
case 1:
{
    std::cout << fast_pow(2, 17) << std::endl;
    return 0;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64090 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a64090
`-CaseStmt 0x9a635d8
  |-IntegerLiteral 0x9a635c0 'int' 1
  |-<<<NULL>>>
  `-CompoundStmt 0x9a64078
    |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
    | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
    | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
    | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
    | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
    | | `-CallExpr 0x9a636d0 'double'
    | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
    | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
    | |   | `-IntegerLiteral 0x9a63678 'int' 2
    | |   `-IntegerLiteral 0x9a63690 'int' 17
    | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
    `-ReturnStmt 0x9a64068
      `-IntegerLiteral 0x9a64050 'int' 0
{
  case 1:
    {
        std::cout << fast_pow(2, 17) << std::endl;
        return 0;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63590 (SwitchStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt SwitchStmt, start transform
SwitchStmt 0x9a63590
|-DeclStmt 0x9a635b0
| `-VarDecl 0x9a63520 ____localvar____12 'int'
|   `-IntegerLiteral 0x9a63550 'int' 1
|-ImplicitCastExpr 0x9a63580 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a63568 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
`-CompoundStmt 0x9a64090
  `-CaseStmt 0x9a635d8
    |-IntegerLiteral 0x9a635c0 'int' 1
    |-<<<NULL>>>
    `-CompoundStmt 0x9a64078
      |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
      | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
      | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
      | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
      | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
      | | `-CallExpr 0x9a636d0 'double'
      | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
      | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
      | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
      | |   | `-IntegerLiteral 0x9a63678 'int' 2
      | |   `-IntegerLiteral 0x9a63690 'int' 17
      | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
      |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
      `-ReturnStmt 0x9a64068
        `-IntegerLiteral 0x9a64050 'int' 0
switch (int ____localvar____12 = 1) {
  case 1:
    {
        std::cout << fast_pow(2, 17) << std::endl;
        return 0;
    }
}
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 322] switch to if trans
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 327] LABEL_SWITCH
[DEBUG][alg/Algorithm.cpp - line 36] info 159798664: ____label____10 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 344] get switch sub ptr
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 349] create if 
[DEBUG][alg/Algorithm.cpp - line 36] info 159798700: ____label____11 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 359] iterator case/default
[DEBUG][alg/Algorithm.cpp - line 36] info 159798736: ____label____12 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 372] record case: (96e5360) 9a635d8 bfd6dc54 9a66b90
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 375] case stmt reached 9a635d8
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 387] set else if
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 399] case stmt end
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 409] add last else goto
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 420] transform break
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a64050 bfd6dac4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ReturnStmt (bfd6df4c) 9a64068 bfd6db64 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a63f80 bfd6d7d4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a63fa8 bfd6d904 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a63690 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a63678 bfd6d7c4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a636f8 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a636a8 bfd6d734 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a636c0 bfd6d864 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CallExpr (bfd6df4c) 9a636d0 bfd6d904 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a6361c bfd6d874 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a63b68 bfd6d7d4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a63bb8 bfd6d904 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CXXOperatorCallExpr (bfd6df4c) 9a63bc8 bfd6d954 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a63fb8 bfd6d7d4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a64008 bfd6d904 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CXXOperatorCallExpr (bfd6df4c) 9a64018 bfd6d954 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a64078 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a635c0 bfd6dc04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CaseStmt (bfd6df4c) 9a635d8 bfd6dc54 9a66b90
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 444] SwitchCase reached 9a635d8
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 451] switchCase ended
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt CompoundStmt (bfd6df4c) 9a64090 bfd6df04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclRefExpr (bfd6df4c) 9a63568 bfd6ddd4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt ImplicitCastExpr (bfd6df4c) 9a63580 bfd6df04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt IntegerLiteral (bfd6df4c) 9a63550 bfd6dda4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 434] pop stmt DeclStmt (bfd6df4c) 9a635b0 bfd6df04 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 459] set new switch body
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 479] done
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 482] free memory
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a640a8 (WhileStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt WhileStmt, start transform
WhileStmt 0x9a640a8
|-<<<NULL>>>
|-BinaryOperator 0x9a634f8 '_Bool' '!='
| |-ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
| `-IntegerLiteral 0x9a634d0 'int' 0
`-LabelStmt 0x9a66af0 '____label____10'
  `-CompoundStmt 0x9a66c00
    |-DeclStmt 0x9a635b0
    | `-VarDecl 0x9a63520 ____localvar____12 'int'
    |   `-IntegerLiteral 0x9a63550 'int' 1
    |-IfStmt 0x9a66b00
    | |-<<<NULL>>>
    | |-BinaryOperator 0x9a66bc8 '_Bool' '=='
    | | |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
    | | `-IntegerLiteral 0x9a635c0 'int' 1
    | |-GotoStmt 0x9a66be0 '____label____12' 0x9a66b60
    | `-GotoStmt 0x9a66bf0 '____label____11' 0x9a66b20
    |-CompoundStmt 0x9a64090
    | `-LabelStmt 0x9a66b90 '____label____12'
    |   `-CompoundStmt 0x9a64078
    |     |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
    |     | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
    |     | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
    |     | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
    |     | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
    |     | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
    |     | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
    |     | | `-CallExpr 0x9a636d0 'double'
    |     | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
    |     | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
    |     | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
    |     | |   | `-IntegerLiteral 0x9a63678 'int' 2
    |     | |   `-IntegerLiteral 0x9a63690 'int' 17
    |     | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
    |     |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
    |     `-ReturnStmt 0x9a64068
    |       `-IntegerLiteral 0x9a64050 'int' 0
    `-LabelStmt 0x9a66b50 '____label____11'
      `-NullStmt 0x9a66b40
while (____localvar____11 != 0)
  ____label____10:
    {
        int ____localvar____12 = 1;
        if (____localvar____12 == 1)
            goto ____label____12;
        else
            goto ____label____11;
        {
          ____label____12:
            {
                std::cout << fast_pow(2, 17) << std::endl;
                return 0;
            }
        }
      ____label____11:
        ;
    }
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 146] while to if trans
[DEBUG][alg/Algorithm.cpp - line 36] info 159798772: ____label____13 0
[DEBUG][alg/Algorithm.cpp - line 36] info 159798808: ____label____14 0
[DEBUG][alg/Algorithm.cpp - line 36] info 159798844: ____label____15 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt SwitchStmt (bfd6df7c) 9a63590 bfd6dfa4 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt IntegerLiteral (bfd6df7c) 9a634d0 bfd6dd44 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt DeclRefExpr (bfd6df7c) 9a634b8 bfd6dc14 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt ImplicitCastExpr (bfd6df7c) 9a634e8 bfd6dd44 0
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 501] pop stmt BinaryOperator (bfd6df7c) 9a634f8 bfd6dd94 0
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a640c0 (CompoundStmt)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 70] leaving Stmt CompoundStmt, start transform
CompoundStmt 0x9a640c0
|-DeclStmt 0x9a634a8
| `-VarDecl 0x9a63460 ____localvar____11 'int'
|   `-IntegerLiteral 0x9a63490 'int' 1
`-LabelStmt 0x9a66c50 '____label____13'
  `-CompoundStmt 0x9a66d28
    |-IfStmt 0x9a66d08
    | |-<<<NULL>>>
    | |-BinaryOperator 0x9a634f8 '_Bool' '!='
    | | |-ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
    | | `-IntegerLiteral 0x9a634d0 'int' 0
    | |-CompoundStmt 0x9a66cf0
    | | |-LabelStmt 0x9a66af0 '____label____10'
    | | | `-CompoundStmt 0x9a66c00
    | | |   |-DeclStmt 0x9a635b0
    | | |   | `-VarDecl 0x9a63520 ____localvar____12 'int'
    | | |   |   `-IntegerLiteral 0x9a63550 'int' 1
    | | |   |-IfStmt 0x9a66b00
    | | |   | |-<<<NULL>>>
    | | |   | |-BinaryOperator 0x9a66bc8 '_Bool' '=='
    | | |   | | |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
    | | |   | | | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
    | | |   | | `-IntegerLiteral 0x9a635c0 'int' 1
    | | |   | |-GotoStmt 0x9a66be0 '____label____12' 0x9a66b60
    | | |   | `-GotoStmt 0x9a66bf0 '____label____11' 0x9a66b20
    | | |   |-CompoundStmt 0x9a64090
    | | |   | `-LabelStmt 0x9a66b90 '____label____12'
    | | |   |   `-CompoundStmt 0x9a64078
    | | |   |     |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
    | | |   |     | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
    | | |   |     | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
    | | |   |     | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
    | | |   |     | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
    | | |   |     | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
    | | |   |     | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
    | | |   |     | | `-CallExpr 0x9a636d0 'double'
    | | |   |     | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
    | | |   |     | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
    | | |   |     | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
    | | |   |     | |   | `-IntegerLiteral 0x9a63678 'int' 2
    | | |   |     | |   `-IntegerLiteral 0x9a63690 'int' 17
    | | |   |     | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
    | | |   |     |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
    | | |   |     `-ReturnStmt 0x9a64068
    | | |   |       `-IntegerLiteral 0x9a64050 'int' 0
    | | |   `-LabelStmt 0x9a66b50 '____label____11'
    | | |     `-NullStmt 0x9a66b40
    | | `-LabelStmt 0x9a66c90 '____label____14'
    | |   `-GotoStmt 0x9a66ce0 '____label____13' 0x9a66c20
    | `-<<<NULL>>>
    `-LabelStmt 0x9a66cd0 '____label____15'
      `-NullStmt 0x9a66cc0
{
    int ____localvar____11 = 1;
  ____label____13:
    {
        if (____localvar____11 != 0) {
          ____label____10:
            {
                int ____localvar____12 = 1;
                if (____localvar____12 == 1)
                    goto ____label____12;
                else
                    goto ____label____11;
                {
                  ____label____12:
                    {
                        std::cout << fast_pow(2, 17) << std::endl;
                        return 0;
                    }
                }
              ____label____11:
                ;
            }
          ____label____14:
            goto ____label____13;
        }
      ____label____15:
        ;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a633f0 (Function)
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 45] exitDecl
[DEBUG][alg/FlattenCFG/StmtPretransformer.cpp - line 30] END StmtPretransformer
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 5] START LocalDeclMover
FunctionDecl 0x9a633f0 <_gcd_ob.cpp:43:1, line:53:1> main 'int (void)'
`-CompoundStmt 0x9a640c0 <line:43:12, line:53:1>
  |-DeclStmt 0x9a634a8 <line:44:5, col:30>
  | `-VarDecl 0x9a63460 <col:5, col:29> ____localvar____11 'int'
  |   `-IntegerLiteral 0x9a63490 <col:29> 'int' 1
  `-LabelStmt 0x9a66c50 <<invalid sloc>> '____label____13'
    `-CompoundStmt 0x9a66d28 <<invalid sloc>>
      |-IfStmt 0x9a66d08 <<invalid sloc>>
      | |-<<<NULL>>>
      | |-BinaryOperator 0x9a634f8 <line:45:12, col:33> '_Bool' '!='
      | | |-ImplicitCastExpr 0x9a634e8 <col:12> 'int' <LValueToRValue>
      | | | `-DeclRefExpr 0x9a634b8 <col:12> 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
      | | `-IntegerLiteral 0x9a634d0 <col:33> 'int' 0
      | |-CompoundStmt 0x9a66cf0 <<invalid sloc>>
      | | |-LabelStmt 0x9a66af0 <<invalid sloc>> '____label____10'
      | | | `-CompoundStmt 0x9a66c00 <<invalid sloc>>
      | | |   |-DeclStmt 0x9a635b0 <line:46:17, col:41>
      | | |   | `-VarDecl 0x9a63520 <col:17, col:41> ____localvar____12 'int'
      | | |   |   `-IntegerLiteral 0x9a63550 <col:41> 'int' 1
      | | |   |-IfStmt 0x9a66b00 <<invalid sloc>>
      | | |   | |-<<<NULL>>>
      | | |   | |-BinaryOperator 0x9a66bc8 <<invalid sloc>, line:47:16> '_Bool' '=='
      | | |   | | |-ImplicitCastExpr 0x9a66bb8 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   | | | `-DeclRefExpr 0x9a66ba0 <<invalid sloc>> 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
      | | |   | | `-IntegerLiteral 0x9a635c0 <col:16> 'int' 1
      | | |   | |-GotoStmt 0x9a66be0 <<invalid sloc>> '____label____12' 0x9a66b60
      | | |   | `-GotoStmt 0x9a66bf0 <<invalid sloc>> '____label____11' 0x9a66b20
      | | |   |-CompoundStmt 0x9a64090 <line:46:44, line:52:9>
      | | |   | `-LabelStmt 0x9a66b90 <<invalid sloc>, line:51:13> '____label____12'
      | | |   |   `-CompoundStmt 0x9a64078 <line:48:13, line:51:13>
      | | |   |     |-CXXOperatorCallExpr 0x9a64018 <line:49:17, col:54> '__ostream_type':'class std::basic_ostream<char>' lvalue
      | | |   |     | |-ImplicitCastExpr 0x9a64008 <col:46> '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
      | | |   |     | | `-DeclRefExpr 0x9a63fb8 <col:46> '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
      | | |   |     | |-CXXOperatorCallExpr 0x9a63bc8 <col:17, col:44> '__ostream_type':'class std::basic_ostream<char>' lvalue
      | | |   |     | | |-ImplicitCastExpr 0x9a63bb8 <col:27> '__ostream_type &(*)(double)' <FunctionToPointerDecay>
      | | |   |     | | | `-DeclRefExpr 0x9a63b68 <col:27> '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
      | | |   |     | | |-DeclRefExpr 0x9a6361c <col:17, col:22> 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
      | | |   |     | | `-CallExpr 0x9a636d0 <col:30, col:44> 'double'
      | | |   |     | |   |-ImplicitCastExpr 0x9a636c0 <col:30> 'double (*)(double, int)' <FunctionToPointerDecay>
      | | |   |     | |   | `-DeclRefExpr 0x9a636a8 <col:30> 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
      | | |   |     | |   |-ImplicitCastExpr 0x9a636f8 <col:39> 'double' <IntegralToFloating>
      | | |   |     | |   | `-IntegerLiteral 0x9a63678 <col:39> 'int' 2
      | | |   |     | |   `-IntegerLiteral 0x9a63690 <col:42> 'int' 17
      | | |   |     | `-ImplicitCastExpr 0x9a63fa8 <col:49, col:54> 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
      | | |   |     |   `-DeclRefExpr 0x9a63f80 <col:49, col:54> 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
      | | |   |     `-ReturnStmt 0x9a64068 <line:50:17, col:24>
      | | |   |       `-IntegerLiteral 0x9a64050 <col:24> 'int' 0
      | | |   `-LabelStmt 0x9a66b50 <<invalid sloc>> '____label____11'
      | | |     `-NullStmt 0x9a66b40 <<invalid sloc>>
      | | `-LabelStmt 0x9a66c90 <<invalid sloc>> '____label____14'
      | |   `-GotoStmt 0x9a66ce0 <<invalid sloc>> '____label____13' 0x9a66c20
      | `-<<<NULL>>>
      `-LabelStmt 0x9a66cd0 <<invalid sloc>> '____label____15'
        `-NullStmt 0x9a66cc0 <<invalid sloc>>
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a633f0 (Function)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a640c0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a640c0 -> p 0 )
CompoundStmt 0x9a640c0
|-DeclStmt 0x9a634a8
| `-VarDecl 0x9a63460 ____localvar____11 'int'
|   `-IntegerLiteral 0x9a63490 'int' 1
`-LabelStmt 0x9a66c50 '____label____13'
  `-CompoundStmt 0x9a66d28
    |-IfStmt 0x9a66d08
    | |-<<<NULL>>>
    | |-BinaryOperator 0x9a634f8 '_Bool' '!='
    | | |-ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
    | | `-IntegerLiteral 0x9a634d0 'int' 0
    | |-CompoundStmt 0x9a66cf0
    | | |-LabelStmt 0x9a66af0 '____label____10'
    | | | `-CompoundStmt 0x9a66c00
    | | |   |-DeclStmt 0x9a635b0
    | | |   | `-VarDecl 0x9a63520 ____localvar____12 'int'
    | | |   |   `-IntegerLiteral 0x9a63550 'int' 1
    | | |   |-IfStmt 0x9a66b00
    | | |   | |-<<<NULL>>>
    | | |   | |-BinaryOperator 0x9a66bc8 '_Bool' '=='
    | | |   | | |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
    | | |   | | | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
    | | |   | | `-IntegerLiteral 0x9a635c0 'int' 1
    | | |   | |-GotoStmt 0x9a66be0 '____label____12' 0x9a66b60
    | | |   | `-GotoStmt 0x9a66bf0 '____label____11' 0x9a66b20
    | | |   |-CompoundStmt 0x9a64090
    | | |   | `-LabelStmt 0x9a66b90 '____label____12'
    | | |   |   `-CompoundStmt 0x9a64078
    | | |   |     |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
    | | |   |     | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
    | | |   |     | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
    | | |   |     | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
    | | |   |     | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
    | | |   |     | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
    | | |   |     | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
    | | |   |     | | `-CallExpr 0x9a636d0 'double'
    | | |   |     | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
    | | |   |     | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
    | | |   |     | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
    | | |   |     | |   | `-IntegerLiteral 0x9a63678 'int' 2
    | | |   |     | |   `-IntegerLiteral 0x9a63690 'int' 17
    | | |   |     | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
    | | |   |     |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
    | | |   |     `-ReturnStmt 0x9a64068
    | | |   |       `-IntegerLiteral 0x9a64050 'int' 0
    | | |   `-LabelStmt 0x9a66b50 '____label____11'
    | | |     `-NullStmt 0x9a66b40
    | | `-LabelStmt 0x9a66c90 '____label____14'
    | |   `-GotoStmt 0x9a66ce0 '____label____13' 0x9a66c20
    | `-<<<NULL>>>
    `-LabelStmt 0x9a66cd0 '____label____15'
      `-NullStmt 0x9a66cc0
{
    int ____localvar____11 = 1;
  ____label____13:
    {
        if (____localvar____11 != 0) {
          ____label____10:
            {
                int ____localvar____12 = 1;
                if (____localvar____12 == 1)
                    goto ____label____12;
                else
                    goto ____label____11;
                {
                  ____label____12:
                    {
                        std::cout << fast_pow(2, 17) << std::endl;
                        return 0;
                    }
                }
              ____label____11:
                ;
            }
          ____label____14:
            goto ____label____13;
        }
      ____label____15:
        ;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634a8 (DeclStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclStmt ( 9a634a8 -> p 9a640c0 )
DeclStmt 0x9a634a8
`-VarDecl 0x9a63460 ____localvar____11 'int'
  `-IntegerLiteral 0x9a63490 'int' 1
int ____localvar____11 = 1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a63460 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63490 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a63490 -> p 9a634a8 )
IntegerLiteral 0x9a63490 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63490 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a63460 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634a8 (DeclStmt)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 177] WorkOnDeclStmt
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 229] Handle VarDecl ____localvar____11 9a63460 | Ctx 9a63414(Function) -> p 968a6f4
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 254] QualType 
int identifier
IntegerLiteral 0x9a63490 'int' 1
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 306] Expr type: lhs 968a760, rhs 968a760
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 309] retAssign
BinaryOperator 0x9a66d68 'int' lvalue '='
|-DeclRefExpr 0x9a66d4c 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
`-IntegerLiteral 0x9a63490 'int' 1
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66c50 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a66c50 -> p 9a640c0 )
LabelStmt 0x9a66c50 '____label____13'
`-CompoundStmt 0x9a66d28
  |-IfStmt 0x9a66d08
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a634f8 '_Bool' '!='
  | | |-ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
  | | `-IntegerLiteral 0x9a634d0 'int' 0
  | |-CompoundStmt 0x9a66cf0
  | | |-LabelStmt 0x9a66af0 '____label____10'
  | | | `-CompoundStmt 0x9a66c00
  | | |   |-DeclStmt 0x9a635b0
  | | |   | `-VarDecl 0x9a63520 ____localvar____12 'int'
  | | |   |   `-IntegerLiteral 0x9a63550 'int' 1
  | | |   |-IfStmt 0x9a66b00
  | | |   | |-<<<NULL>>>
  | | |   | |-BinaryOperator 0x9a66bc8 '_Bool' '=='
  | | |   | | |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
  | | |   | | | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
  | | |   | | `-IntegerLiteral 0x9a635c0 'int' 1
  | | |   | |-GotoStmt 0x9a66be0 '____label____12' 0x9a66b60
  | | |   | `-GotoStmt 0x9a66bf0 '____label____11' 0x9a66b20
  | | |   |-CompoundStmt 0x9a64090
  | | |   | `-LabelStmt 0x9a66b90 '____label____12'
  | | |   |   `-CompoundStmt 0x9a64078
  | | |   |     |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
  | | |   |     | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
  | | |   |     | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
  | | |   |     | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
  | | |   |     | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
  | | |   |     | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
  | | |   |     | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
  | | |   |     | | `-CallExpr 0x9a636d0 'double'
  | | |   |     | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
  | | |   |     | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  | | |   |     | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
  | | |   |     | |   | `-IntegerLiteral 0x9a63678 'int' 2
  | | |   |     | |   `-IntegerLiteral 0x9a63690 'int' 17
  | | |   |     | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
  | | |   |     |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
  | | |   |     `-ReturnStmt 0x9a64068
  | | |   |       `-IntegerLiteral 0x9a64050 'int' 0
  | | |   `-LabelStmt 0x9a66b50 '____label____11'
  | | |     `-NullStmt 0x9a66b40
  | | `-LabelStmt 0x9a66c90 '____label____14'
  | |   `-GotoStmt 0x9a66ce0 '____label____13' 0x9a66c20
  | `-<<<NULL>>>
  `-LabelStmt 0x9a66cd0 '____label____15'
    `-NullStmt 0x9a66cc0
____label____13:
{
    if (____localvar____11 != 0) {
      ____label____10:
        {
            int ____localvar____12 = 1;
            if (____localvar____12 == 1)
                goto ____label____12;
            else
                goto ____label____11;
            {
              ____label____12:
                {
                    std::cout << fast_pow(2, 17) << std::endl;
                    return 0;
                }
            }
          ____label____11:
            ;
        }
      ____label____14:
        goto ____label____13;
    }
  ____label____15:
    ;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66d28 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a66d28 -> p 9a66c50 )
CompoundStmt 0x9a66d28
|-IfStmt 0x9a66d08
| |-<<<NULL>>>
| |-BinaryOperator 0x9a634f8 '_Bool' '!='
| | |-ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
| | `-IntegerLiteral 0x9a634d0 'int' 0
| |-CompoundStmt 0x9a66cf0
| | |-LabelStmt 0x9a66af0 '____label____10'
| | | `-CompoundStmt 0x9a66c00
| | |   |-DeclStmt 0x9a635b0
| | |   | `-VarDecl 0x9a63520 ____localvar____12 'int'
| | |   |   `-IntegerLiteral 0x9a63550 'int' 1
| | |   |-IfStmt 0x9a66b00
| | |   | |-<<<NULL>>>
| | |   | |-BinaryOperator 0x9a66bc8 '_Bool' '=='
| | |   | | |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
| | |   | | | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
| | |   | | `-IntegerLiteral 0x9a635c0 'int' 1
| | |   | |-GotoStmt 0x9a66be0 '____label____12' 0x9a66b60
| | |   | `-GotoStmt 0x9a66bf0 '____label____11' 0x9a66b20
| | |   |-CompoundStmt 0x9a64090
| | |   | `-LabelStmt 0x9a66b90 '____label____12'
| | |   |   `-CompoundStmt 0x9a64078
| | |   |     |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
| | |   |     | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
| | |   |     | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
| | |   |     | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
| | |   |     | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
| | |   |     | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
| | |   |     | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
| | |   |     | | `-CallExpr 0x9a636d0 'double'
| | |   |     | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
| | |   |     | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
| | |   |     | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
| | |   |     | |   | `-IntegerLiteral 0x9a63678 'int' 2
| | |   |     | |   `-IntegerLiteral 0x9a63690 'int' 17
| | |   |     | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
| | |   |     |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
| | |   |     `-ReturnStmt 0x9a64068
| | |   |       `-IntegerLiteral 0x9a64050 'int' 0
| | |   `-LabelStmt 0x9a66b50 '____label____11'
| | |     `-NullStmt 0x9a66b40
| | `-LabelStmt 0x9a66c90 '____label____14'
| |   `-GotoStmt 0x9a66ce0 '____label____13' 0x9a66c20
| `-<<<NULL>>>
`-LabelStmt 0x9a66cd0 '____label____15'
  `-NullStmt 0x9a66cc0
{
    if (____localvar____11 != 0) {
      ____label____10:
        {
            int ____localvar____12 = 1;
            if (____localvar____12 == 1)
                goto ____label____12;
            else
                goto ____label____11;
            {
              ____label____12:
                {
                    std::cout << fast_pow(2, 17) << std::endl;
                    return 0;
                }
            }
          ____label____11:
            ;
        }
      ____label____14:
        goto ____label____13;
    }
  ____label____15:
    ;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66d08 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 9a66d08 -> p 9a66d28 )
IfStmt 0x9a66d08
|-<<<NULL>>>
|-BinaryOperator 0x9a634f8 '_Bool' '!='
| |-ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
| `-IntegerLiteral 0x9a634d0 'int' 0
|-CompoundStmt 0x9a66cf0
| |-LabelStmt 0x9a66af0 '____label____10'
| | `-CompoundStmt 0x9a66c00
| |   |-DeclStmt 0x9a635b0
| |   | `-VarDecl 0x9a63520 ____localvar____12 'int'
| |   |   `-IntegerLiteral 0x9a63550 'int' 1
| |   |-IfStmt 0x9a66b00
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator 0x9a66bc8 '_Bool' '=='
| |   | | |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
| |   | | `-IntegerLiteral 0x9a635c0 'int' 1
| |   | |-GotoStmt 0x9a66be0 '____label____12' 0x9a66b60
| |   | `-GotoStmt 0x9a66bf0 '____label____11' 0x9a66b20
| |   |-CompoundStmt 0x9a64090
| |   | `-LabelStmt 0x9a66b90 '____label____12'
| |   |   `-CompoundStmt 0x9a64078
| |   |     |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
| |   |     | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
| |   |     | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
| |   |     | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
| |   |     | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
| |   |     | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
| |   |     | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
| |   |     | | `-CallExpr 0x9a636d0 'double'
| |   |     | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
| |   |     | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
| |   |     | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
| |   |     | |   | `-IntegerLiteral 0x9a63678 'int' 2
| |   |     | |   `-IntegerLiteral 0x9a63690 'int' 17
| |   |     | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
| |   |     |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
| |   |     `-ReturnStmt 0x9a64068
| |   |       `-IntegerLiteral 0x9a64050 'int' 0
| |   `-LabelStmt 0x9a66b50 '____label____11'
| |     `-NullStmt 0x9a66b40
| `-LabelStmt 0x9a66c90 '____label____14'
|   `-GotoStmt 0x9a66ce0 '____label____13' 0x9a66c20
`-<<<NULL>>>
if (____localvar____11 != 0) {
  ____label____10:
    {
        int ____localvar____12 = 1;
        if (____localvar____12 == 1)
            goto ____label____12;
        else
            goto ____label____11;
        {
          ____label____12:
            {
                std::cout << fast_pow(2, 17) << std::endl;
                return 0;
            }
        }
      ____label____11:
        ;
    }
  ____label____14:
    goto ____label____13;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634f8 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a634f8 -> p 9a66d08 )
BinaryOperator 0x9a634f8 '_Bool' '!='
|-ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
`-IntegerLiteral 0x9a634d0 'int' 0
____localvar____11 != 0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634e8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a634e8 -> p 9a634f8 )
ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
`-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
____localvar____11[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634b8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a634b8 -> p 9a634e8 )
DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
____localvar____11[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634b8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634e8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634d0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a634d0 -> p 9a634f8 )
IntegerLiteral 0x9a634d0 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634d0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634f8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66cf0 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a66cf0 -> p 9a66d08 )
CompoundStmt 0x9a66cf0
|-LabelStmt 0x9a66af0 '____label____10'
| `-CompoundStmt 0x9a66c00
|   |-DeclStmt 0x9a635b0
|   | `-VarDecl 0x9a63520 ____localvar____12 'int'
|   |   `-IntegerLiteral 0x9a63550 'int' 1
|   |-IfStmt 0x9a66b00
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x9a66bc8 '_Bool' '=='
|   | | |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
|   | | `-IntegerLiteral 0x9a635c0 'int' 1
|   | |-GotoStmt 0x9a66be0 '____label____12' 0x9a66b60
|   | `-GotoStmt 0x9a66bf0 '____label____11' 0x9a66b20
|   |-CompoundStmt 0x9a64090
|   | `-LabelStmt 0x9a66b90 '____label____12'
|   |   `-CompoundStmt 0x9a64078
|   |     |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
|   |     | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
|   |     | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
|   |     | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
|   |     | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
|   |     | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
|   |     | | `-CallExpr 0x9a636d0 'double'
|   |     | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
|   |     | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|   |     | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
|   |     | |   | `-IntegerLiteral 0x9a63678 'int' 2
|   |     | |   `-IntegerLiteral 0x9a63690 'int' 17
|   |     | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
|   |     |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
|   |     `-ReturnStmt 0x9a64068
|   |       `-IntegerLiteral 0x9a64050 'int' 0
|   `-LabelStmt 0x9a66b50 '____label____11'
|     `-NullStmt 0x9a66b40
`-LabelStmt 0x9a66c90 '____label____14'
  `-GotoStmt 0x9a66ce0 '____label____13' 0x9a66c20
{
  ____label____10:
    {
        int ____localvar____12 = 1;
        if (____localvar____12 == 1)
            goto ____label____12;
        else
            goto ____label____11;
        {
          ____label____12:
            {
                std::cout << fast_pow(2, 17) << std::endl;
                return 0;
            }
        }
      ____label____11:
        ;
    }
  ____label____14:
    goto ____label____13;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66af0 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a66af0 -> p 9a66cf0 )
LabelStmt 0x9a66af0 '____label____10'
`-CompoundStmt 0x9a66c00
  |-DeclStmt 0x9a635b0
  | `-VarDecl 0x9a63520 ____localvar____12 'int'
  |   `-IntegerLiteral 0x9a63550 'int' 1
  |-IfStmt 0x9a66b00
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a66bc8 '_Bool' '=='
  | | |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
  | | `-IntegerLiteral 0x9a635c0 'int' 1
  | |-GotoStmt 0x9a66be0 '____label____12' 0x9a66b60
  | `-GotoStmt 0x9a66bf0 '____label____11' 0x9a66b20
  |-CompoundStmt 0x9a64090
  | `-LabelStmt 0x9a66b90 '____label____12'
  |   `-CompoundStmt 0x9a64078
  |     |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
  |     | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
  |     | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
  |     | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
  |     | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
  |     | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
  |     | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
  |     | | `-CallExpr 0x9a636d0 'double'
  |     | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
  |     | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  |     | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
  |     | |   | `-IntegerLiteral 0x9a63678 'int' 2
  |     | |   `-IntegerLiteral 0x9a63690 'int' 17
  |     | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
  |     |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
  |     `-ReturnStmt 0x9a64068
  |       `-IntegerLiteral 0x9a64050 'int' 0
  `-LabelStmt 0x9a66b50 '____label____11'
    `-NullStmt 0x9a66b40
____label____10:
{
    int ____localvar____12 = 1;
    if (____localvar____12 == 1)
        goto ____label____12;
    else
        goto ____label____11;
    {
      ____label____12:
        {
            std::cout << fast_pow(2, 17) << std::endl;
            return 0;
        }
    }
  ____label____11:
    ;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66c00 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a66c00 -> p 9a66af0 )
CompoundStmt 0x9a66c00
|-DeclStmt 0x9a635b0
| `-VarDecl 0x9a63520 ____localvar____12 'int'
|   `-IntegerLiteral 0x9a63550 'int' 1
|-IfStmt 0x9a66b00
| |-<<<NULL>>>
| |-BinaryOperator 0x9a66bc8 '_Bool' '=='
| | |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
| | `-IntegerLiteral 0x9a635c0 'int' 1
| |-GotoStmt 0x9a66be0 '____label____12' 0x9a66b60
| `-GotoStmt 0x9a66bf0 '____label____11' 0x9a66b20
|-CompoundStmt 0x9a64090
| `-LabelStmt 0x9a66b90 '____label____12'
|   `-CompoundStmt 0x9a64078
|     |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
|     | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
|     | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
|     | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
|     | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
|     | | `-CallExpr 0x9a636d0 'double'
|     | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
|     | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|     | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
|     | |   | `-IntegerLiteral 0x9a63678 'int' 2
|     | |   `-IntegerLiteral 0x9a63690 'int' 17
|     | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
|     |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
|     `-ReturnStmt 0x9a64068
|       `-IntegerLiteral 0x9a64050 'int' 0
`-LabelStmt 0x9a66b50 '____label____11'
  `-NullStmt 0x9a66b40
{
    int ____localvar____12 = 1;
    if (____localvar____12 == 1)
        goto ____label____12;
    else
        goto ____label____11;
    {
      ____label____12:
        {
            std::cout << fast_pow(2, 17) << std::endl;
            return 0;
        }
    }
  ____label____11:
    ;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a635b0 (DeclStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclStmt ( 9a635b0 -> p 9a66c00 )
DeclStmt 0x9a635b0
`-VarDecl 0x9a63520 ____localvar____12 'int'
  `-IntegerLiteral 0x9a63550 'int' 1
int ____localvar____12 = 1;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a63520 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63550 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a63550 -> p 9a635b0 )
IntegerLiteral 0x9a63550 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63550 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a63520 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a635b0 (DeclStmt)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 177] WorkOnDeclStmt
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 229] Handle VarDecl ____localvar____12 9a63520 | Ctx 9a63414(Function) -> p 968a6f4
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 254] QualType 
int identifier
IntegerLiteral 0x9a63550 'int' 1
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 306] Expr type: lhs 968a760, rhs 968a760
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 309] retAssign
BinaryOperator 0x9a66da8 'int' lvalue '='
|-DeclRefExpr 0x9a66d90 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
`-IntegerLiteral 0x9a63550 'int' 1
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66b00 (IfStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IfStmt ( 9a66b00 -> p 9a66c00 )
IfStmt 0x9a66b00
|-<<<NULL>>>
|-BinaryOperator 0x9a66bc8 '_Bool' '=='
| |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
| `-IntegerLiteral 0x9a635c0 'int' 1
|-GotoStmt 0x9a66be0 '____label____12' 0x9a66b60
`-GotoStmt 0x9a66bf0 '____label____11' 0x9a66b20
if (____localvar____12 == 1)
    goto ____label____12;
else
    goto ____label____11;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66bc8 (BinaryOperator) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt BinaryOperator ( 9a66bc8 -> p 9a66b00 )
BinaryOperator 0x9a66bc8 '_Bool' '=='
|-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
| `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
`-IntegerLiteral 0x9a635c0 'int' 1
____localvar____12 == 1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66bb8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a66bb8 -> p 9a66bc8 )
ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
`-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
____localvar____12[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66ba0 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a66ba0 -> p 9a66bb8 )
DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
____localvar____12[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66ba0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66bb8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a635c0 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a635c0 -> p 9a66bc8 )
IntegerLiteral 0x9a635c0 'int' 1
1[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a635c0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66bc8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66be0 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a66be0 -> p 9a66b00 )
GotoStmt 0x9a66be0 '____label____12' 0x9a66b60
goto ____label____12;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66be0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66bf0 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a66bf0 -> p 9a66b00 )
GotoStmt 0x9a66bf0 '____label____11' 0x9a66b20
goto ____label____11;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66bf0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66b00 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64090 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a64090 -> p 9a66c00 )
CompoundStmt 0x9a64090
`-LabelStmt 0x9a66b90 '____label____12'
  `-CompoundStmt 0x9a64078
    |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
    | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
    | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
    | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
    | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
    | | `-CallExpr 0x9a636d0 'double'
    | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
    | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
    | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
    | |   | `-IntegerLiteral 0x9a63678 'int' 2
    | |   `-IntegerLiteral 0x9a63690 'int' 17
    | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
    |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
    `-ReturnStmt 0x9a64068
      `-IntegerLiteral 0x9a64050 'int' 0
{
  ____label____12:
    {
        std::cout << fast_pow(2, 17) << std::endl;
        return 0;
    }
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66b90 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a66b90 -> p 9a64090 )
LabelStmt 0x9a66b90 '____label____12'
`-CompoundStmt 0x9a64078
  |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
  | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
  | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
  | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
  | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
  | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
  | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
  | | `-CallExpr 0x9a636d0 'double'
  | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
  | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
  | |   | `-IntegerLiteral 0x9a63678 'int' 2
  | |   `-IntegerLiteral 0x9a63690 'int' 17
  | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
  |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
  `-ReturnStmt 0x9a64068
    `-IntegerLiteral 0x9a64050 'int' 0
____label____12:
{
    std::cout << fast_pow(2, 17) << std::endl;
    return 0;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64078 (CompoundStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CompoundStmt ( 9a64078 -> p 9a66b90 )
CompoundStmt 0x9a64078
|-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
| |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
| |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
| | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
| | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
| | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
| | `-CallExpr 0x9a636d0 'double'
| |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
| |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
| |   | `-IntegerLiteral 0x9a63678 'int' 2
| |   `-IntegerLiteral 0x9a63690 'int' 17
| `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
|   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
`-ReturnStmt 0x9a64068
  `-IntegerLiteral 0x9a64050 'int' 0
{
    std::cout << fast_pow(2, 17) << std::endl;
    return 0;
}
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64018 (CXXOperatorCallExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CXXOperatorCallExpr ( 9a64018 -> p 9a64078 )
CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
|-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
| `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
|-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
| |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
| |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
| `-CallExpr 0x9a636d0 'double'
|   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
|   | `-IntegerLiteral 0x9a63678 'int' 2
|   `-IntegerLiteral 0x9a63690 'int' 17
`-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
  `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
std::cout << fast_pow(2, 17) << std::endl[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64008 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a64008 -> p 9a64018 )
ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
`-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
operator<<[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63fb8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a63fb8 -> p 9a64008 )
DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
operator<<[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63fb8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64008 (ImplicitCastExpr)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CXXOperatorCallExpr ( 9a63bc8 -> p 9a64018 )
CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
|-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
|-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
`-CallExpr 0x9a636d0 'double'
  |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
  | `-IntegerLiteral 0x9a63678 'int' 2
  `-IntegerLiteral 0x9a63690 'int' 17
std::cout << fast_pow(2, 17)[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63bb8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a63bb8 -> p 9a63bc8 )
ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
`-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
operator<<[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63b68 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a63b68 -> p 9a63bb8 )
DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
operator<<[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63b68 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63bb8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a6361c (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a6361c -> p 9a63bc8 )
DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
std::cout[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a6361c (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636d0 (CallExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt CallExpr ( 9a636d0 -> p 9a63bc8 )
CallExpr 0x9a636d0 'double'
|-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
|-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
| `-IntegerLiteral 0x9a63678 'int' 2
`-IntegerLiteral 0x9a63690 'int' 17
fast_pow(2, 17)[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636c0 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a636c0 -> p 9a636d0 )
ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
`-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
fast_pow[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636a8 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a636a8 -> p 9a636c0 )
DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
fast_pow[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636a8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636c0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636f8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a636f8 -> p 9a636d0 )
ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
`-IntegerLiteral 0x9a63678 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63678 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a63678 -> p 9a636f8 )
IntegerLiteral 0x9a63678 'int' 2
2[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63678 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636f8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63690 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a63690 -> p 9a636d0 )
IntegerLiteral 0x9a63690 'int' 17
17[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63690 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636d0 (CallExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63fa8 (ImplicitCastExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ImplicitCastExpr ( 9a63fa8 -> p 9a64018 )
ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
`-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
std::endl[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63f80 (DeclRefExpr) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt DeclRefExpr ( 9a63f80 -> p 9a63fa8 )
DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
std::endl[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63f80 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63fa8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64018 (CXXOperatorCallExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64068 (ReturnStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt ReturnStmt ( 9a64068 -> p 9a64078 )
ReturnStmt 0x9a64068
`-IntegerLiteral 0x9a64050 'int' 0
return 0;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64050 (IntegerLiteral) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt IntegerLiteral ( 9a64050 -> p 9a64068 )
IntegerLiteral 0x9a64050 'int' 0
0[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64050 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64068 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64078 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66b90 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64090 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66b50 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a66b50 -> p 9a66c00 )
LabelStmt 0x9a66b50 '____label____11'
`-NullStmt 0x9a66b40
____label____11:
;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66b40 (NullStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt NullStmt ( 9a66b40 -> p 9a66b50 )
NullStmt 0x9a66b40
;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66b40 (NullStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66b50 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66c00 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66af0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66c90 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a66c90 -> p 9a66cf0 )
LabelStmt 0x9a66c90 '____label____14'
`-GotoStmt 0x9a66ce0 '____label____13' 0x9a66c20
____label____14:
goto ____label____13;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66ce0 (GotoStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt GotoStmt ( 9a66ce0 -> p 9a66c90 )
GotoStmt 0x9a66ce0 '____label____13' 0x9a66c20
goto ____label____13;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66ce0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66c90 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66cf0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66d08 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66cd0 (LabelStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt LabelStmt ( 9a66cd0 -> p 9a66d28 )
LabelStmt 0x9a66cd0 '____label____15'
`-NullStmt 0x9a66cc0
____label____15:
;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66cc0 (NullStmt) | range 
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 48] Stmt NullStmt ( 9a66cc0 -> p 9a66cd0 )
NullStmt 0x9a66cc0
;
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66cc0 (NullStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66cd0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66d28 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66c50 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a640c0 (CompoundStmt)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 109] root stmt type CompoundStmt 9a640c0 | children size 2
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a633f0 (Function)
[DEBUG][alg/FlattenCFG/LocalDeclMover.cpp - line 27] END LocalDeclMover
FunctionDecl 0x9a633f0 <_gcd_ob.cpp:43:1, line:53:1> main 'int (void)'
`-CompoundStmt 0x9a640c0 <line:43:12, line:53:1>
  |-DeclStmt 0x9a66d80 <<invalid sloc>>
  | `-VarDecl 0x9a63460 <line:44:5, col:9> ____localvar____11 'int'
  |-DeclStmt 0x9a66dc0 <<invalid sloc>>
  | `-VarDecl 0x9a63520 <line:46:17, col:21> ____localvar____12 'int'
  |-BinaryOperator 0x9a66d68 <<invalid sloc>, line:44:29> 'int' lvalue '='
  | |-DeclRefExpr 0x9a66d4c <<invalid sloc>> 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
  | `-IntegerLiteral 0x9a63490 <col:29> 'int' 1
  `-LabelStmt 0x9a66c50 <<invalid sloc>> '____label____13'
    `-CompoundStmt 0x9a66d28 <<invalid sloc>>
      |-IfStmt 0x9a66d08 <<invalid sloc>>
      | |-<<<NULL>>>
      | |-BinaryOperator 0x9a634f8 <line:45:12, col:33> '_Bool' '!='
      | | |-ImplicitCastExpr 0x9a634e8 <col:12> 'int' <LValueToRValue>
      | | | `-DeclRefExpr 0x9a634b8 <col:12> 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
      | | `-IntegerLiteral 0x9a634d0 <col:33> 'int' 0
      | |-CompoundStmt 0x9a66cf0 <<invalid sloc>>
      | | |-LabelStmt 0x9a66af0 <<invalid sloc>> '____label____10'
      | | | `-CompoundStmt 0x9a66c00 <<invalid sloc>>
      | | |   |-BinaryOperator 0x9a66da8 <<invalid sloc>, line:46:41> 'int' lvalue '='
      | | |   | |-DeclRefExpr 0x9a66d90 <<invalid sloc>> 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
      | | |   | `-IntegerLiteral 0x9a63550 <col:41> 'int' 1
      | | |   |-IfStmt 0x9a66b00 <<invalid sloc>>
      | | |   | |-<<<NULL>>>
      | | |   | |-BinaryOperator 0x9a66bc8 <<invalid sloc>, line:47:16> '_Bool' '=='
      | | |   | | |-ImplicitCastExpr 0x9a66bb8 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   | | | `-DeclRefExpr 0x9a66ba0 <<invalid sloc>> 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
      | | |   | | `-IntegerLiteral 0x9a635c0 <col:16> 'int' 1
      | | |   | |-GotoStmt 0x9a66be0 <<invalid sloc>> '____label____12' 0x9a66b60
      | | |   | `-GotoStmt 0x9a66bf0 <<invalid sloc>> '____label____11' 0x9a66b20
      | | |   |-CompoundStmt 0x9a64090 <line:46:44, line:52:9>
      | | |   | `-LabelStmt 0x9a66b90 <<invalid sloc>, line:51:13> '____label____12'
      | | |   |   `-CompoundStmt 0x9a64078 <line:48:13, line:51:13>
      | | |   |     |-CXXOperatorCallExpr 0x9a64018 <line:49:17, col:54> '__ostream_type':'class std::basic_ostream<char>' lvalue
      | | |   |     | |-ImplicitCastExpr 0x9a64008 <col:46> '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
      | | |   |     | | `-DeclRefExpr 0x9a63fb8 <col:46> '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
      | | |   |     | |-CXXOperatorCallExpr 0x9a63bc8 <col:17, col:44> '__ostream_type':'class std::basic_ostream<char>' lvalue
      | | |   |     | | |-ImplicitCastExpr 0x9a63bb8 <col:27> '__ostream_type &(*)(double)' <FunctionToPointerDecay>
      | | |   |     | | | `-DeclRefExpr 0x9a63b68 <col:27> '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
      | | |   |     | | |-DeclRefExpr 0x9a6361c <col:17, col:22> 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
      | | |   |     | | `-CallExpr 0x9a636d0 <col:30, col:44> 'double'
      | | |   |     | |   |-ImplicitCastExpr 0x9a636c0 <col:30> 'double (*)(double, int)' <FunctionToPointerDecay>
      | | |   |     | |   | `-DeclRefExpr 0x9a636a8 <col:30> 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
      | | |   |     | |   |-ImplicitCastExpr 0x9a636f8 <col:39> 'double' <IntegralToFloating>
      | | |   |     | |   | `-IntegerLiteral 0x9a63678 <col:39> 'int' 2
      | | |   |     | |   `-IntegerLiteral 0x9a63690 <col:42> 'int' 17
      | | |   |     | `-ImplicitCastExpr 0x9a63fa8 <col:49, col:54> 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
      | | |   |     |   `-DeclRefExpr 0x9a63f80 <col:49, col:54> 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
      | | |   |     `-ReturnStmt 0x9a64068 <line:50:17, col:24>
      | | |   |       `-IntegerLiteral 0x9a64050 <col:24> 'int' 0
      | | |   `-LabelStmt 0x9a66b50 <<invalid sloc>> '____label____11'
      | | |     `-NullStmt 0x9a66b40 <<invalid sloc>>
      | | `-LabelStmt 0x9a66c90 <<invalid sloc>> '____label____14'
      | |   `-GotoStmt 0x9a66ce0 <<invalid sloc>> '____label____13' 0x9a66c20
      | `-<<<NULL>>>
      `-LabelStmt 0x9a66cd0 <<invalid sloc>> '____label____15'
        `-NullStmt 0x9a66cc0 <<invalid sloc>>
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 20] decl before flatten
FunctionDecl 0x9a633f0 <_gcd_ob.cpp:43:1, line:53:1> main 'int (void)'
`-CompoundStmt 0x9a640c0 <line:43:12, line:53:1>
  |-DeclStmt 0x9a66d80 <<invalid sloc>>
  | `-VarDecl 0x9a63460 <line:44:5, col:9> ____localvar____11 'int'
  |-DeclStmt 0x9a66dc0 <<invalid sloc>>
  | `-VarDecl 0x9a63520 <line:46:17, col:21> ____localvar____12 'int'
  |-BinaryOperator 0x9a66d68 <<invalid sloc>, line:44:29> 'int' lvalue '='
  | |-DeclRefExpr 0x9a66d4c <<invalid sloc>> 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
  | `-IntegerLiteral 0x9a63490 <col:29> 'int' 1
  `-LabelStmt 0x9a66c50 <<invalid sloc>> '____label____13'
    `-CompoundStmt 0x9a66d28 <<invalid sloc>>
      |-IfStmt 0x9a66d08 <<invalid sloc>>
      | |-<<<NULL>>>
      | |-BinaryOperator 0x9a634f8 <line:45:12, col:33> '_Bool' '!='
      | | |-ImplicitCastExpr 0x9a634e8 <col:12> 'int' <LValueToRValue>
      | | | `-DeclRefExpr 0x9a634b8 <col:12> 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
      | | `-IntegerLiteral 0x9a634d0 <col:33> 'int' 0
      | |-CompoundStmt 0x9a66cf0 <<invalid sloc>>
      | | |-LabelStmt 0x9a66af0 <<invalid sloc>> '____label____10'
      | | | `-CompoundStmt 0x9a66c00 <<invalid sloc>>
      | | |   |-BinaryOperator 0x9a66da8 <<invalid sloc>, line:46:41> 'int' lvalue '='
      | | |   | |-DeclRefExpr 0x9a66d90 <<invalid sloc>> 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
      | | |   | `-IntegerLiteral 0x9a63550 <col:41> 'int' 1
      | | |   |-IfStmt 0x9a66b00 <<invalid sloc>>
      | | |   | |-<<<NULL>>>
      | | |   | |-BinaryOperator 0x9a66bc8 <<invalid sloc>, line:47:16> '_Bool' '=='
      | | |   | | |-ImplicitCastExpr 0x9a66bb8 <<invalid sloc>> 'int' <LValueToRValue>
      | | |   | | | `-DeclRefExpr 0x9a66ba0 <<invalid sloc>> 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
      | | |   | | `-IntegerLiteral 0x9a635c0 <col:16> 'int' 1
      | | |   | |-GotoStmt 0x9a66be0 <<invalid sloc>> '____label____12' 0x9a66b60
      | | |   | `-GotoStmt 0x9a66bf0 <<invalid sloc>> '____label____11' 0x9a66b20
      | | |   |-CompoundStmt 0x9a64090 <line:46:44, line:52:9>
      | | |   | `-LabelStmt 0x9a66b90 <<invalid sloc>, line:51:13> '____label____12'
      | | |   |   `-CompoundStmt 0x9a64078 <line:48:13, line:51:13>
      | | |   |     |-CXXOperatorCallExpr 0x9a64018 <line:49:17, col:54> '__ostream_type':'class std::basic_ostream<char>' lvalue
      | | |   |     | |-ImplicitCastExpr 0x9a64008 <col:46> '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
      | | |   |     | | `-DeclRefExpr 0x9a63fb8 <col:46> '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
      | | |   |     | |-CXXOperatorCallExpr 0x9a63bc8 <col:17, col:44> '__ostream_type':'class std::basic_ostream<char>' lvalue
      | | |   |     | | |-ImplicitCastExpr 0x9a63bb8 <col:27> '__ostream_type &(*)(double)' <FunctionToPointerDecay>
      | | |   |     | | | `-DeclRefExpr 0x9a63b68 <col:27> '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
      | | |   |     | | |-DeclRefExpr 0x9a6361c <col:17, col:22> 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
      | | |   |     | | `-CallExpr 0x9a636d0 <col:30, col:44> 'double'
      | | |   |     | |   |-ImplicitCastExpr 0x9a636c0 <col:30> 'double (*)(double, int)' <FunctionToPointerDecay>
      | | |   |     | |   | `-DeclRefExpr 0x9a636a8 <col:30> 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
      | | |   |     | |   |-ImplicitCastExpr 0x9a636f8 <col:39> 'double' <IntegralToFloating>
      | | |   |     | |   | `-IntegerLiteral 0x9a63678 <col:39> 'int' 2
      | | |   |     | |   `-IntegerLiteral 0x9a63690 <col:42> 'int' 17
      | | |   |     | `-ImplicitCastExpr 0x9a63fa8 <col:49, col:54> 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
      | | |   |     |   `-DeclRefExpr 0x9a63f80 <col:49, col:54> 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
      | | |   |     `-ReturnStmt 0x9a64068 <line:50:17, col:24>
      | | |   |       `-IntegerLiteral 0x9a64050 <col:24> 'int' 0
      | | |   `-LabelStmt 0x9a66b50 <<invalid sloc>> '____label____11'
      | | |     `-NullStmt 0x9a66b40 <<invalid sloc>>
      | | `-LabelStmt 0x9a66c90 <<invalid sloc>> '____label____14'
      | |   `-GotoStmt 0x9a66ce0 <<invalid sloc>> '____label____13' 0x9a66c20
      | `-<<<NULL>>>
      `-LabelStmt 0x9a66cd0 <<invalid sloc>> '____label____15'
        `-NullStmt 0x9a66cc0 <<invalid sloc>>
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 26] cfg before flattening

 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
  ____label____15:
   Preds (1): B8
   Succs (1): B0

 [B2]
  ____label____14:
   T: goto ____label____13;

   Preds (1): B3
   Succs (1): B8

 [B3]
  ____label____11:
   Preds (1): B5
   Succs (1): B2

 [B4]
  ____label____12:
   1: fast_pow(2, 17)
   2: std::cout << [B4.1] (OperatorCall)
   3: [B4.2] << std::endl (OperatorCall)
   4: return 0;
   Preds (1): B6
   Succs (1): B0

 [B5]
   T: goto ____label____11;

   Preds (1): B7
   Succs (1): B3

 [B6]
   T: goto ____label____12;

   Preds (1): B7
   Succs (1): B4

 [B7]
  ____label____10:
   1: ____localvar____12 = 1
   2: ____localvar____12 == 1
   T: if [B7.2]
   Preds (1): B8
   Succs (2): B6 B5

 [B8]
  ____label____13:
   1: ____localvar____11 != 0
   T: if [B8.1]
   Preds (2): B9 B2
   Succs (2): B7 B1

 [B9]
   1: int ____localvar____11;
   2: int ____localvar____12;
   3: ____localvar____11 = 1
   Preds (1): B10
   Succs (1): B8

 [B0 (EXIT)]
   Preds (2): B1 B4

Writing '/tmp/llvm_SyIkhr/CFG.dot'...  done. 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a640c0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66d80 (DeclStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a63460 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a63460 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66d80 (DeclStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66dc0 (DeclStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 50] enter decl 9a63520 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 52] exit decl 9a63520 (Var)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66dc0 (DeclStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66d68 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66d4c (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66d4c (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63490 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63490 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66d68 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66c50 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66d28 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66d08 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634f8 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634e8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634b8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634b8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634e8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a634d0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634d0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a634f8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66cf0 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66af0 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66c00 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66da8 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66d90 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66d90 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63550 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63550 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66da8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66b00 (IfStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66bc8 (BinaryOperator) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66bb8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66ba0 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66ba0 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66bb8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a635c0 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a635c0 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66bc8 (BinaryOperator)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66be0 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66be0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66bf0 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66bf0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66b00 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64090 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66b90 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64078 (CompoundStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64018 (CXXOperatorCallExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64008 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63fb8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63fb8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64008 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63bb8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63b68 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63b68 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63bb8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a6361c (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a6361c (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636d0 (CallExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636c0 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636a8 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636a8 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636c0 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a636f8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63678 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63678 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636f8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63690 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63690 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a636d0 (CallExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63fa8 (ImplicitCastExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a63f80 (DeclRefExpr) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63f80 (DeclRefExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a63fa8 (ImplicitCastExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64018 (CXXOperatorCallExpr)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64068 (ReturnStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a64050 (IntegerLiteral) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64050 (IntegerLiteral)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64068 (ReturnStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64078 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66b90 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a64090 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66b50 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66b40 (NullStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66b40 (NullStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66b50 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66c00 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66af0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66c90 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66ce0 (GotoStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66ce0 (GotoStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66c90 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66cf0 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66d08 (IfStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66cd0 (LabelStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 38] enter stmt 9a66cc0 (NullStmt) | range 
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66cc0 (NullStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66cd0 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66d28 (CompoundStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a66c50 (LabelStmt)
[DEBUG][./alg/FlattenCFG/ASTTraverserPlus.h - line 40] exit stmt 9a640c0 (CompoundStmt)
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 1 -> 0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 2 -> 8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 3 -> 2
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B4.1], Root is [B4.3]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 395] Pass handledStmt [B4.2], Root is [B4.3]
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 4 -> 0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 5 -> 3
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 6 -> 4
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 7 -> 6
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 7 -> 5
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 8 -> 7
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 8 -> 1
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 9 -> 8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 404] edge 10 -> 9
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 39] CompoundStmt before flatten
{
    int ____localvar____11;
    int ____localvar____12;
    ____localvar____11 = 1;
  ____label____13:
    {
        if (____localvar____11 != 0) {
          ____label____10:
            {
                ____localvar____12 = 1;
                if (____localvar____12 == 1)
                    goto ____label____12;
                else
                    goto ____label____11;
                {
                  ____label____12:
                    {
                        std::cout << fast_pow(2, 17) << std::endl;
                        return 0;
                    }
                }
              ____label____11:
                ;
            }
          ____label____14:
            goto ____label____13;
        }
      ____label____15:
        ;
    }
}
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 48] DeclStmt at the beginning met.
DeclStmt 0x9a66d80
`-VarDecl 0x9a63460 ____localvar____11 'int'
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 48] DeclStmt at the beginning met.
DeclStmt 0x9a66dc0
`-VarDecl 0x9a63520 ____localvar____12 'int'
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 1 9a6ffb4
<NULL>CaseStmt 0x9a66f10
|-IntegerLiteral 0x9a66ef8 'int' 1
|-<<<NULL>>>
`-CompoundStmt 0x9a66f48
  |-LabelStmt 0x9a66cd0 '____label____15'
  | `-NullStmt 0x9a66f30
  `-BreakStmt 0x9a66f40
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 2 9a70018
<NULL>CaseStmt 0x9a66f78
|-IntegerLiteral 0x9a66f60 'int' 2
|-<<<NULL>>>
`-CompoundStmt 0x9a66ff8
  |-LabelStmt 0x9a66c90 '____label____14'
  | `-NullStmt 0x9a66f98
  |-BinaryOperator 0x9a66fd8 'int' lvalue '='
  | |-DeclRefExpr 0x9a66fc0 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
  | `-IntegerLiteral 0x9a66fa8 'int' 8
  `-BreakStmt 0x9a66ff0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 3 9a7007c
<NULL>CaseStmt 0x9a67030
|-IntegerLiteral 0x9a67018 'int' 3
|-<<<NULL>>>
`-CompoundStmt 0x9a670b0
  |-LabelStmt 0x9a66b50 '____label____11'
  | `-NullStmt 0x9a67050
  |-BinaryOperator 0x9a67090 'int' lvalue '='
  | |-DeclRefExpr 0x9a67078 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
  | `-IntegerLiteral 0x9a67060 'int' 2
  `-BreakStmt 0x9a670a8
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 4 9a700e0
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
std::cout << fast_pow(2, 17) << std::endl[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #1
return 0;
CaseStmt 0x9a670e8
|-IntegerLiteral 0x9a670d0 'int' 4
|-<<<NULL>>>
`-CompoundStmt 0x9a67120
  |-LabelStmt 0x9a66b90 '____label____12'
  | `-NullStmt 0x9a67108
  |-CXXOperatorCallExpr 0x9a64018 '__ostream_type':'class std::basic_ostream<char>' lvalue
  | |-ImplicitCastExpr 0x9a64008 '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
  | | `-DeclRefExpr 0x9a63fb8 '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
  | |-CXXOperatorCallExpr 0x9a63bc8 '__ostream_type':'class std::basic_ostream<char>' lvalue
  | | |-ImplicitCastExpr 0x9a63bb8 '__ostream_type &(*)(double)' <FunctionToPointerDecay>
  | | | `-DeclRefExpr 0x9a63b68 '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
  | | |-DeclRefExpr 0x9a6361c 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
  | | `-CallExpr 0x9a636d0 'double'
  | |   |-ImplicitCastExpr 0x9a636c0 'double (*)(double, int)' <FunctionToPointerDecay>
  | |   | `-DeclRefExpr 0x9a636a8 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
  | |   |-ImplicitCastExpr 0x9a636f8 'double' <IntegralToFloating>
  | |   | `-IntegerLiteral 0x9a63678 'int' 2
  | |   `-IntegerLiteral 0x9a63690 'int' 17
  | `-ImplicitCastExpr 0x9a63fa8 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
  |   `-DeclRefExpr 0x9a63f80 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
  |-ReturnStmt 0x9a64068
  | `-IntegerLiteral 0x9a64050 'int' 0
  `-BreakStmt 0x9a67118
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 5 9a7014c
<NULL>CaseStmt 0x9a67158
|-IntegerLiteral 0x9a67140 'int' 5
|-<<<NULL>>>
`-CompoundStmt 0x9a671c8
  |-BinaryOperator 0x9a671a8 'int' lvalue '='
  | |-DeclRefExpr 0x9a67190 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
  | `-IntegerLiteral 0x9a67178 'int' 3
  `-BreakStmt 0x9a671c0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 6 9a701b0
<NULL>CaseStmt 0x9a671f8
|-IntegerLiteral 0x9a671e0 'int' 6
|-<<<NULL>>>
`-CompoundStmt 0x9a67268
  |-BinaryOperator 0x9a67248 'int' lvalue '='
  | |-DeclRefExpr 0x9a67230 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
  | `-IntegerLiteral 0x9a67218 'int' 4
  `-BreakStmt 0x9a67260
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 7 9a70214
____localvar____12 == 1[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____12 = 1[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #1
____localvar____12 == 1[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 257] terminator cond stmt met: IfStmt
IfStmt 0x9a672c8
|-<<<NULL>>>
|-BinaryOperator 0x9a66bc8 '_Bool' '=='
| |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
| `-IntegerLiteral 0x9a635c0 'int' 1
|-CompoundStmt 0x9a67378
| `-BinaryOperator 0x9a67318 'int' lvalue '='
|   |-DeclRefExpr 0x9a67300 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
|   `-IntegerLiteral 0x9a672e8 'int' 6
`-CompoundStmt 0x9a67390
  `-BinaryOperator 0x9a67360 'int' lvalue '='
    |-DeclRefExpr 0x9a67348 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
    `-IntegerLiteral 0x9a67330 'int' 5
CaseStmt 0x9a67298
|-IntegerLiteral 0x9a67280 'int' 7
|-<<<NULL>>>
`-CompoundStmt 0x9a673f8
  |-LabelStmt 0x9a66af0 '____label____10'
  | `-NullStmt 0x9a672b8
  |-BinaryOperator 0x9a66da8 'int' lvalue '='
  | |-DeclRefExpr 0x9a66d90 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
  | `-IntegerLiteral 0x9a63550 'int' 1
  |-IfStmt 0x9a672c8
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a66bc8 '_Bool' '=='
  | | |-ImplicitCastExpr 0x9a66bb8 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a66ba0 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
  | | `-IntegerLiteral 0x9a635c0 'int' 1
  | |-CompoundStmt 0x9a67378
  | | `-BinaryOperator 0x9a67318 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a67300 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
  | |   `-IntegerLiteral 0x9a672e8 'int' 6
  | `-CompoundStmt 0x9a67390
  |   `-BinaryOperator 0x9a67360 'int' lvalue '='
  |     |-DeclRefExpr 0x9a67348 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
  |     `-IntegerLiteral 0x9a67330 'int' 5
  |-BinaryOperator 0x9a673d8 'int' lvalue '='
  | |-DeclRefExpr 0x9a673c0 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
  | `-IntegerLiteral 0x9a673a8 'int' 6
  `-BreakStmt 0x9a673f0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 8 9a70280
____localvar____11 != 0[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
____localvar____11 != 0[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 257] terminator cond stmt met: IfStmt
IfStmt 0x9a67468
|-<<<NULL>>>
|-BinaryOperator 0x9a634f8 '_Bool' '!='
| |-ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
| `-IntegerLiteral 0x9a634d0 'int' 0
|-CompoundStmt 0x9a67518
| `-BinaryOperator 0x9a674b8 'int' lvalue '='
|   |-DeclRefExpr 0x9a674a0 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
|   `-IntegerLiteral 0x9a67488 'int' 7
`-CompoundStmt 0x9a67530
  `-BinaryOperator 0x9a67500 'int' lvalue '='
    |-DeclRefExpr 0x9a674e8 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
    `-IntegerLiteral 0x9a674d0 'int' 1
CaseStmt 0x9a67438
|-IntegerLiteral 0x9a67420 'int' 8
|-<<<NULL>>>
`-CompoundStmt 0x9a67598
  |-LabelStmt 0x9a66c50 '____label____13'
  | `-NullStmt 0x9a67458
  |-IfStmt 0x9a67468
  | |-<<<NULL>>>
  | |-BinaryOperator 0x9a634f8 '_Bool' '!='
  | | |-ImplicitCastExpr 0x9a634e8 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x9a634b8 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
  | | `-IntegerLiteral 0x9a634d0 'int' 0
  | |-CompoundStmt 0x9a67518
  | | `-BinaryOperator 0x9a674b8 'int' lvalue '='
  | |   |-DeclRefExpr 0x9a674a0 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
  | |   `-IntegerLiteral 0x9a67488 'int' 7
  | `-CompoundStmt 0x9a67530
  |   `-BinaryOperator 0x9a67500 'int' lvalue '='
  |     |-DeclRefExpr 0x9a674e8 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
  |     `-IntegerLiteral 0x9a674d0 'int' 1
  |-BinaryOperator 0x9a67578 'int' lvalue '='
  | |-DeclRefExpr 0x9a67560 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
  | `-IntegerLiteral 0x9a67548 'int' 7
  `-BreakStmt 0x9a67590
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 210] create case for node 9 9a702ec
<NULL>[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #0
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #1
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 245] add stmt #2
____localvar____11 = 1CaseStmt 0x9a675d0
|-IntegerLiteral 0x9a675b8 'int' 9
|-<<<NULL>>>
`-CompoundStmt 0x9a67640
  |-BinaryOperator 0x9a66d68 'int' lvalue '='
  | |-DeclRefExpr 0x9a66d4c 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
  | `-IntegerLiteral 0x9a63490 'int' 1
  |-BinaryOperator 0x9a67620 'int' lvalue '='
  | |-DeclRefExpr 0x9a67608 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
  | `-IntegerLiteral 0x9a675f0 'int' 8
  `-BreakStmt 0x9a67638
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 85] New switch body create
switch (int ____localvar____13 = 9) {
  case 1:
    {
      ____label____15:
        ;
        break;
    }
  case 2:
    {
      ____label____14:
        ;
        ____localvar____13 = 8;
        break;
    }
  case 3:
    {
      ____label____11:
        ;
        ____localvar____13 = 2;
        break;
    }
  case 4:
    {
      ____label____12:
        ;
        std::cout << fast_pow(2, 17) << std::endl;
        return 0;
        break;
    }
  case 5:
    {
        ____localvar____13 = 3;
        break;
    }
  case 6:
    {
        ____localvar____13 = 4;
        break;
    }
  case 7:
    {
      ____label____10:
        ;
        ____localvar____12 = 1;
        if (____localvar____12 == 1) {
            ____localvar____13 = 6;
        } else {
            ____localvar____13 = 5;
        }
        ____localvar____13 = 6;
        break;
    }
  case 8:
    {
      ____label____13:
        ;
        if (____localvar____11 != 0) {
            ____localvar____13 = 7;
        } else {
            ____localvar____13 = 1;
        }
        ____localvar____13 = 7;
        break;
    }
  case 9:
    {
        ____localvar____11 = 1;
        ____localvar____13 = 8;
        break;
    }
}
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 89] New function body created.
{
    int ____localvar____11;
    int ____localvar____12;
    int ____localvar____13 = 9;
    while (____localvar____13 != 0)
        switch (int ____localvar____13 = 9) {
          case 1:
            {
              ____label____15:
                ;
                break;
            }
          case 2:
            {
              ____label____14:
                ;
                ____localvar____13 = 8;
                break;
            }
          case 3:
            {
              ____label____11:
                ;
                ____localvar____13 = 2;
                break;
            }
          case 4:
            {
              ____label____12:
                ;
                std::cout << fast_pow(2, 17) << std::endl;
                return 0;
                break;
            }
          case 5:
            {
                ____localvar____13 = 3;
                break;
            }
          case 6:
            {
                ____localvar____13 = 4;
                break;
            }
          case 7:
            {
              ____label____10:
                ;
                ____localvar____12 = 1;
                if (____localvar____12 == 1) {
                    ____localvar____13 = 6;
                } else {
                    ____localvar____13 = 5;
                }
                ____localvar____13 = 6;
                break;
            }
          case 8:
            {
              ____label____13:
                ;
                if (____localvar____11 != 0) {
                    ____localvar____13 = 7;
                } else {
                    ____localvar____13 = 1;
                }
                ____localvar____13 = 7;
                break;
            }
          case 9:
            {
                ____localvar____11 = 1;
                ____localvar____13 = 8;
                break;
            }
        }
}
[DEBUG][alg/FlattenCFG/CFGFlattener.cpp - line 92] decl after flatten
FunctionDecl 0x9a633f0 <_gcd_ob.cpp:43:1, line:53:1> main 'int (void)'
`-CompoundStmt 0x9a640c0 <line:43:12, line:53:1>
  |-DeclStmt 0x9a66d80 <<invalid sloc>>
  | `-VarDecl 0x9a63460 <line:44:5, col:9> ____localvar____11 'int'
  |-DeclStmt 0x9a66dc0 <<invalid sloc>>
  | `-VarDecl 0x9a63520 <line:46:17, col:21> ____localvar____12 'int'
  |-DeclStmt 0x9a66e30 <<invalid sloc>>
  | `-VarDecl 0x9a66e00 <<invalid sloc>> ____localvar____13 'int'
  |   `-IntegerLiteral 0x9a66de0 <<invalid sloc>> 'int' 9
  `-WhileStmt 0x9a66e98 <<invalid sloc>>
    |-<<<NULL>>>
    |-BinaryOperator 0x9a66e80 <<invalid sloc>> '_Bool' '!='
    | |-ImplicitCastExpr 0x9a66e70 <<invalid sloc>> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x9a66e58 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
    | `-IntegerLiteral 0x9a66e40 <<invalid sloc>> 'int' 0
    `-SwitchStmt 0x9a66ec8 <<invalid sloc>>
      |-DeclStmt 0x9a66ee8 <<invalid sloc>>
      | `-VarDecl 0x9a66e00 <<invalid sloc>> ____localvar____13 'int'
      |   `-IntegerLiteral 0x9a66de0 <<invalid sloc>> 'int' 9
      |-DeclRefExpr 0x9a66eac <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
      `-CompoundStmt 0x9a67660 <<invalid sloc>>
        |-CaseStmt 0x9a66f10 <<invalid sloc>>
        | |-IntegerLiteral 0x9a66ef8 <<invalid sloc>> 'int' 1
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a66f48 <<invalid sloc>>
        |   |-LabelStmt 0x9a66cd0 <<invalid sloc>> '____label____15'
        |   | `-NullStmt 0x9a66f30 <<invalid sloc>>
        |   `-BreakStmt 0x9a66f40 <<invalid sloc>>
        |-CaseStmt 0x9a66f78 <<invalid sloc>>
        | |-IntegerLiteral 0x9a66f60 <<invalid sloc>> 'int' 2
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a66ff8 <<invalid sloc>>
        |   |-LabelStmt 0x9a66c90 <<invalid sloc>> '____label____14'
        |   | `-NullStmt 0x9a66f98 <<invalid sloc>>
        |   |-BinaryOperator 0x9a66fd8 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a66fc0 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
        |   | `-IntegerLiteral 0x9a66fa8 <<invalid sloc>> 'int' 8
        |   `-BreakStmt 0x9a66ff0 <<invalid sloc>>
        |-CaseStmt 0x9a67030 <<invalid sloc>>
        | |-IntegerLiteral 0x9a67018 <<invalid sloc>> 'int' 3
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a670b0 <<invalid sloc>>
        |   |-LabelStmt 0x9a66b50 <<invalid sloc>> '____label____11'
        |   | `-NullStmt 0x9a67050 <<invalid sloc>>
        |   |-BinaryOperator 0x9a67090 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a67078 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
        |   | `-IntegerLiteral 0x9a67060 <<invalid sloc>> 'int' 2
        |   `-BreakStmt 0x9a670a8 <<invalid sloc>>
        |-CaseStmt 0x9a670e8 <<invalid sloc>>
        | |-IntegerLiteral 0x9a670d0 <<invalid sloc>> 'int' 4
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a67120 <<invalid sloc>>
        |   |-LabelStmt 0x9a66b90 <<invalid sloc>> '____label____12'
        |   | `-NullStmt 0x9a67108 <<invalid sloc>>
        |   |-CXXOperatorCallExpr 0x9a64018 <line:49:17, col:54> '__ostream_type':'class std::basic_ostream<char>' lvalue
        |   | |-ImplicitCastExpr 0x9a64008 <col:46> '__ostream_type &(*)(__ostream_type &(*)(__ostream_type &))' <FunctionToPointerDecay>
        |   | | `-DeclRefExpr 0x9a63fb8 <col:46> '__ostream_type &(__ostream_type &(*)(__ostream_type &))' lvalue CXXMethod 0x9a17280 'operator<<' '__ostream_type &(__ostream_type &(*)(__ostream_type &))'
        |   | |-CXXOperatorCallExpr 0x9a63bc8 <col:17, col:44> '__ostream_type':'class std::basic_ostream<char>' lvalue
        |   | | |-ImplicitCastExpr 0x9a63bb8 <col:27> '__ostream_type &(*)(double)' <FunctionToPointerDecay>
        |   | | | `-DeclRefExpr 0x9a63b68 <col:27> '__ostream_type &(double)' lvalue CXXMethod 0x9a17fc0 'operator<<' '__ostream_type &(double)'
        |   | | |-DeclRefExpr 0x9a6361c <col:17, col:22> 'ostream':'class std::basic_ostream<char>' lvalue Var 0x9a62670 'cout' 'ostream':'class std::basic_ostream<char>'
        |   | | `-CallExpr 0x9a636d0 <col:30, col:44> 'double'
        |   | |   |-ImplicitCastExpr 0x9a636c0 <col:30> 'double (*)(double, int)' <FunctionToPointerDecay>
        |   | |   | `-DeclRefExpr 0x9a636a8 <col:30> 'double (double, int)' lvalue Function 0x9a62aa0 'fast_pow' 'double (double, int)'
        |   | |   |-ImplicitCastExpr 0x9a636f8 <col:39> 'double' <IntegralToFloating>
        |   | |   | `-IntegerLiteral 0x9a63678 <col:39> 'int' 2
        |   | |   `-IntegerLiteral 0x9a63690 <col:42> 'int' 17
        |   | `-ImplicitCastExpr 0x9a63fa8 <col:49, col:54> 'basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &)' <FunctionToPointerDecay>
        |   |   `-DeclRefExpr 0x9a63f80 <col:49, col:54> 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' lvalue Function 0x9a19840 'endl' 'basic_ostream<char, struct std::char_traits<char> > &(basic_ostream<char, struct std::char_traits<char> > &)' (FunctionTemplate 0x9a07510 'endl')
        |   |-ReturnStmt 0x9a64068 <line:50:17, col:24>
        |   | `-IntegerLiteral 0x9a64050 <col:24> 'int' 0
        |   `-BreakStmt 0x9a67118 <<invalid sloc>>
        |-CaseStmt 0x9a67158 <<invalid sloc>>
        | |-IntegerLiteral 0x9a67140 <<invalid sloc>> 'int' 5
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a671c8 <<invalid sloc>>
        |   |-BinaryOperator 0x9a671a8 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a67190 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
        |   | `-IntegerLiteral 0x9a67178 <<invalid sloc>> 'int' 3
        |   `-BreakStmt 0x9a671c0 <<invalid sloc>>
        |-CaseStmt 0x9a671f8 <<invalid sloc>>
        | |-IntegerLiteral 0x9a671e0 <<invalid sloc>> 'int' 6
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a67268 <<invalid sloc>>
        |   |-BinaryOperator 0x9a67248 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a67230 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
        |   | `-IntegerLiteral 0x9a67218 <<invalid sloc>> 'int' 4
        |   `-BreakStmt 0x9a67260 <<invalid sloc>>
        |-CaseStmt 0x9a67298 <<invalid sloc>>
        | |-IntegerLiteral 0x9a67280 <<invalid sloc>> 'int' 7
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a673f8 <<invalid sloc>>
        |   |-LabelStmt 0x9a66af0 <<invalid sloc>> '____label____10'
        |   | `-NullStmt 0x9a672b8 <<invalid sloc>>
        |   |-BinaryOperator 0x9a66da8 <<invalid sloc>, line:46:41> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a66d90 <<invalid sloc>> 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
        |   | `-IntegerLiteral 0x9a63550 <col:41> 'int' 1
        |   |-IfStmt 0x9a672c8 <<invalid sloc>>
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x9a66bc8 <<invalid sloc>, line:47:16> '_Bool' '=='
        |   | | |-ImplicitCastExpr 0x9a66bb8 <<invalid sloc>> 'int' <LValueToRValue>
        |   | | | `-DeclRefExpr 0x9a66ba0 <<invalid sloc>> 'int' lvalue Var 0x9a63520 '____localvar____12' 'int'
        |   | | `-IntegerLiteral 0x9a635c0 <col:16> 'int' 1
        |   | |-CompoundStmt 0x9a67378 <<invalid sloc>>
        |   | | `-BinaryOperator 0x9a67318 <<invalid sloc>> 'int' lvalue '='
        |   | |   |-DeclRefExpr 0x9a67300 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
        |   | |   `-IntegerLiteral 0x9a672e8 <<invalid sloc>> 'int' 6
        |   | `-CompoundStmt 0x9a67390 <<invalid sloc>>
        |   |   `-BinaryOperator 0x9a67360 <<invalid sloc>> 'int' lvalue '='
        |   |     |-DeclRefExpr 0x9a67348 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
        |   |     `-IntegerLiteral 0x9a67330 <<invalid sloc>> 'int' 5
        |   |-BinaryOperator 0x9a673d8 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a673c0 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
        |   | `-IntegerLiteral 0x9a673a8 <<invalid sloc>> 'int' 6
        |   `-BreakStmt 0x9a673f0 <<invalid sloc>>
        |-CaseStmt 0x9a67438 <<invalid sloc>>
        | |-IntegerLiteral 0x9a67420 <<invalid sloc>> 'int' 8
        | |-<<<NULL>>>
        | `-CompoundStmt 0x9a67598 <<invalid sloc>>
        |   |-LabelStmt 0x9a66c50 <<invalid sloc>> '____label____13'
        |   | `-NullStmt 0x9a67458 <<invalid sloc>>
        |   |-IfStmt 0x9a67468 <<invalid sloc>>
        |   | |-<<<NULL>>>
        |   | |-BinaryOperator 0x9a634f8 <line:45:12, col:33> '_Bool' '!='
        |   | | |-ImplicitCastExpr 0x9a634e8 <col:12> 'int' <LValueToRValue>
        |   | | | `-DeclRefExpr 0x9a634b8 <col:12> 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
        |   | | `-IntegerLiteral 0x9a634d0 <col:33> 'int' 0
        |   | |-CompoundStmt 0x9a67518 <<invalid sloc>>
        |   | | `-BinaryOperator 0x9a674b8 <<invalid sloc>> 'int' lvalue '='
        |   | |   |-DeclRefExpr 0x9a674a0 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
        |   | |   `-IntegerLiteral 0x9a67488 <<invalid sloc>> 'int' 7
        |   | `-CompoundStmt 0x9a67530 <<invalid sloc>>
        |   |   `-BinaryOperator 0x9a67500 <<invalid sloc>> 'int' lvalue '='
        |   |     |-DeclRefExpr 0x9a674e8 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
        |   |     `-IntegerLiteral 0x9a674d0 <<invalid sloc>> 'int' 1
        |   |-BinaryOperator 0x9a67578 <<invalid sloc>> 'int' lvalue '='
        |   | |-DeclRefExpr 0x9a67560 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
        |   | `-IntegerLiteral 0x9a67548 <<invalid sloc>> 'int' 7
        |   `-BreakStmt 0x9a67590 <<invalid sloc>>
        `-CaseStmt 0x9a675d0 <<invalid sloc>>
          |-IntegerLiteral 0x9a675b8 <<invalid sloc>> 'int' 9
          |-<<<NULL>>>
          `-CompoundStmt 0x9a67640 <<invalid sloc>>
            |-BinaryOperator 0x9a66d68 <<invalid sloc>, line:44:29> 'int' lvalue '='
            | |-DeclRefExpr 0x9a66d4c <<invalid sloc>> 'int' lvalue Var 0x9a63460 '____localvar____11' 'int'
            | `-IntegerLiteral 0x9a63490 <col:29> 'int' 1
            |-BinaryOperator 0x9a67620 <<invalid sloc>> 'int' lvalue '='
            | |-DeclRefExpr 0x9a67608 <<invalid sloc>> 'int' lvalue Var 0x9a66e00 '____localvar____13' 'int'
            | `-IntegerLiteral 0x9a675f0 <<invalid sloc>> 'int' 8
            `-BreakStmt 0x9a67638 <<invalid sloc>>
[DEBUG][alg/SimplePrinter.cpp - line 7] alg started.
[DEBUG][alg/SimplePrinterConsumer.cpp - line 47] PrintingPolicy: 0 0 0 0 0
double fast_pow(double ____localvar____5, int ____localvar____6) {
    double ____localvar____7;
    int ____localvar____8;
    int ____localvar____9;
    int ____localvar____10 = 27;
    while (____localvar____10 != 0)
        switch (int ____localvar____10 = 27) {
          case 1:
            {
              ____label____9:
                ;
                break;
            }
          case 2:
            {
              ____label____8:
                ;
                ____localvar____10 = 26;
                break;
            }
          case 3:
            {
              ____label____1:
                ;
                ____localvar____10 = 2;
                break;
            }
          case 4:
            {
                ____localvar____10 = 3;
                break;
            }
          case 5:
            {
                ____localvar____8 = 3;
                ____localvar____10 = 4;
                break;
            }
          case 6:
            {
                ____localvar____8 = 4;
                ____localvar____10 = 4;
                break;
            }
          case 7:
            {
              ____label____2:
                ;
                if (____localvar____6 == 0) {
                    ____localvar____10 = 6;
                } else {
                    ____localvar____10 = 5;
                }
                ____localvar____10 = 6;
                break;
            }
          case 8:
            {
              ____label____3:
                ;
                return 1;
                break;
            }
          case 9:
            {
                ____localvar____10 = 3;
                break;
            }
          case 10:
            {
                ____localvar____8 = 1;
                ____localvar____10 = 9;
                break;
            }
          case 11:
            {
                ____localvar____8 = 2;
                ____localvar____10 = 9;
                break;
            }
          case 12:
            {
              ____label____4:
                ;
                ____localvar____7 = fast_pow(____localvar____5, ____localvar____6 / 2);
                if (____localvar____6 % 2 == 0) {
                    ____localvar____10 = 11;
                } else {
                    ____localvar____10 = 10;
                }
                ____localvar____10 = 11;
                break;
            }
          case 13:
            {
              ____label____5:
                ;
                return ____localvar____7 * ____localvar____7;
                break;
            }
          case 14:
            {
              ____label____6:
                ;
                return ____localvar____7 * ____localvar____7 * ____localvar____5;
                break;
            }
          case 15:
            {
                ____localvar____10 = 3;
                break;
            }
          case 16:
            {
                ____localvar____10 = 14;
                break;
            }
          case 17:
            {
                if (____localvar____9 == 1) {
                    ____localvar____10 = 16;
                } else {
                    ____localvar____10 = 15;
                }
                ____localvar____10 = 16;
                break;
            }
          case 18:
            {
                ____localvar____10 = 13;
                break;
            }
          case 19:
            {
                if (____localvar____9 == 2) {
                    ____localvar____10 = 18;
                } else {
                    ____localvar____10 = 17;
                }
                ____localvar____10 = 18;
                break;
            }
          case 20:
            {
                ____localvar____10 = 12;
                break;
            }
          case 21:
            {
                if (____localvar____9 == 3) {
                    ____localvar____10 = 20;
                } else {
                    ____localvar____10 = 19;
                }
                ____localvar____10 = 20;
                break;
            }
          case 22:
            {
                ____localvar____10 = 8;
                break;
            }
          case 23:
            {
                if (____localvar____9 == 4) {
                    ____localvar____10 = 22;
                } else {
                    ____localvar____10 = 21;
                }
                ____localvar____10 = 22;
                break;
            }
          case 24:
            {
                ____localvar____10 = 7;
                break;
            }
          case 25:
            {
              ____label____0:
                ;
                ____localvar____9 = (____localvar____8);
                if (____localvar____9 == 5) {
                    ____localvar____10 = 24;
                } else {
                    ____localvar____10 = 23;
                }
                ____localvar____10 = 24;
                break;
            }
          case 26:
            {
              ____label____7:
                ;
                if (____localvar____8 != 0) {
                    ____localvar____10 = 25;
                } else {
                    ____localvar____10 = 1;
                }
                ____localvar____10 = 25;
                break;
            }
          case 27:
            {
                ____localvar____8 = 5;
                ____localvar____10 = 26;
                break;
            }
        }
}

;
[0;1;33m
 [B69 (ENTRY)]
[0m[0;35m   Succs [0m(1):[0;35m B68[0m
[0;1;33m
 [B1]
[0m[0;34m   Preds [0m(28):[0;34m B3 B4 B9 B14 B15 B19 B20 B24
      B25 B29 B30 B34 B35 B36 B39 B42 B47 B48
      B49 B50 B53 B58 B59 B60 B61 B63 B65 B2[0m
[0;35m   Succs [0m(1):[0;35m B67[0m
[0;1;33m
 [B2]
[0m   1: 27
   2: int ____localvar____10 = 27;
   3: ____localvar____10
[0;32m   T: switch [B2.3]
[0m[0;34m   Preds [0m(1):[0;34m B67[0m
[0;35m   Succs [0m(28):[0;35m B3 B8 B13 B14 B18 B19 B23 B24
     B28 B29 B33 B34 B35 B38 B41 B46 B47 B48
     B49 B52 B57 B58 B59 B60 B62 B64 B66 B1[0m
[0;1;33m
 [B3]
[0m  case 27:
   1: ____localvar____8 = 5
   2: ____localvar____10 = 26
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B4]
[0m   1: ____localvar____10 = 25
[0;32m   T: break;

[0m[0;34m   Preds [0m(2):[0;34m B5 B6[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B5]
[0m   1: ____localvar____10 = 1
[0;34m   Preds [0m(1):[0;34m B7[0m
[0;35m   Succs [0m(1):[0;35m B4[0m
[0;1;33m
 [B6]
[0m   1: ____localvar____10 = 25
[0;34m   Preds [0m(1):[0;34m B7[0m
[0;35m   Succs [0m(1):[0;35m B4[0m
[0;1;33m
 [B7]
[0m  ____label____7:
   1: ____localvar____8 != 0
[0;32m   T: if [B7.1]
[0m[0;34m   Preds [0m(1):[0;34m B8[0m
[0;35m   Succs [0m(2):[0;35m B6 B5[0m
[0;1;33m
 [B8]
[0m  case 26:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B7[0m
[0;1;33m
 [B9]
[0m   1: ____localvar____10 = 24
[0;32m   T: break;

[0m[0;34m   Preds [0m(2):[0;34m B10 B11[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B10]
[0m   1: ____localvar____10 = 23
[0;34m   Preds [0m(1):[0;34m B12[0m
[0;35m   Succs [0m(1):[0;35m B9[0m
[0;1;33m
 [B11]
[0m   1: ____localvar____10 = 24
[0;34m   Preds [0m(1):[0;34m B12[0m
[0;35m   Succs [0m(1):[0;35m B9[0m
[0;1;33m
 [B12]
[0m  ____label____0:
   1: ____localvar____9 = (____localvar____8)
   2: ____localvar____9 == 5
[0;32m   T: if [B12.2]
[0m[0;34m   Preds [0m(1):[0;34m B13[0m
[0;35m   Succs [0m(2):[0;35m B11 B10[0m
[0;1;33m
 [B13]
[0m  case 25:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B12[0m
[0;1;33m
 [B14]
[0m  case 24:
   1: ____localvar____10 = 7
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B15]
[0m   1: ____localvar____10 = 22
[0;32m   T: break;

[0m[0;34m   Preds [0m(2):[0;34m B16 B17[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B16]
[0m   1: ____localvar____10 = 21
[0;34m   Preds [0m(1):[0;34m B18[0m
[0;35m   Succs [0m(1):[0;35m B15[0m
[0;1;33m
 [B17]
[0m   1: ____localvar____10 = 22
[0;34m   Preds [0m(1):[0;34m B18[0m
[0;35m   Succs [0m(1):[0;35m B15[0m
[0;1;33m
 [B18]
[0m  case 23:
   1: ____localvar____9 == 4
[0;32m   T: if [B18.1]
[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(2):[0;35m B17 B16[0m
[0;1;33m
 [B19]
[0m  case 22:
   1: ____localvar____10 = 8
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B20]
[0m   1: ____localvar____10 = 20
[0;32m   T: break;

[0m[0;34m   Preds [0m(2):[0;34m B21 B22[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B21]
[0m   1: ____localvar____10 = 19
[0;34m   Preds [0m(1):[0;34m B23[0m
[0;35m   Succs [0m(1):[0;35m B20[0m
[0;1;33m
 [B22]
[0m   1: ____localvar____10 = 20
[0;34m   Preds [0m(1):[0;34m B23[0m
[0;35m   Succs [0m(1):[0;35m B20[0m
[0;1;33m
 [B23]
[0m  case 21:
   1: ____localvar____9 == 3
[0;32m   T: if [B23.1]
[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(2):[0;35m B22 B21[0m
[0;1;33m
 [B24]
[0m  case 20:
   1: ____localvar____10 = 12
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B25]
[0m   1: ____localvar____10 = 18
[0;32m   T: break;

[0m[0;34m   Preds [0m(2):[0;34m B26 B27[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B26]
[0m   1: ____localvar____10 = 17
[0;34m   Preds [0m(1):[0;34m B28[0m
[0;35m   Succs [0m(1):[0;35m B25[0m
[0;1;33m
 [B27]
[0m   1: ____localvar____10 = 18
[0;34m   Preds [0m(1):[0;34m B28[0m
[0;35m   Succs [0m(1):[0;35m B25[0m
[0;1;33m
 [B28]
[0m  case 19:
   1: ____localvar____9 == 2
[0;32m   T: if [B28.1]
[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(2):[0;35m B27 B26[0m
[0;1;33m
 [B29]
[0m  case 18:
   1: ____localvar____10 = 13
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B30]
[0m   1: ____localvar____10 = 16
[0;32m   T: break;

[0m[0;34m   Preds [0m(2):[0;34m B31 B32[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B31]
[0m   1: ____localvar____10 = 15
[0;34m   Preds [0m(1):[0;34m B33[0m
[0;35m   Succs [0m(1):[0;35m B30[0m
[0;1;33m
 [B32]
[0m   1: ____localvar____10 = 16
[0;34m   Preds [0m(1):[0;34m B33[0m
[0;35m   Succs [0m(1):[0;35m B30[0m
[0;1;33m
 [B33]
[0m  case 17:
   1: ____localvar____9 == 1
[0;32m   T: if [B33.1]
[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(2):[0;35m B32 B31[0m
[0;1;33m
 [B34]
[0m  case 16:
   1: ____localvar____10 = 14
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B35]
[0m  case 15:
   1: ____localvar____10 = 3
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B36]
[0m[0;32m   T: break;

[0m[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B37]
[0m  ____label____6:
   1: return ____localvar____7 * ____localvar____7 * ____localvar____5;
[0;34m   Preds [0m(1):[0;34m B38[0m
[0;35m   Succs [0m(1):[0;35m B0[0m
[0;1;33m
 [B38]
[0m  case 14:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B37[0m
[0;1;33m
 [B39]
[0m[0;32m   T: break;

[0m[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B40]
[0m  ____label____5:
   1: return ____localvar____7 * ____localvar____7;
[0;34m   Preds [0m(1):[0;34m B41[0m
[0;35m   Succs [0m(1):[0;35m B0[0m
[0;1;33m
 [B41]
[0m  case 13:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B40[0m
[0;1;33m
 [B42]
[0m   1: ____localvar____10 = 11
[0;32m   T: break;

[0m[0;34m   Preds [0m(2):[0;34m B43 B44[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B43]
[0m   1: ____localvar____10 = 10
[0;34m   Preds [0m(1):[0;34m B45[0m
[0;35m   Succs [0m(1):[0;35m B42[0m
[0;1;33m
 [B44]
[0m   1: ____localvar____10 = 11
[0;34m   Preds [0m(1):[0;34m B45[0m
[0;35m   Succs [0m(1):[0;35m B42[0m
[0;1;33m
 [B45]
[0m  ____label____4:
   1: fast_pow(____localvar____5, ____localvar____6 / 2)
   2: ____localvar____7 = [B45.1]
   3: ____localvar____6 % 2 == 0
[0;32m   T: if [B45.3]
[0m[0;34m   Preds [0m(1):[0;34m B46[0m
[0;35m   Succs [0m(2):[0;35m B44 B43[0m
[0;1;33m
 [B46]
[0m  case 12:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B45[0m
[0;1;33m
 [B47]
[0m  case 11:
   1: ____localvar____8 = 2
   2: ____localvar____10 = 9
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B48]
[0m  case 10:
   1: ____localvar____8 = 1
   2: ____localvar____10 = 9
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B49]
[0m  case 9:
   1: ____localvar____10 = 3
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B50]
[0m[0;32m   T: break;

[0m[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B51]
[0m  ____label____3:
   1: return 1;
[0;34m   Preds [0m(1):[0;34m B52[0m
[0;35m   Succs [0m(1):[0;35m B0[0m
[0;1;33m
 [B52]
[0m  case 8:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B51[0m
[0;1;33m
 [B53]
[0m   1: ____localvar____10 = 6
[0;32m   T: break;

[0m[0;34m   Preds [0m(2):[0;34m B54 B55[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B54]
[0m   1: ____localvar____10 = 5
[0;34m   Preds [0m(1):[0;34m B56[0m
[0;35m   Succs [0m(1):[0;35m B53[0m
[0;1;33m
 [B55]
[0m   1: ____localvar____10 = 6
[0;34m   Preds [0m(1):[0;34m B56[0m
[0;35m   Succs [0m(1):[0;35m B53[0m
[0;1;33m
 [B56]
[0m  ____label____2:
   1: ____localvar____6 == 0
[0;32m   T: if [B56.1]
[0m[0;34m   Preds [0m(1):[0;34m B57[0m
[0;35m   Succs [0m(2):[0;35m B55 B54[0m
[0;1;33m
 [B57]
[0m  case 7:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B56[0m
[0;1;33m
 [B58]
[0m  case 6:
   1: ____localvar____8 = 4
   2: ____localvar____10 = 4
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B59]
[0m  case 5:
   1: ____localvar____8 = 3
   2: ____localvar____10 = 4
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B60]
[0m  case 4:
   1: ____localvar____10 = 3
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B61]
[0m  ____label____1:
   1: ____localvar____10 = 2
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B62[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B62]
[0m  case 3:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B61[0m
[0;1;33m
 [B63]
[0m  ____label____8:
   1: ____localvar____10 = 26
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B64[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B64]
[0m  case 2:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B63[0m
[0;1;33m
 [B65]
[0m  ____label____9:
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B66[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B66]
[0m  case 1:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B65[0m
[0;1;33m
 [B67]
[0m   1: ____localvar____10 != 0
[0;32m   T: while [B67.1]
[0m[0;34m   Preds [0m(2):[0;34m B1 B68[0m
[0;35m   Succs [0m(2):[0;35m B2 B0[0m
[0;1;33m
 [B68]
[0m   1: double ____localvar____7;
   2: int ____localvar____8;
   3: int ____localvar____9;
   4: int ____localvar____10 = 27;
[0;34m   Preds [0m(1):[0;34m B69[0m
[0;35m   Succs [0m(1):[0;35m B67[0m
[0;1;33m
 [B0 (EXIT)]
[0m[0;34m   Preds [0m(4):[0;34m B37 B40 B51 B67[0m

Writing '/tmp/llvm_bHNOIO/CFG.dot'...  done. 
[DEBUG][alg/SimplePrinterConsumer.cpp - line 47] PrintingPolicy: 0 0 0 0 0
int main() {
    int ____localvar____11;
    int ____localvar____12;
    int ____localvar____13 = 9;
    while (____localvar____13 != 0)
        switch (int ____localvar____13 = 9) {
          case 1:
            {
              ____label____15:
                ;
                break;
            }
          case 2:
            {
              ____label____14:
                ;
                ____localvar____13 = 8;
                break;
            }
          case 3:
            {
              ____label____11:
                ;
                ____localvar____13 = 2;
                break;
            }
          case 4:
            {
              ____label____12:
                ;
                std::cout << fast_pow(2, 17) << std::endl;
                return 0;
                break;
            }
          case 5:
            {
                ____localvar____13 = 3;
                break;
            }
          case 6:
            {
                ____localvar____13 = 4;
                break;
            }
          case 7:
            {
              ____label____10:
                ;
                ____localvar____12 = 1;
                if (____localvar____12 == 1) {
                    ____localvar____13 = 6;
                } else {
                    ____localvar____13 = 5;
                }
                ____localvar____13 = 6;
                break;
            }
          case 8:
            {
              ____label____13:
                ;
                if (____localvar____11 != 0) {
                    ____localvar____13 = 7;
                } else {
                    ____localvar____13 = 1;
                }
                ____localvar____13 = 7;
                break;
            }
          case 9:
            {
                ____localvar____11 = 1;
                ____localvar____13 = 8;
                break;
            }
        }
}

;
[0;1;33m
 [B27 (ENTRY)]
[0m[0;35m   Succs [0m(1):[0;35m B26[0m
[0;1;33m
 [B1]
[0m[0;34m   Preds [0m(10):[0;34m B3 B4 B9 B14 B15 B16 B19 B21
      B23 B2[0m
[0;35m   Succs [0m(1):[0;35m B25[0m
[0;1;33m
 [B2]
[0m   1: 9
   2: int ____localvar____13 = 9;
   3: ____localvar____13
[0;32m   T: switch [B2.3]
[0m[0;34m   Preds [0m(1):[0;34m B25[0m
[0;35m   Succs [0m(10):[0;35m B3 B8 B13 B14 B15 B18 B20 B22
     B24 B1[0m
[0;1;33m
 [B3]
[0m  case 9:
   1: ____localvar____11 = 1
   2: ____localvar____13 = 8
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B4]
[0m   1: ____localvar____13 = 7
[0;32m   T: break;

[0m[0;34m   Preds [0m(2):[0;34m B5 B6[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B5]
[0m   1: ____localvar____13 = 1
[0;34m   Preds [0m(1):[0;34m B7[0m
[0;35m   Succs [0m(1):[0;35m B4[0m
[0;1;33m
 [B6]
[0m   1: ____localvar____13 = 7
[0;34m   Preds [0m(1):[0;34m B7[0m
[0;35m   Succs [0m(1):[0;35m B4[0m
[0;1;33m
 [B7]
[0m  ____label____13:
   1: ____localvar____11 != 0
[0;32m   T: if [B7.1]
[0m[0;34m   Preds [0m(1):[0;34m B8[0m
[0;35m   Succs [0m(2):[0;35m B6 B5[0m
[0;1;33m
 [B8]
[0m  case 8:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B7[0m
[0;1;33m
 [B9]
[0m   1: ____localvar____13 = 6
[0;32m   T: break;

[0m[0;34m   Preds [0m(2):[0;34m B10 B11[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B10]
[0m   1: ____localvar____13 = 5
[0;34m   Preds [0m(1):[0;34m B12[0m
[0;35m   Succs [0m(1):[0;35m B9[0m
[0;1;33m
 [B11]
[0m   1: ____localvar____13 = 6
[0;34m   Preds [0m(1):[0;34m B12[0m
[0;35m   Succs [0m(1):[0;35m B9[0m
[0;1;33m
 [B12]
[0m  ____label____10:
   1: ____localvar____12 = 1
   2: ____localvar____12 == 1
[0;32m   T: if [B12.2]
[0m[0;34m   Preds [0m(1):[0;34m B13[0m
[0;35m   Succs [0m(2):[0;35m B11 B10[0m
[0;1;33m
 [B13]
[0m  case 7:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B12[0m
[0;1;33m
 [B14]
[0m  case 6:
   1: ____localvar____13 = 4
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B15]
[0m  case 5:
   1: ____localvar____13 = 3
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B16]
[0m[0;32m   T: break;

[0m[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B17]
[0m  ____label____12:
   1: fast_pow(2, 17)
   2: std::cout << [B17.1] (OperatorCall)
   3: [B17.2] << std::endl (OperatorCall)
   4: return 0;
[0;34m   Preds [0m(1):[0;34m B18[0m
[0;35m   Succs [0m(1):[0;35m B0[0m
[0;1;33m
 [B18]
[0m  case 4:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B17[0m
[0;1;33m
 [B19]
[0m  ____label____11:
   1: ____localvar____13 = 2
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B20[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B20]
[0m  case 3:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B19[0m
[0;1;33m
 [B21]
[0m  ____label____14:
   1: ____localvar____13 = 8
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B22[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B22]
[0m  case 2:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B21[0m
[0;1;33m
 [B23]
[0m  ____label____15:
[0;32m   T: break;

[0m[0;34m   Preds [0m(1):[0;34m B24[0m
[0;35m   Succs [0m(1):[0;35m B1[0m
[0;1;33m
 [B24]
[0m  case 1:
[0;34m   Preds [0m(1):[0;34m B2[0m
[0;35m   Succs [0m(1):[0;35m B23[0m
[0;1;33m
 [B25]
[0m   1: ____localvar____13 != 0
[0;32m   T: while [B25.1]
[0m[0;34m   Preds [0m(2):[0;34m B1 B26[0m
[0;35m   Succs [0m(2):[0;35m B2 B0[0m
[0;1;33m
 [B26]
[0m   1: int ____localvar____11;
   2: int ____localvar____12;
   3: int ____localvar____13 = 9;
[0;34m   Preds [0m(1):[0;34m B27[0m
[0;35m   Succs [0m(1):[0;35m B25[0m
[0;1;33m
 [B0 (EXIT)]
[0m[0;34m   Preds [0m(2):[0;34m B17 B25[0m

Writing '/tmp/llvm_7Fpcbc/CFG.dot'...  done. 
[DEBUG][alg/SimplePrinter.cpp - line 26] alg finished.
[DEBUG][ResourceManager.cpp - line 134] src _.__gcd_ob.cpp rewrited.
done2
